top -b -d2 -s1 | sed -e '1,/USERNAME/d' | sed -e '1,/^$/d'
top -b -n 1 -u abc | awk 'NR>7 { sum += $9; } END { print sum; }'
top -b -d 5 -n 2 | awk '$1 == PID {block_num++; next} block_num == 2 {sum += $9;} END {print sum}'
top -n 1
top -bn1 | grep zombie
top -bn1 | sed -n '/Cpu/p'
top -bn1 | grep zombie | awk '{print $4 $6 $8 $10}'
top -b -n1 -c
top -b -n1 | grep processname
top -n1 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -bn1 | sed -n '/Cpu/p' | awk '{print $2}' | sed 's/..,//'
top -b -n1 | head -8 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 -c  | awk '/PID *USER/{print;getline;print}'
top -b -n1 -c  | grep -A 2 '^$'
top -u abc -d 30 -b -n 10
top -p $(pgrep -d',' http)
top -p $(pgrep -d ',' java)
top -p `pgrep process-name | tr \\n , | sed 's/,$//'`
top -c -p $(pgrep -d',' -f string_to_match_in_cmd_line)
top -c
LINE=$(top -b -n 1 | tail -n +8 | head -n 1 | tr -s ' ')
OUTPUT=`top -b -n 1 | tail -n +8 | head -n 1`
top –p $PID
top -b -p `pidof a.out`
top -b -p `pidof a.out` -n 100
top -p $(pgrep --newest ProgramName)
top -p $(pgrep ProgramName | head -n 1)
top -p $(ps aux | awk '/ProgramName/ && ! /awk/ { print $2; exit; }')
top -p $(pgrep --oldest ProgramName)
top -b -n 1 | mail -s any subject your_email@domain.com
sudo cp mymodule.ko /lib/modules/$(uname -r)/kernel/drivers/
cat /boot/config-`uname -r` | grep IP_MROUTE
cat /boot/config-`uname -r`
grep “HIGHMEM” /boot/config-`uname -r`
cat /proc/2671/maps | grep `which tail`
view /boot/config-$(uname -r)
sudo lsusb -t|less
grep PROBES /boot/config-$(uname -r)
grep UTRACE /boot/config-$(uname -r)
grep ds1337 /lib/modules/`uname -r`/modules.alias
sudo lsusb -v|less
top -l 1  | grep $app_name
top -l 1 -s 0 -stats mem -pid $PID
top -l 1 -s 0 -i 1 -stats vprvt -pid $PID
sed -i s/\\\\\n//g filename
set -e
perl -pi -e 'BEGIN { print A new line }' find . -name '*.py')
for a in `find . -name '*.py'` ; do cp $a $a.cp ; echo Added line > $a ; cat $a.cp >> $a ; rm $a.cp ; done
rename 's/(.*)$/new.$1/' original.filename
rename 's/^/new./' original.filename
nl -s prefix file.txt | cut -c7-
nl -s prefix_ a.txt | cut -c7-
cat <(crontab -l) <(echo 1 2 3 4 5 scripty.sh) | crontab -
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping host | perl -nle 'print scalar(localtime),  , $_'
nl -ba infile
nl -ba long-file \
echo $string | nl -ba -s') '
crontab -l -u user | cat - filename | crontab -u user -
cat file1 file2 | crontab
crontab filename
pushd $HOME/Pictures
sudo chmod +x java_ee_sdk-6u2-jdk-linux-x64.sh
chmod +x pretty-print
chmod +x rr.sh
chmod a+x ComputeDate col printdirections
chmod +x *.sh
chmod g+w $(ls -1a | grep -v '^..$')
chmod g+w .^.* ..?*
chmod g+w * ...*
nl -v1000001 file
sed 's/3d3d/\n&/2g' temp | split -dl1 - temp
for filename in *.jpg; do mv $filename prefix_$filename; done;
nl -s^M${LOGFILE}>  
sudo chmod +rx $(which node)
v=5 env|less
TESTVAR=bbb env | fgrep TESTVAR
pushd %Pathname%
chmod +x $(brew --prefix)/etc/bash_completion
touch -d $(date -r filename) - 2 hours filename
touch -d $(date -r $filename) - 2 hours $filename
alias cd-='cd $(history -p !!:1)'
ssh -t example.com screen -r -X ls
ssh -t example.com screen -r; ls
ssh -t example.com screen -r
chmod a+x myscript.sh
chmod a+x $pathToShellmyShell.sh
sudo chmod u+s `which Xvfb`
ssh -fL 127.0.0.1:someport:host.in.the.remote.net:22 proxy.host
yes no | <command>
yes 1 | command
yes n | rm -ir dir1 dir2 dir3
yes | cp * /tmp
yes | rm -ri foo
yes y | rm -ir dir1 dir2 dir3
yes '| COUNTRY' | sed $(wc -l < file)q | paste -d ' ' file -
sed 's/.*/& Bytes/' $TEMPFILE | column -t
echo -e 1\n2\n3 | sed 's/.*$/&<br\/>/'
sed 's/$/\r/g' input |od -c
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list > /dev/null
awk 'NR==1 {print $0, foo, bar; next} {print $0, ($2==x?-:x), ($4==x?-:x)}' file | column -t
history -a
history -r .cwdhist
history -r file.txt
LOGNAME=`basename $0`_`date +%Y%m%d_%H%M`
name=$(date +'%d%m%Y-%H-%M')_$(whoami)
LBUFFER+=$(date)
xhost +si:localuser:`whoami`
PROMPT_COMMAND='echo $(date +%Y/%m/%d (%H:%M)) $(history 1 |cut -c 7-) >> /tmp/trace'
KEY+=`date -r $arg +\ %s`
rsync -rvz -e 'ssh -p 2222' --progress ./dir user@host:/path
rsync -av --copy-dirlinks --delete ../htmlguide ~/src/
rsync -avh /home/abc/* /mnt/windowsabc
rsync -a --stats --progress --delete /home/path server:path
rsync -av /home/user1 wobgalaxy02:/home/user1
rsync -avz --progress local/path/some_file usr@server.com:/some/path/
rsync -avzru --delete-excluded server:/media/10001/music/ /media/Incoming/music/
rsync -avzru --delete-excluded /media/Incoming/music/ server:/media/10001/music/
rsync -av --exclude '*.svn' user@server:/my/dir .
rsync -avv source_host:path/to/application.ini ./application.ini
rsync -avz -e ssh -p $portNumber user@remote.host:/path/to/copy /local/path
rsync -chavzP --stats user@remote.host:/path/to/copy /path/to/local/storage
rsync -chavzP --stats /path/to/copy user@host.remoted.from:/path/to/local/storage
rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder
rsync -av --rsync-path=sudo rsync /path/to/files user@targethost:/path
rsync -av /path/to/files user@targethost:/path
rsync -azP -e ssh -p 2121 /path/to/files/source user@remoteip:/path/to/files/destination
rsync -avlzp /path/to/sfolder name@remote.server:/path/to/remote/dfolder
rsync -aHvz /path/to/sfolder name@remote.server:/path/to/remote/dfolder
rsync -aHvz /path/to/sfolder/ name@remote.server:/path/to/remote/dfolder
rsync -avz --ignore-existing /source folder/* user@remoteserver:/dstfolder/
rsync -ravz /source/backup /destination
rsync -a --relative /top/a/b/c/d remote:/
rsync --progress -avhe ssh /usr/local/  XXX.XXX.XXX.XXX:/BackUp/usr/local/
rsync -rave ssh -i /home/test/pkey_new.pem /var/www/test/ ubuntu@231.210.24.48:/var/www/test
rsync -av <SOURCE_DIR> rsyncuser@192.168.1.110:/srv/www/prj112/myfolder
rsync -aqz _vim/ ~/.vim
rsync -aqz _vimrc ~/.vimrc
rsync -a --delete blanktest/ test/
rsync -aPSHiv remote:directory .
rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO
rsync -avR foo/bar/baz.c remote:/tmp/
rsync -a myfile /foo/bar/
rsync -vuar --delete-after path/subfolder/ path/
rsync -a --exclude .svn path/to/working/copy path/to/export
rsync -avR somedir/./foo/bar/baz.c remote:/tmp/
rsync -azP -e ssh -p PORT_NUMBER source destination
rsync -rvz --chmod=ugo=rwX -e ssh source destination
rsync -avz --rsh='ssh -p3382' source root@remote_server_name:/opt/backups
rsync -avz --chmod=ug=rwx --chmod=o=rx -e ssh src dest
rsync -a -v src dst
rsync -a -v --ignore-existing src dst
rsync -av --delete src-dir remote-user@remote-host:dest-dir
rsync -avz foo:src/bar /data/tmp
rsync -azvu -e ssh user@host1:/directory/ user@host2:/directory2/
rsync -avz -e ssh -p $portNumber user@remoteip:/path/to/files/ /local/path/
rsync -aP --include=*/ --include=*.txt --exclude=* . /path/to/dest
rsync -a -f+ info.txt -f+ data.zip -f'-! */' folder1/ copy_of_folder1/
rsync -vaut ~/.env* ~/.bash* app1:
rsync -av --files-from=- --rsync-path=sudo rsync /path/to/files user@targethost:/path
tar -cvf - data/* | gzip > data.tar.gz
rsync -av remote_host:'find logs -type f -ctime -1)' local_dir
rsync -auve ssh -p 2222 . me@localhost:/some/path
rsync -av . server2::sharename/B
rsync -az --delete /mnt/data/ /media/WD_Disk_1/current_working_data/;
rsync symdir/ symdir_output/ -a --copy-links -v
rsync -avz tata/ tata2/
rsync -avR $i /iscsi;
rsync -av $myFolder .
bzip2 -c file | tee -a logfile
rsync -a --filter=-! */ sorce_dir/ target_dir/
rsync -a /mnt/source-tmp /media/destination/
rsync -avz --rsh=ssh -p$2 key.pub $1:~/.ssh/key.pub
sudo rsync -az user@10.1.1.2:/var/www/ /var/www/
rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude
rsync -av --progress --exclude=*.VOB --exclude=*.avi --exclude=*.mkv --exclude=*.ts --exclude=*.mpg --exclude=*.iso --exclude=*ar --exclude=*.vob --exclude=*.BUP --exclude=*.cdi --exclude=*.ISO --exclude=*.shn --exclude=*.MPG --exclude=*.AVI --exclude=*.DAT --exclude=*.img --exclude=*.nrg --exclude=*.cdr --exclude=*.bin --exclude=*.MOV --exclude=*.goutputs* --exclude=*.flv --exclude=*.mov --exclude=*.m2ts --exclude=*.cdg --exclude=*.IFO --exclude=*.asf --exclude=*.ite /media/2TB\ Data/data/music/* /media/wd/network_sync/music/
tar -czf /fss/fi/outfile.tar.gz `find /fss/fin -d 1 -type d -name * -print`
sudo crontab -e -u apache
screen -S 'name' 'application'
screen -S foo
screen -S lynx lynx
screen -r 'name'
alias rm100m=find / -type f -name *.tar -size +100M -exec rm -i {} \;
alias rm1g=find / -type f -name *.tar -size +1G -exec rm -i {} \;
alias rm2g=find / -type f -name *.tar -size +2G -exec rm -i {} \;
alias rm5g=find / -type f -name *.tar -size +5G -exec rm -i {} \;
alias rmc=find . -iname core -exec rm {} \;
ifconfig eth0 hw ether 00:80:48:BA:d1:30
screen -xr 14313
tmux attach -t test1
tmux attach -t <session name>
scp -p /home/reportuser/dailyReport.doc root@localhost:/root/dailyReports/20150105/
scp -o StrictHostKeyChecking=no root@IP:/root/K
scp -rp DAILY_TEST_FOLDER root@${IPADDRESS}:/home/root/
sshpass -p YOUR_PASSWORD ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM
sshpass -p YOUR_PASSWORD ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM:2400
yes | sudo rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm
yes 1 | script -c 'aspell check text.txt' /dev/null
yes 0 | script -c 'ispell text.txt' /dev/null
yes 0 | script -c 'ispell text.txt' out.txt
mysqldump -e --user=username --password=pswd database | gzip | uuencode my-dbbackup.`date +\%Y-\%m-\%d`.gz | mail me@domain.com
screen -L bash -c '(while :; do tail ~/screenlog.0 | grep -o 0-9*% | tail -1; done | zenity --progress --auto-close &); 7z a output.zip /path/to/input'
mount --bind /tmp/fakerandom /dev/random
mount --bind /original/path /new/path
mount --bind /something /new_something
ifconfig eth0 down
yes '' | ruby -e $(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)
md5sum *.java | awk '{print $1}' | sort | uniq -d
FILE=/tmp/command_cache.`echo -n $KEY | md5sum | cut -c -10`
md5=$(echo $line|md5sum)
checksum=`md5sum /etc/localtime | cut -d' ' -f1`
ls -alR -I dev -I run -I sys -I tmp -I proc /path | md5sum -c /tmp/file
cpio -i -e theDirname | md5sum
echo -n  | md5sum
echo -n | md5sum
md5sum $ecriv
md5=$(md5sum $item | cut -f1 -d\ )
md5=$(md5sum ${my_iso_file})
md5=`md5sum ${my_iso_file} | cut -b-32`
md5sum $source_file $dest_file
md5sum main.cpp*
md5sum <(zcat /tmp/tst.gz) <(bzcat /tmp/tst.bz2) <(lzcat /tmp/tst.lzma) <(xzcat /tmp/tst.xz)
echo -n teststring | gzip -1 | pigz -lv
echo -n teststring | gzip -1 | tail -c 8 | head -c 4 | hexdump -e '1/4 %08x \n'
seq -s * 1 500 |bc
SUM=$(tree | md5sum)
echo a | md5sum
echo -n 'exampleString' | md5sum
echo -n logdir | md5sum - | awk '{print $1}'
echo password | md5sum
cat submission.cpp | astyle -bj | cpp - | md5sum
echo -n yourstring |md5sum
grep -ar -e . --include=*.py /your/dir | md5sum | cut -c-32
cat *.py | md5sum
grep -ar -e . /your/dir | md5sum | cut -c-32
grep -aR -e . /your/dir | md5sum | cut -c-32
ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'
echo -n -e '\x61' | md5sum
cat $FILES | md5sum
cat $(echo $FILES | sort) | md5sum
md5sum filename |cut -f 1 -d  
du -csxb /path | md5sum -c file
tar c dir | md5sum
md5sum $(which cc)
md5sum $(which gcc)
md5sum `which c++`
<files.txt  xargs stat -c %s | paste -sd+ - | bc
echo foo | tee >(sha1sum) >(md5sum)
octave -q --eval 'printf (%f\n, sin(0:0.1:pi/2))'|nl|tee y.txt
seq -5 10 | xargs printf - - %s | xargs  | bc
seq -s+ -5 10 | bc
seq 10 | jq -s 'add'
seq 10 | tr '\n' '+' | sed -e 's/+/ + /g' -e's/ + $/\n/' | xargs expr
seq 10|jq -s add
seq 100000 | paste -sd+ | bc -l
ipcs -mb | awk 'NR > 3 { print $7 }' | paste -sd+ | bc
cat /file/with/numbers | php -r '$s = 0; while (true) { $e = fgets(STDIN); if (false === $e) break; $s += $e; } echo $s;'
alias memu=ps -u $(whoami) -o pid,rss,command | awk '{print \$0}{sum+=\$2} END {print \Total\, sum/1024, \MB\}'
octave -q --eval 'printf (%f\n, 0:0.1:pi/2)'|nl|tee x.txt
depth=$(pstree -sA $processid | head -n1 | sed -e 's#-+-.*#---foobar#' -e 's#---*#\n#g' -eq | wc -l)
env | grep -i shell
cat report.txt | grep -i error | more
screen -D -m yourEvilProgram
rename -v 's/\.JPG/\.jpeg/' *.JPG
crontab -l | sed '/anm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -
sudo find ./bootstrap/cache/ -type d -exec chown apache:laravel {} \;
sudo find ./storage/ -type d -exec chown apache:laravel {} \;
sudo find /var/www -nouser -exec chown root:apache {} \;
echo ',s/foo/bar/g; w' | tr \; '\012' | ed -s file.txt
source <(export | sed 's/gcc.4.2/gcc64/g')
cd -P $dir1
cd /lib/modules/$(uname -r)/
cd  /path/to/pdf
cd -L ..
cd $(dirname $(dirname $(which perl)))/lib
cd find . -print0 | sort -z | tr '\0' '\n' | tail -1)
cd $(basename $1 .tar.gz)
cd /home/`whoami`
cd $(dirname $1)
cd $(dirname $(which oracle))
cd $(dirname $(which oracle))
cd $(dirname `which oracle`)
cd $(dirname $(which $0) )
cd $(which oracle | xargs dirname)
cd $(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d = | tr \ \n | tr -d \n)
cd $(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d = | tr \ \n)
cd $( ~/marker.sh go $@ )
cd $(dirname $(readlink -f $0))
cd $(readlink /proc/$PID/cwd)
cd $(readlink -f $(dirname $0))
cd
sudo  find /var/www/html/ -type d -exec chmod 775 {} \;
sudo  find /var/www/html/ -type f -exec chmod 664 {} \;
chown -v root:root /path/to/yourapp
cd $(dirname $(readlink -f $0))
chsh -s $(which zsh)
chown user_name file
sudo chown root:wheel com.xxxx.adbind.plist
chown root:root script.sh
chown user_name folder
sudo chown el my_test_expect.exp
chown $1:httpd .htaccess
chown $FUID:$FGID $FILE2
chown -- $user:$group $file
sudo chown bob:sftponly /home/bob/writable
sudo chown root:dockerroot /var/run/docker.sock
sudo chown root:wheel adbind.bash
sudo chown root:wheel bin
sudo chown root:www-data /foobar/test_file
sudo chown `whoami` /data/db
sudo chown `whoami` /vol
chmod 444 .bash_logout .bashrc .profile
sudo chmod 755 .git/hooks/pre-commit
sudo chmod 777 .git/hooks/prepare-commit-msg
sudo chmod 755 /dvtcolorconvert.rb
chmod 777 /usr/bin/wget
sudo chmod 755 mksdcard
chmod 555 /home/sshtunnel/
cp --remove-destination $(readlink $f) $f
chown :friends myfile
chown root:root it
sudo chown root:root testfile.txt
sudo chown root:root uid_demo
chown $JBOSS_USER $JBOSS_CONSOLE_LOG
sudo chown nobody /var/www/html/mysite/images/
sudo chown nobody /var/www/html/mysite/tmp_file_upload/
chown user destination_dir
sudo chown root process
ls /empty_dir/ | xargs -L10 chown root
ls /empty_dir/ | xargs -n10 chown root
chown ${JBOSS_USER}: $(dirname $JBOSS_PIDFILE) || true
sudo chown hduser:hadoop {directory path}
chown owner:nobody public_html
chown root:specialusers dir1
chown user:group file ...
sudo chown root. /etc/udev/rules.d/51-android.rules
sudo chown root /home/bob
sudo chown root file.sh
touch -h somesymlink
cd foo | cat
cd -P xyz
cd `cat $HOME/.lastdir`
cd $(dirname $(which oracle))
cd $(dirname $(which oracle))
cd $(dirname $(which oracle))
cd $(dirname `which oracle`)
cd $(which oracle | xargs dirname)
cd `dirname $TARGET_FILE`
cd -P ..
cd $(dirname $(which oracle))
cd `which <file> | xargs dirname`
cd `dirname $(which python)`
cd $TAG
chown amzadm.root  /usr/bin/aws
chgrp btsync /etc/btsync/prefered conf name.conf
chgrp www-data /home/www-user/php_user.sh
chgrp forge /var/run/fcgiwrap.socket
chgrp loggroup logdir
chgrp groupb myprog
chgrp ${USER} myprogram
chgrp god public private
chgrp pub public
chgrp Workers shared
chgrp target_group target_directory
sudo chgrp gpio /sys/class/gpio/export /sys/class/gpio/unexport
chgrp
cd $(dirname $(which ssh));
ssh -q $HOST  -f $FILE_PATH  && echo File exists || echo File does not exist;
od -t x2 -N 1000 $file | cut -c8- | egrep -m1 -q ' 0d| 0d|0d$'
mount -l | grep 'type nfs' | sed 's/.* on \(^ *\) .*/\1/' | grep /path/to/dir
ssh remote_host test -f /path/to/file && echo found || echo not found
ssh host test -e /path/to/file
AMV=$(mount -l | grep \$VLABEL\)
diff <(ssh server1 'rpm -qa | sort') <(ssh server2 'rpm -qa | sort')
mount | grep -q ~/mnt/sdc1
df $path_in_question | grep  $path_in_question$
is_nullglob=$( shopt -s | egrep -i '*nullglob' )
tmux show-environment -g | grep RBENV
tmux show-environment -t sessname | grep RBENV
tmux show-environment | grep RBENV
mount |grep nfs
mount | grep $(readlink -f /dev/disk/by-uuid/$UUID )
mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0')
mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0') | grep '/media/WD_Disk_1 '
md5sum $(which c++) | cut -d' ' -f1` == `md5sum $(which g++) | cut -d' ' -f1`  && echo Yes, equal content || echo No, unequal content
cat *.txt | sort | sort -u -c
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | wc -l
uname -m | grep '64'
kill -0 1
comm -23 <(sort subset | uniq) <(sort set | uniq) | head -1
ls `readlink somelink`
du -csxb /path | md5sum -c file
ssh -S my-ctrl-socket -O check jm@sampledomain.com
ssh -O check officefirewall
readelf -a -W libsomefile.a | grep Class: | sort | uniq
sudo env
df $path_in_question | grep  $path_in_question$
df /full/path | grep -q /full/path
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | grep screen | wc -l
rpm -qf `which sort`
bzip2 -t file.bz2
groups monit |grep www-data
brew doctor
kill -9 $(ps -A -ostat,ppid | grep -e 'zZ'| awk '{ print $2 }')
kill $(ps -A -ostat,ppid | awk '/zZ/{print $2}')
unzip -l some-jars-and-textfiles.zip | tr ':blank:' \\t | cut -f 5 | grep jar
history -c
history -cr
history -c
echo `clear`
clear
chown $(stat -c%u:%g $srcdir) $dstdir
chown $(stat -f%u:%g $srcdir) $dstdir
screen -X quit
ssh -S my-ctrl-socket -O exit jm@sampledomain.com
dir=`echo $dir | sed s,//,/,g`
paste -d  - -
diff $source_file $dest_file
diff current.log previous.log | grep >\|< #comparring users lists
diff -up fastcgi_params fastcgi.conf
diff -u file1 file2
awk 'NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? equal : not_equal; a = $1; b = $3 }' file | column -t
diff -ENwbur repos1/ repos2/
diff -u A1 A2 | grep -E ^\+
comm abc def
diff -Naur dir1/ dir2
diff -Nar /tmp/dir1 /tmp/dir2/
comm <(sort -n f1.txt) <(sort -n f2.txt)
comm <(sort f1.txt) <(sort f2.txt)
diff <(echo hello) <(echo goodbye)
diff <(ls /bin) <(ls /usr/bin)
diff <(zcat file1.gz) <(zcat file2.gz)
comm -23 <(ls) <(ls *Music*)
DST=`dirname ${SRC}`/`basename ${SRC} | tr 'A-Z' 'a-z'`
g=`dirname $f`/`basename $f | tr 'A-Z' 'a-z'`
pstree -p | grep git
FOO=$(echo Hello world | gzip | base64)
gzip archive.tar
hey=$(echo hello world | gzip -cf)
gzip -c my_large_file | split -b 1024MiB - myfile_split.gz_
gzip -c mysqldbbackup.sql | uuencode mysqldbbackup.sql.gz  | mail -s MySQL DB backup@email.com
gzip $file
gzip {}
gzip */*.txt
echo *.txt | xargs gzip -9
sudo find / -xdev -type f -size +100000 -name *.log -exec gzip -v {} \;
sudo find / -xdev -type f -size +100000 -name *.log -exec gzip -v {} \; 2>&1 | awk '{print $6}'
sudo find / -xdev -type f -size +100000 -name *.log -exec gzip {} \; -exec echo {} \;
gzip -k *cache.html
echo gzip. $( gzip | wc -c )
gzip
uuencode <(head -c 200 /dev/urandom | base64 | gzip)
bzip2 file | tee -a logfile
bzip2 *
compress $* &
bzip2 -k example.log
date -ujf%s $(($(date -jf%T 10:36:10 +%s) - $(date -jf%T 10:33:56 +%s))) +%T
pdfunite `find . -name *.pdf | sort` all.pdf
paste -s -d' \n' input.txt
scp -qv $USER@$HOST:$SRC $DEST
ssh -S $SSHSOCKET -O exit $USER_AT_HOST
ssh -M -f -N -o ControlPath=$SSHSOCKET $USER_AT_HOST
ssh -l ${USERNAME} ${HOSTNAME} ${SCRIPT}
ssh -o StrictHostKeyChecking=no -l username hostname pwd; ls
scp -v user@remotehost:/location/KMST_DataFile_*.kms
scp -v /my_folder/my_file.xml user@server_b:/my_new_folder/
ssh -o UserKnownHostsFile=/dev/null username@hostname
scp -P 1234 user@ip address or host name:/var/www/mywebsite/dumps/* /var/www/myNewPathOnCurrentLocalMachine
scp -P 2222 /absolute_path/source-folder/some-file user@example.com:/absolute_path/destination-folder
scp -c blowfish -r user@your.server.example.com:/path/to/foo /home/user/Desktop/
yes > backingfile &
yes | mv ...
yes a=\20131202\ | sed -e :a -e 's/...\(0-9\{4\}\)\(0-9\{2\}\)\(0-9\{2\}\)./\1 \2 \3/'
yes | pv --quiet --rate-limit 10
yes 123456789 | grep --line-buffered . | { head -n 1; head -n 1; }
ping google.com | awk -F' =' 'NR>1{print system(echo -n $(date +%s)), $11}'
yes Y | command-that-asks-for-input
yes Yes | ./ittp-update.sh
yes $'a\nb' | script.py
yes ok | recalcitrant.php
yes 2>/dev/null | ./MyScript.sh
yes | cat | more
yes | rm
yes | command
yes | command-that-asks-for-input
ping -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }'
yes Hidden | dd of=/dev/sdb
yes Hidden | tr '\n' '\0' | dd of=/dev/sdb
yes Hidden | paste -d' ' -s - | dd of=/dev/sdb
yes 'UUUUUUUUUUUUUUUUU' | tr -d '\n' > /dev/to/overwrite
zcat /usr/share/man/man1/man.1.gz  | groff -mandoc -Thtml
ping -c1 1199092913 | head -n1 | grep -Eow 0-9+.0-9+.0-9+.0-9+
echo 595a | awk -niord '$0=chr(0xRT)' RS=.. ORS= | od -tx1c
echo luke;yoda;leila | tr ; \n
echo abc | od -A n -v -t x1 | tr -d ' \n'
echo -ne 'some random\nbytes' | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'
cal -h 02 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal 02 2012|perl -F'(.{1,3})' -anE'BEGIN{$,=\t&;$\=\t\\\\\n}$.==1||eof||do{$i//=@F;print@Fmap{$_*2-1}(1..$i/2)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal | sed '1d;2{h;s/./ /g;x};/^\s*$/b;G;s/\n/ /;s/^...\(.\{15\}\).*/\1/;s/.../ &\t\&/g;s/\&$/\\\\/'
b=`echo $a | sed 's/./\L&/g'`
b=`echo $a | sed 's/./\U&/g'`
sed 's/.*/\L&/'
readlink -f /x/y/../../a/b/z/../c/d
ln -sf $(readlink -f $link) $link
od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l
CLEAN=`echo -n $CLEAN | tr A-Z a-z`
cat foo.md | pandoc -f markdown_github | lynx -stdin
cat infile | dos2unix -U | od -c
var1=`echo $var1 | tr 'A-Z' 'a-z'`
head -c1024 /dev/urandom | xxd -p | tr -d $'\n'
head /dev/random -c16 | od -tx1 -w16 | head -n1 | cut -d' ' -f2- | tr -d ' '
IFS=';' read -a myArray <<< $myArray
cp -f $project_dir/iTunesArtwork Payload/iTunesArtwork
cp ${FILE} COLLECT/$(mktemp job_XXXXXXXXX)
cp -v MacVim_source_folder/src/MacVim/mvim /usr/local/bin
sudo cp -a libgtest_main.so libgtest.so /usr/lib/
cp -n src dest
cp lib*.so ~/usr/gtest/lib
cp -n
cp -vi /boot/config-`uname -r` .config
ls | xargs -n 1 cp -i file.dat
ls -d */ | xargs -iA cp file.txt A
echo dir1 dir2 dir3 | xargs -n 1 cp file1
cat allFolders.txt | xargs -n 1 cp fileName.txt
echo ./fs*/* | xargs -n 1 cp test
cp --parents src/prog.js images/icon.jpg /tmp/package
cp $(ls -1tr * | tail -1) /tmp/
rsync --blocking-io *.cc *.h SConstruct rsync://localhost:40001/bledge_ce
rsync -pr ./export /path/to/webroot
rsync --iconv=UTF-8-MAC,UTF-8 /Users/username/path/on/machine/ 'username@server.ip.address.here:/home/username/path/on/server/'
rsync --iconv=UTF-8,UTF-8-MAC /home/username/path/on/server/ 'username@your.ip.address.here:/Users/username/path/on/machine/'
rsync -a --relative /new/x/y/z/ user@remote:/pre_existing/dir/
rsync -r /path/to/source username@computer:/path/to/dest
rsync 6.3.3/6.3.3/macosx/bin/mybinary ~/work/binaries/macosx/6.3.3/
ssh USER@REMOTE cat file|xclip -i
cat allFolders.txt | xargs -n 1 cp fileName.txt
rsync --partial --progress --rsh=ssh local_file user@host:remote_file
rsync -P -e ssh local_file user@host:remote_file
echo 'some_file_name' | cpio -p --owner someuser:somegroup destination_directory
rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination
rsync -u src dest
rsync -R src/prog.js images/icon.jpg /tmp/package
rsync -Rv src/prog.js images/icon.jpg /tmp/package/
set %PATH% | clip
rsync -r username@computer:/path/to/source /path/to/dest
rsync --sparse sparse-1 sparse-1-copy
rsync -a --include='*/' --exclude='*' source/ destination/
rsync -a -f+ */ -f- * source/ destination/
rsync /path/to/local/storage user@remote.host:/path/to/copy
cp `ls | grep -v Music` /target_directory
rsync -zvr --include=*.sh --exclude=* $from/*  root@$host:/home/tmp/
yes | cp -rf /zzz/zzz/* /xxx/xxx
pwd | tr -d '\n' | pbcopy
pwd | xsel -i
ssh-copy-id myname@somehost
mkdir dir2; tar cvf - dir1/ --exclude */exclude | tar xvf - -C dir2
mkdir dir2; find dir1 \( -type l -o -type f \) -not -wholename '*/exclude/*' -exec cp -P --parents '{}' dir2/ \;
cp /file/that/exists /location/for/new/file
cp -n src dest
scp -C file remote:
cp --remove-destination `readlink bar.pdf` bar.pdf
cp --remove-destination `readlink file` file
sudo cp -a include/gtest /usr/include
cp -rf --remove-destination `readlink file` file
any_command_what_produces_relative_path_names | cpio -pamVd /new/parent/dir
cat $1 | ssh $2 mkdir $3;cat >> $3/$1
rsync -e ssh file host:/directory/.
chmod --reference version2/somefile version1/somefile
rsync -rtvpl /source/backup /destination
rsync -avz --chmod=o-rwx -p tata/ tata2/
rsync -avzn --list-only --include 'company1/' --include 'company1/unique_folder1/***' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data
cp -nr src_dir dest_dir
cp --parents src/prog.js images/icon.jpg /tmp/package
rsync -rl --delete-after --safe-links pi@192.168.1.PI:/{lib,usr} $HOME/raspberrypi/rootfs
cp -R t1/ t2
cp `which python2.7` myenv/bin/python
tar -c -C /path/on/local/machine . | docker cp - dvc:/path/on/container
tar -c foo.sh | docker exec -i theDockerContainer /bin/tar -C /tmp -x
chown --reference=file.txt -- $tempfile
chown --reference=oldfile newfile
chown `stat -c %U originalfile`:`stat -c %G originalfile` newfile
bash | tee /var/log/bash.out.log
cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l
cat foo.c | sed '/^\s*$/d' | wc -l
sed '/^\s*$/d' foo.c | wc -l
result=$(dig +short @$server $domain | wc -l)
git ls-files | xargs file | grep ASCII | cut -d : -f 1 | xargs wc -l
zcat Sample_51770BL1_R1.fastq.gz | wc -l
zcat *R1*.fastq.gz | wc -l
echo 123 123 123 | grep -o 123 | wc -l
who | awk -F' ' '{print $1}' | sort -u | wc -l
tr -d -C X <infile | wc -c
sed 's/^x//g' filename | tr -d '\012' | wc -c
diff -U 0 file1 file2 | grep ^@ | wc -l
diff file1 file2 | grep ^\>\< | wc -l
diff -U 0 file1 file2 | grep -v ^@ | wc -l
comm -12 <(sort file1.txt) <(sort file2.txt) | wc -l
comm -12 ignore.txt input.txt | wc -l
cat /dir/file.txt | wc -l
cat /etc/fstab | wc -l
cat myfile.txt | wc -l
fold -w $COLUMNS testfile | wc -l
wc -l `tree -if --noreport | grep -e'\.php$'`
cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l
cat *.txt | wc -l
git ls-files | xargs cat | wc -l
cat find /usr/share/doc/ -name '*.txt') | zegrep -ic '\<exception\>'
who | grep -v localhost | wc -l
watch ls /proc/$PYTHONPID/fd | wc -l
who | awk '{print $1}' | sort | uniq -c | sort -n
zcat file.gz | awk -v RS=-----------\n '/A=2 ,\n/ && /dummy=2 ,\n/{count++} !/dummy=2 ,\n/{other++} END{print Final counter value=,count, ; other=, other}'
zcat file.gz | awk -v RS=-----------\n '/A=2 ,\n/ && /dummy=2 ,\n/{count++} END{print Final counter value=,count}'
sort file1 file2 | uniq -d | wc -l
comm -23 a.txt b.txt | wc -l
who | wc -l
who | sed 1d | wc -l
echo 1 1 2 2 2 5 | tr ' ' $'\n' | grep -c 2
time find /usr/src -name *.html | xargs /usr/bin/grep -l foo | wc -l
wc -l `find . -type f -name '*.txt' `
df -h -B 1M | grep dev/sda | tr -s ' '| cut -d' ' -f3 |python -c import sys; print sum(int(num) for num in sys.stdin.readlines())
ls -l /boot/grub/*.mod | wc -l
cal -h | cut -c 4-17 | tail -n +3  | wc -w
cat $i | wc -l
sed '/^\s*$/d' $i | wc -l ## skip blank lines
ls -1 | wc -l
wc -l `find . -type f \( -name *.cpp -o -name *.c -o -name *.h \) -print`
wc -l find . -name *.php)
wc -l `find . -name *.php`
wc -l `tree -if --noreport | grep -e'\.php$'`
wc -l **/*.php
count=$(grep -c ^ < $FILE)
wc -l < $FILE
wc -l $file | awk '{print $1}';
cat $file | sed '/\/\//d' | sed '/^\s*$/d' | wc -l
pv file1 | wc -l
cat 'filename' | grep '^ ' | wc -l
bar file1 | wc -l
tail -n 100 file1 | bar | wc -l
tail -n 100 file1 | pv | wc -l
awk '!/^:space:*$/{++x} END{print x}' filename
command | wc -l
wc -l file
cat /dir/file.txt | wc -l
wc -l /dir/file.txt
cat /etc/fstab | wc -l
cat *.txt | wc -l
cat myfile.txt | wc -l
grep -n -i null myfile.txt | wc -l
grep -v '^\s*$' *.py | wc
cat fileName | grep -v ^$ | wc -l
curl yahoo.com --silent | wc -l
grep OK <filename> | wc -l
cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2   $1}'
NUMCPU=$(grep $'^processor\t*:' /proc/cpuinfo |wc -l)
wc -l $(git ls-files | grep '.*\.cs')
git ls-files | grep -P .*(hpp|cpp) | xargs wc -l
git ls-files | grep \.java$ | xargs wc -l
git ls-files | sed 's/ /\\ /g' | grep -E \.*(swift$|mm$) | xargs wc -l
git ls-files | grep -vE (png|jpg|ico) | xargs wc -l
git ls-files -z | xargs -0 wc -l
git ls-files | xargs -d '\n' wc -l
git ls-files | xargs wc -l
wc -l $(git ls-files)
wc -l --files0-from=<(git ls-files -z)
git ls-files | xargs file | grep ASCII | cut -d : -f 1 | xargs wc -l
git ls-files | xargs cat | wc -l
cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l
git grep ^ | wc -l
seq 1 1000 | split -l 1 -a 3 -d - file
join -j2  <(seq 0 255) <(seq 0 255) | xargs -n256 printf %02x/%02x\n | xargs mkdir -p
echo a.txt b.txt c.txt d.txt z.txt | xargs touch
tmp=$(mktemp -d $(dirname $1)/XXXXXX)
tmpfile=$(mktemp $(dirname $file1)/XXXXXX)
tmpfile=$(mktemp $(dirname $1)/XXXXXX)
mkdir -p folder$( seq -s /folder 999 )1000
dd if=/path/to/source/file bs=1 skip=100 count=250 | md5sum
tar czf - www|split -b 1073741824 - www-backup.tar.
tar -czvf my_directory.tar.gz -C my_directory .
tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz
mkdir alpha_real
ln -s $(readlink -f $origlink) $newlink
ln myfile.txt my-hard-link
ssh -i keyfile.rsa -T -N -L 16379:localhost:6379 someuser@somehost
screen -S main
screen -X title mynewtitle
screen -x 2073 -p 0 -X title h
screen -x main -X title blah
screen -x main -p oldwindow -X title blah
echo -e  'y\n'|ssh-keygen -q -t rsa -N  -f ~/.ssh/id_rsa
rsync /dev/null node:existing-dir/new-dir/
screen -S demo -p 1 -X screen '/home/aa/scripts/outputs.sh'
ssh-keygen -b 2048 -t rsa -f key -C michael
ssh-keygen -t rsa -C $APP -N $SSHKEYPASS -f ~/.ssh/id_rsa
rsync -rcn --out-format=%n old/ new/ && rsync -rcn --out-format=%n new/ old/) | sort | uniq
ssh-keygen -f ~/.ssh/apache-rsync
ssh-keygen -t rsa
ssh-keygen -f outfile -N ''
ssh -N -L 2222:remote.example.com:22 bridge.example.com&
ln -s target
ln -s target-directory/`ls -rt target-directory | tail -n1` latest
ln -s `pwd`/current/app/webroot public_html
cat results2.txt | xargs -I{} ln -s {} ~/newlinks
ln -s $source -t ~/newlinks
ln -s find dir -name '*.jpg') .
ln -s git-stuff/home/.!.* .
ln -s $file
ln -s ../config/init
ln -s `pwd` $1/link
ln -s $(readlink -e $2) $1/link
ln -s $HOME/downloads/fnord $HOME/bin/
ln -s $ACTUAL_DIR $SYMLINK
ln -s $(which bam2) $tmpdir/bam
ln -s  ${TARGET}${file}  ${DESTINATION}${file}
ln -s .bashrc .bash_profile
ln -sn git-stuff/home/profile .profile
ln -s /lib/libc.so.6 /lib/libc.so.0
ln -sF /usr/share/my-editor/my-editor-executable   /usr/bin/my-editor
sudo ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
ln -s   /var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb foo
ln -s newtarget temp
ln -s $wh wh
ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl ~/bin/subl
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl ~/bin/subl
ln -s $file `basename $file`
ln -r -s $orig_dest $dest_dir/$orig_name
ln $file /tmp/allfiles
sudo ln -s /usr/bin/perl /usr/local/bin/perl`echo -e '\r'`
ln -s $dir $1/link
ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/
ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/
ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/
join -a1 -a2 <(sed s/^Gene/00ne/ S43.txt | sort) <(sed s/^Gene/00ne/ S44.txt | sort) | column -t | sed s/^00ne/Gene/
echo -en '111 22 3\n4 555 66\n' | column -t | sed 's/ \(0-9\)/\1/g'
tar cvf - `find . -mtime -1 -type f -print` > $archive.tar
tmpdir=$(mktemp -d) && cd $tmpdir
source  <(date +CDATE='%Y-%m-%d %H:%M:%S' EPOCH='%s')
export FOO_BACKWARDS=$(echo 'foo' | rev)
sudo mkdir -p $javaUsrLib
mkdir -p $tempWork
touch -m 201111301200.00 $log_dir/last.check
touch $correctFilePathAndName
cp /dev/null emptyfile.c
echo -e Icon\\r | xargs touch
touch $'Icon\r'
touch index.html
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_
mkdir -p ./some/path
rsync -a --rsync-path=mkdir -p /tmp/x/y/z/ && rsync $source user@remote:/tmp/x/y/z/
mkdir dir2
touch filename_`/bin/date +%Y%m%d%H%M%S`.txt
echo -e $correctFilePathAndName | xargs touch
mkdir -p a/b/c
mkdir -p `dirname /full/path/to/file.txt`
mkdir -p tmp/real_dir1 tmp/real_dir2
mkdir -p x/p/q
mkdir -p $2
mkdir -p /my/other/path/here
mkdir -p /tmp/test/blah/oops/something
mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}
mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}
mkdir -p foo/bar/baz
mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang
mkdir -p path2/{a..z}
ssh -M -S my-ctrl-socket -fnNT -L 50000:localhost:3306 jm@sampledomain.com
du -csxb /path | md5sum > file
cat <(fgrep -i -v $command <(crontab -u test -l)) <(echo $job) | crontab -u test -
cat <(fgrep -i -v $command <(crontab -l)) <(echo $job) | crontab -
ssh -L 4444:raptor.lan:22 genja.org
ln -s $(readlink -e $2) $1/link
mkdir ~/.npm-global
mkdir ${HOME}/.npm-packages
rand_str=$(mktemp --dry-run XXXXX)
ifconfig eth0:fakenfs 192.0.2.55 netmask 255.255.255.255
tmux new-session -ds cf
dir=$(mktemp aws-sync-XXXXX)
shred -s 10 - > my-file
mkdir -p -- $(dirname -- $f)
set script_dir = `pwd`/`dirname $0`
rand_str=$(mktemp --dry-run ${str// /X})
my_tmp_dir=$(mktemp -d --tmpdir=/tmp)
TMPDIR=$(mktemp -p /tmp -d .daemonXXXXXXX)
content_dir1=$(mktemp)
content_dir2=$(mktemp)
fif2=$(mktemp -u)
tmpfile=$(mktemp)
tmpfile=`mktemp`
mktemp -t identifier.XXXXXXXXXX
launcherfile=$(mktemp -p $appdir $template)
TMPPS_PREFIX=$(mktemp ${TMPDIR:-/tmp/}${tempname}.XXXXXX)
tempFile=$(mktemp ${TMPDIR:-/tmp/}$(basename $0)-XXXXX)
mktemp
f=`mktemp -p .`
tempfile=$(mktemp $(pwd)/templateXXXXXX)
source=`mktemp`
TMP_FILE=$(mktemp -t)
LGT_TEMP_FILE=$(mktemp --suffix .cmd)
gnuplotscript=$(mktemp /tmp/gnuplot_cmd_$(basename ${0}).XXXXXX.gnuplot)
script1=`mktemp /tmp/.script.XXXXXX`;
script2=`mktemp /tmp/.script.XXXXXX`;
tmp_file=`mktemp --tmpdir=/tmp emacs-manager.XXXXXX`
mytemp=$(mktemp -t ${PROG})
mktemp /tmp/banana.XXXXXXXXXXXXXXXXXXXXXXX.mp3
TMPDIR=$(mktemp -d)
other=$(mktemp --directory)
td=$( mktemp -d )
tempd=`mktemp -d`
mktemp -d -t
dir=$(mktemp -d)
tmpdir=$(mktemp -d)
$ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template)
mydir=$(mktemp -d ${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX)
tmpdir=$(mktemp -d /tmp/tardir-XXXXXX)
mktemp -d -p /path/to/dir
mktemp -dt $(basename $0).XXXXXXXXXX
rsync_src=`mktemp -d -p $mnt_dir`
tdir=$(pwd)/$(mktemp -d)
sed -n 's;\(http://^/*\)/.*;\1;p'
sed -n 's;\(http://^/*/\).*;\1;p'
echo '1234567890  *' | rev | cut -c 4- | rev
rmdir $(dirname $dir)
rmdir $(dirname $(dirname $dir))
nslookup `hostname`
gzip -dc /file/address/file.tar.gz
awk -F'\t' 'NR==FNR{a$5;next} $5 in a' <(zcat file2.txt) <(zcat file1.txt)
gzip -dc path/to/test/file.gz | grep -P 'my regex' | grep -vP 'other regex' | split -dl1000000 - file
gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -dl1000000 - file
gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -l1000000
gzip -d ${set1@} &
gzip -d file.gz
gzip -d --stdout file.gz | bash
gzip -dc /usr/src/redhat/SOURCES/source-one.tar.gz | tar -xvvf -
gzip -dc archive.tar.gz | tar -xf - -C /destination
gzip -dc libxml2-sources-2.7.7.tar.gz | tar xvf -
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort)
gzip -dc hello-0.2.tar.gz | tar -xf -
bzip2 -dc xac.bz2
bzip2 -d /tmp/itunes20140618.tbz
tr -d \n\r < yourfile.txt
COLUMN=`echo $1 | tr -d -`
rm -rf `find . -type d -name .svn`
ls -tr | head -n -5 | xargs rm
(ls -t|head -n X;ls)|sort|uniq -u|xargs rm
sudo find /home/user/Series/ -iname sample -exec rm {} \;
sudo find /home/user/Series/ -iname sample -print0 | sudo xargs -0 rm -r
grep -v pattern file > temp && mv temp file
sed -i.bak '/pattern to match/d' ./infile
sed -i '/pattern/d' filename
sed --in-place '/some string here/d' yourfile
echo ${depsAlastmodified$i} | tr -cd ':digit:' | od -c
ipcs -a | nawk -v u=`whoami` '$5==u &&(($1==m && $9==0)||($1==s)){print ipcrm -$1,$2,;}' | /bin/sh
ipcs | nawk -v u=`whoami` '/Shared/,/^$/{ if($6==0&&$3==u) print ipcrm shm,$2,;}/Semaphore/,/^$/{ if($3==u) print ipcrm sem,$2,;}' | /bin/sh
finger |  cut --complement -c36-40
finger |  sed 's/\(.\{35\}\)...../\1/'
crontab yourFile.text
sed -n s/^$//;t;p;
seq 10 | sed '0~2d'
printf 'foobar\n\377' | tr -d '\0-\176' | od -t c
history -d $1
grep -v '^2 ' file | cut -d' ' -f2- | nl -w1 -s' '
var=`hg st -R $path | tr -d '\n'`
finger | awk -F\t -v 'OFS=\t' '{ $4=; print $0}' | sed 's/\t\{2,\}/\t/'
for h in $(seq 1006 1008 | tac); do history -d $h; done
xargs -n 1 -I '{}' find $(pwd) -type f -inum '{}' -delete
tail -n +2 $FILE > $FILE.tmp && mv $FILE.tmp $FILE
sed '/start/,+4d'
ls -tr find /home/backups -name '*.gz' -o -name '*.tgz')|head -1|xargs rm -f
rmdir nonsense_dir
column -s: -t
who am i | awk '{print $5}' | sed 's/()//g' | cut -f1 -d . | sed 's/-/./g'
df /full/path | grep -q /full/path
lshw -class cpu|grep ^       width|uniq|awk '{print $2}'
who | grep $USER
who -m
ssh -x remoteServer cd yourRemoteDir; ./yourRemoteScript.sh </dev/null >/dev/null 2>&1 & 
set +e
set +m
set -f
set -o noclobber
shopt -u compat31
shopt -u dotglob
shopt -u nocasematch
shopt -u nullglob
echo $line | cut -c2- | md5sum
column -x -c 30 /tmp/file
cat infile | od -c
cat file.txt | perl -ne 's/foo/bar/g;' | less
echo 12345 | rev
echo 798|rev
last -i | grep $(whoami) | grep 'still logged in'
php -i | more
od -t x1 file|cut -c8-
od -c oldfile
ls -l | more
od -t fD file
od -t fD
cowsay hello | rev
od -a test.sh
fold -w1 filename | sort | uniq -c | sort -nr
objdump -x `which tail`
set | more
tree -P *foo
cat dax-weekly.csv | awk '{ai++=$0} END {for (j=i-1; j>=0;) print aj-- }'
cat /boot/System.map-`uname -r` | grep funcname
grep something file | more
set derby
ab=`ps -ef | grep -v grep | grep -wc processname`
yes | cat | more
yes | more
set | grep -A999 '^foobar ()' | grep -m1 -B999 '^}'
set | sed -n '/^foobar ()/,/^}/p'
echo `uname -a | awk '{print $2}'`
uname -srvm
cp --help
diff -y one.txt two.txt
diff /destination/dir/1 /destination/dir/2 -r -x *.xml
diff /destination/dir/1 /destination/dir/2 -r -X exclude.pats
diff -x '*.foo' -x '*.bar' -x '*.baz' /destination/dir/1 /destination/dir/2
diff -y /tmp/test1  /tmp/test2
diff /tmp/test1  /tmp/test2
diff -y a b
diff -Naur dir1/ dir2/
diff -r dir1 dir2
diff -r dir1/ dir2/
diff -ENwbur repos1/ repos2/
diff -y file1 file2
diff -a --suppress-common-lines -y a.txt b.txt
diff dir1.txt dir2.txt
diff <(ls /bin) <(ls /usr/bin)
diff <(./a) <(./b)
diff /tmp/ksh-{9725,9781}.log | grep ^\<
rev file.txt
set | grep ^_=
file file-name
which file | xargs file
cat -n file.txt | less
less -N file.txt
uname -i
uname -n
file ascii.txt
file utf8.txt
time find . -type f -exec stat {} + > /dev/null
yes 'c=(╱ ╲);printf ${cRANDOM%2}'|bash
yes 'printf \\u$2571+RANDOM%2'|bash
awk '{printf %s , $0} END {printf \n}' inputfile
awk '{printf %s , $0}' inputfile
awk '{printf %s|, $0} END {printf \n}' inputfile
awk 1 ORS=' ' file
uname -s -r -v
uname -r
tail -1000 file-with-line-too-long.txt | more
ls *.txt | tee /dev/tty txtlist.txt
uname -m
file -ib $file
file --mime myfile.txt
env | grep '^variable='
uname -r | cut -d. -f1-2
uname -r | sed 's/\(0-9\+\.0-9\+\)\..*/\1/'
sed 's/$/p/' file_of_line_numbers | sed -nf - source
file -bi myfile.txt
uname -o
tree -p -u -g -f
tree -p -u -g -f -i
dmidecode | more
df '/some/directory' | awk '{print $1, $6}'
column -s${tab} -t
cat | od -b
od -cAn;
du --summary --human-readable *
du -sh *
uname -a
man bash | less -Ip \\\'
cat YourFile.txt | more
more YourFile.txt
cat `which ~/f`
column -t file | uniq -w12 -c
cat myfile
zcat sample_0001.gz | sed -e 's/lk=1&//g'
cat text
fold -80 your_file | more
more /var/log/syslog
grep -v '^$\|^#\|^\s*\#' filename | grep -v ^:space:*$ | more
echo $a | awk '{print tolower($0)}'
tree -I '3rd*'
diff -y -W 150 file1.cf file2.cf
grep -E -m 1 -n 'old' file | sed 's/:.*$//' - | sed 's/$/s\/old\/new\//' - | sed -f - file
tree /
du -sb /data/sflow_log | cut -f1
$ file /bin/bash
od -t x1 -An /bin/ls | head
od -c foo |head -2
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub
ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
echo $foo | rev | cut -c1-3 | rev
echo $var | rev | cut -d: -f1 | rev
echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev
rev file.txt | cut -d/ -f1 | rev
basename /usr/local/svn/repos/example
rev file.txt | cut -d ' ' -f1 | rev
file -i filename
mount | grep ^$path | awk '{print $3}'
echo -e Test\rTesting\r\nTester\rTested | awk '{ print $0; }' | od -a
echo -e line1\r\nline2 | awk '{ print $0; }' | od -a
echo -e line1\r\nline2 | od -a
ls | column -c 80
du -a --max-depth=1 | sort -n
du -a -h --max-depth=1 | sort -hr
du -sb
finger | sed 's/\t/ /' | sed 's/pts\/0-9* *0-9*//' | awk '{print $2\t($1)\t$3 $4 $5}' | sort | uniq
finger | sed 's/^\(^ *\) *\(^ *\) *pts^A-Z*\(^(*\).*/\2\t(\1)\t\3/'
echo $var | awk '{gsub(/^ +| +$/,)}1'
mount -l
dpkg -S `which command`
w
brew --prefix
pstree -a
cal -3
cal -3 12 2120
yum info zsh
\w
ifconfig -a
brew info grc
watch wc -l <filename>
pstree -p `pgrep pppd`
pstree -p -s PID
ifconfig
sort | uniq -c
yum provides zsh
set +e
set +a
rsync -ave ssh 'Louis Theroux'''''''s LA Stories'
curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less
curl 'http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1' | iconv -f windows-1251 | tr -dc ':print:'
curl https://s3.amazonaws.com/sampletest/sample.tar.gz | gunzip | pax -r -s /old/new/
seq 1 10 | xargs -n1 -P2 bash -c 'i=$0; url=http://example.com/?page${i}.html; curl -O -s $url'
seq 10000 | parallel -j100 wget https://www.example.com/page{}.html
od -t x1 -t a /dev/ttySomething
od -tx2 FILENAME
printf a\0b | od -tx1
od -t c file
od -xc filename
od -xcb input_file_name | less
pg_dump -U myUser myDB | gzip > myDB.sql.gz
od -xcb testscript.sh
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost “mysql -uUSER -pPASS NEW_DB_NAME”
mysqldump --all-databases | ssh user@yourserver.com mysql
echo 'hi' | od -c
echo `echo Ho ho ho` | od -c
cp -rs /mnt/usr/lib /usr/
tmux attach -t $(echo stuff)
sudo rsync -pgodt /home/ /newhome/
rsync --exclude='B/' --exclude='C/' . anotherhost:/path/to/target/directory
ping -n 1 %ip% | find TTL
sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`
set -x
crontab -e
sudo crontab -u wwwrun -e
tac temp.txt | sort -k2,2 -r -u
mail -s Alert: SSH Access from `who | cut -d'(' -f2 | cut -d')' -f1` -a tmpfile user@example.com
set -o history -o histexpand
set -H
set -o history
shopt -s dotglob
shopt -s globstar
shopt -s nullglob
shopt -s autocd
shopt -s cdable_vars
shopt -s cmdhist
shopt -s compat31
shopt -s direxpand
shopt -s expand_aliases
shopt -s failglob
shopt -s histappend
shopt -s lastpipe
shopt -s lithist
shopt -s nocaseglob
shopt -s nocasematch
shopt -s execfail
shopt -s progcomp
shopt -s promptvars
shopt -s expand_aliases extglob xpg_echo
shopt -s extglob progcomp
shopt -s nullglob dotglob
touch -a UEDP0{1..5}_20120821.csv
echo * * * * * script | crontab -
`sudo chown -R mongodb:mongodb /data/*`
ls -l $FILENAME | grep -q ^l && SOURCE_DIR=$(ls -l $FILENAME | awk '{print $NF}');
pushd
DATA=$( find ${1} -type f -exec ${MD5} {} ';' | sort -n )
watch -n 3 -d ./my_script.sh
ssh user@target cd /some/directory; nohup myprogram > /dev/null 2>&1
ssh -n -f user@host sh -c 'cd /whereever; nohup ./whatever > /dev/null 2>&1 &'
exec 1 | tee ${LOG_FILE}
exec 1 2>&1 | tee ${LOG_FILE}
exec 2 | tee ${LOG_FILE}
zcat file.gz | awk -F, '$1 ~ /F$/'
watch -n 1 --color --exec bash -c 'python -m unittest discover |& pyrg'
watch bash -c your_script
watch -n10 cat /tmp/iostat.running
ssh $USER@$SERVER cd ${REMOTE_PATH}; mkdir -p $i < /dev/null
ssh user@target cd /some/directory; nohup myprogram > foo.out 2> foo.err < /dev/null
ssh askapache 'nohup sh -c ( ( chown -R ask:ask /www/askapache.com &>/dev/null ) & )'
ssh askapache 'sh -c ( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )'
ssh askapache 'nice -n 19 sh -c ( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )'
watch -n 1 date
watch -n1 dropbox-cli status
watch -n 300 du -s path
watch elinks -dump file.html
source <(./generate_commands)
watch -n 60 killall -USR1 dd
watch ls -l data.temp
watch -n 0.5 ls -l
watch 'ls -l'
watch ls -l
watch -d ls -l
ssh root@something 'ls -l'
watch ls
watch -n 1 ls
watch --interval=10 lynx -dump http://dslrouter/stats.html
echo `hostname -i` file.txt | xargs myscript.rb
myscript.rb `hostname -i` file.txt
watch -n 1  mysqladmin -u root -pXXXXX processlist | grep tablename  | tee -a /root/plist.log
watch -n 1 ps -C java -o pcpu,state,cputime,etimes
watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep BINARY-NAME\`
watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\`
watch -n 1 'ps aux | grep php'
awk -f script.awk file{,} | column -t
ssh REMOTE sh -c \(nohup sleep 30; touch nohup-exit) > /dev/null &\
ssh -t genja.org 'ssh raptor.lan hostname\; uptime'
watch tail file | grep pattern
watch -n 5 wget -qO-  http://fake.link/file.txt | tail
watch -n 5 wget -qO-  http://fake.link/file.txt
watch -n1200 xbacklight -set 0% && sleep 20 && xbacklight -set 100%
watch -n 300 -t '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i (jpg|bmp|png|gif)$`'
watch -n 1 --color 'bash -c python -m unittest discover |& pyrg'
watch 'echo -e \03331mHello World\0330m'
watch 'echo -e \tHello World'
watch -n 1 --color 'python -m unittest discover 2>&1 | pyrg'
watch -n 5 -c 'tail -f -n 50 mylogfile.txt | ccze'
watch -d 'top -n1 | grep mysql'
watch --color 'tput setaf 1; echo foo'
/usr/bin/find $*
/usr/bin/find ./ $*
watch -n 300 -t `find -type f | egrep -i (jpg|bmp|png|gif)$`
$@ | tee $FILE
ssh user@remote 'bash -s' < /path/to/commands-inc.sh
cat commands-to-execute-remotely.sh | ssh blah_server
zcat FILE | awk '{ ...}'
awk -f script.awk File2 File1 | rev | column -t | rev
awk -f `which script.awk` arg1
awk -f script.awk file.txt{,} | column -t
ssh $USER@$SERVER $cmd_str
seq 0 20 | xargs -n1 tssh MYBOXES
source $file
exec /usr/bin/find $@
LD_PRELOAD=./linebufferedstdout.so python test.py | tee -a test.out
timeout 5 ssh user@ip
`which parallel` $@
source $(ruby genrc.rb)
true | cd /
true | echo $ret
true | sleep 10
true | xargs false
tmux send-keys -t cf 'cd ~/server' C-m
tmux $tmux_command \; attach
set -e
set -o errexit
set -o errexit -o nounset -o noclobber -o pipefail
set -e
set -o errexit
logout
exit -1
exit
exit 1
exit N
mv ${myargs@}
pushd /home/`whoami`/Pictures
export git=$(which git)
export JAVA_HOME=$(readlink -f /usr/bin/javac | sed s:/bin/javac::)
export JAVA_HOME=$(readlink -f $(dirname $(readlink -f $(which java) ))/../)
export JAVA_HOME=$(readlink -ze /usr/bin/javac | xargs -0 dirname -z | xargs -0 dirname)
export PS1='$(whoami)@$(hostname):'
set `od -j $o -N 8 -t u1 $pkg`
set `od -j $o -N 8 -t u1 $rpm`
cat myfiles_split.tgz_* | tar xz
echo http://www.suepearson.co.uk/product/174/71/3816/ | cut -d'/' -f1-3
comm -3 <(sort -un f1) <(sort -un f2)
comm -3 <(sort file1) <(sort file2)
comm -23 <(sort file1.txt) <(grep -o '^^;*' file2.txt | sort)
comm -23 <(sort fileA) <(cut -d' ' -f1 fileB | sort -u)
comm -23 <(sort set1) <(sort set2)
cat B C D | sort | comm -2 -3 A -
paste -d: <(grep '<th>' mycode.html | sed -e 's,</*th>,,g') <(grep '<td>' mycode.html | sed -e 's,</*td>,,g')
cat archive.tar | tar x
echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2
echo $url | cut -d'/' -f3
number=$(echo $filename | awk -F _ '{ print $2 }')
echo $url | cut -d'/' -f4-
echo $url | cut -d'/' -f1-3
echo $url | cut -d':' -f1
rpm2cpio foo.rpm | xzcat | cpio -idmv
rpm2cpio libstdc++-4.9.2-1.fc21.x86_64.rpm |cpio -idmv
rpm2cpio packagename | cpio -ivd
tar xvf $myarchive && cd ${myarchive%.tar.gz}
zcat Input.txt.gz | cut -d , -f 1 | sort | uniq -c
rpm2cpio php-5.1.4-1.esp1.x86_64.rpm | cpio -idmv
echo 'test/90_2a5/Windows' | xargs dirname | xargs basename
echo bla@some.com;john@home.com | awk -F';' '{print $1,$2}'
cut -d: -f1 /etc/group | sort
head -16482 in.sql | tail -258 > out.sql
bunzip2 file.bz2
bzip2 -dc archive.tbz | tar xvf - filename
dig stackoverflow.com | grep -e ^^; | tr -s  \t   | cut -d  -f5
source <(wget -q -O - http://www.modulesgarden.com/manage/dl.php?type=d&id=676)
source <(curl -s http://mywebsite.com/myscript.txt)
brew update
cat files.txt | xargs scp user@remote:
awk '{s+=$1} END {printf %.0f, s}' mydatafile
awk '{s+=$1} END {print s}' mydatafile
kill -9 `cat save_pid.txt`
grep 'Nov 12 2012' /path/to/logfile | less
awk -f script.awk file
echo -e $(TZ=GMT+30 date +%Y-%m-%d)\n$(TZ=GMT+20 date +%Y-%m-%d) | grep -v $(date +%Y-%m-%d) | tail -1
sed -f commandfile file
crontab -u user -l | sed $my_wonderful_sed_script | crontab -u user -
ls -l | grep ^d | awk -F  '{print $9}'
ls -l --color=always $@ | egrep --color=never '^d|^:digit:+ d'
ls -l --color=always $@ | grep --color=never '^d'
ls -l | grep ^d
ls -Al | grep ^d | awk -F  '{print $9}'
egrep -v '^\s*#' /etc/launchd.conf | launchctl
crontab -u $user -l 2>/dev/null | grep -v '^#'
cd /var/cron/tabs && grep -vH ^# *
echo $USERTAB| grep -vE '^#|^$|no crontab for|cannot use this program'
tac a.csv | sort -u -t, -r -k1,1 |tac
tree -if | grep \\.ch\\b | xargs -n 1 grep -nH #include
tree -if | grep \\.ch\\b | xargs -n 1 grep -H #include
cd `find . -name file.xml -exec dirname {} \;`
cd `find . -name file.xml -printf %h`
md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1
diff -rqx *.a -x *.o -x *.d ./PATH1 ./PATH2 | grep \.cpp  | grep ^Files
du -hsx * | sort -rh | head -10
dig +short -x 173.194.33.71
du -s --block-size=M /path/to/your/directory/
du -h your_directory
readlink -f `ls --dereference /proc/$pid/exe`
cd $(dirname find . -name $1 | sed 1q))
cd find . -name $1 | xargs dirname)
cat find . -name '*.foo')
cat `find . -name '*.foo' -print`
for file in find asia emea -name \*.gz -print0 | xargs -0); do echo -n $(basename $file); gunzip -c $file |wc -l; done >> file_count.txt
eval `find -type f -name *.htm |awk -F/ '{print cp  $0   $2 - $3 - $4 - substr($5,5) ; }'`
sudo find / -iname '*.ogg'
chmod 640 find . -name *.php)
python hello.py `find . -name *.txt`
for i in `find . | grep .xml.bz2$`; do find_graph -build_graph $i.graph $i; done
mv find find . -name *shp* -printf %h\n | uniq) -type f) ../shp_all/
mv find . -name *shp* -printf %h\n | uniq)/* ../shp_all/
cd find . -name Subscription.java -printf '%h\n')
cd find . -name Subscription.java | xargs dirname)
cd `find . -name Subscription.java | xargs dirname`
echo $queue | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 -type d
sudo find / -type d -name postgis-2.0.0
diff <(find . -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) <(find . -name main.cpp  -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) | sed -n 's/< \(.*\)/\1/p'
sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755
chmod 755 find /path/to/base/dir -type d)
sudo find /var/www -type d -print0 | xargs -0 chmod 755
sudo find /var/www/some/subset -type d -print0 | xargs -0 chmod g+s
sudo find foldername -type d -exec chmod 755 {} ;
full_backup_dir=find . -depth '(' -wholename './.*' ')' -prune -o -print)
full_backup_dir=find . -depth \( -wholename \./\.\* \) -prune -o -print | cpio -oav)
file_changed=find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print | cpio -oav)
full_backup_dir=find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print)
ls -ltr | grep 'Mar 4' | awk '{print 9}' | xargs zcat -fq | grep 12345
cat `find . -name aaa.txt`
locate labra | xargs -I{} scp '{}' masi@11.11.11.11:~/Desktop/
sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644
chmod 644 find /path/to/base/dir -type f)
sudo find /var/www -type f -print0 | xargs -0 chmod 644
LC_ALL=C find . -regextype posix-egrep -regex '^.*/a-z^/*$' -type f
sort < <(find -printf %T@ %p\n)
sudo find foldername -type f -exec chmod 644 {} ;
comm -12 <(find . -maxdepth 1 | sed -e 's/^.\///' ) <(cat 1)
(cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort > b)
echo $queue | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 $*
sudo find / -name orm.properties
IFS=$'\n';for f in `find .`; do file=$(echo $f | tr :blank: '_');  -e $f  &&  ! -e $file  && mv $f $file;done;unset IFS
cd ${CURR_DIR} && find .
ssh someone@somehost cd /export/home/someone && find . -name '*' -print | parallel -j1 'sleep 10;curl -u someone:password ftp://somehost/tmp/ -vT'
ssh someone@somehost cd /export/home/someone && find . -name '*' -print| xargs -n1 curl -u someone:password ftp://somehost/tmp/ -vT
ssh someone@somehost 'cd /export/home/someone && find . -name * -print| (while read file; do curl -u someone:password ftp://somehost/tmp/ -vT $file; sleep 10; done)'
grep ! error_log | find /home/foo/public_html/ -mmin -60
~/bin/find /non-existent/directory -name '*.plist' -print
sudo find /var/www/some/subset -print0 | xargs -0 chown www-data:www-data
full_backup_dir=`find . -depth -print0`
while read line ; do cp $line ~/bar ; done < <(find . | grep foo)
for i in `find .  -not \( -name *\.jpg \) -path './bookshop/mediaimg' -prune -o -path '*/CVS*' -prune -o  -path './files' -prune  -o -path './images/cms' -prune -o -path './internal' -prune -o -path './limesurvey171plus_build5638' -prune  -o -path './gallery2' -prune -o  -print  `; do cvs status  $i |grep Status ; done &>~/output.txt
du -a $directory | awk '{print $2}' | grep '\.in$'
{ find . -name '*my key phrase*'; grep -rl 'my key phrase' *; } | sed s/^\.\/// | sort -u
{ find . -name '*my key phrase*'; grep -rl 'my key phrase' .; } | sort -u
sort file | uniq | cut -f1 -d' ' | uniq -c | rev
grep  $USER file |nl
FILES=find $FILES_PATH -type f -name *)
sed -i '' -e 's/subdomainA/subdomainB/g' find /home/www/ -type f)
cd /home/www && find . -type f -print0 | xargs -0 perl -i.bak -pe 's/subdomainA\.example\.com/subdomainB.example.com/g'
cat $FILE | grep ^${KEY}${DELIMITER} | cut -f2- -d$DELIMITER
sudo find . -name test1.h
sudo find . -name test2.h
for d in /home/*/; do find $d -type d -name bin | grep -q . || echo $d; done
comm -3 <(printf '%s\n' */ | sed 's|/.*||' | sort) <(find */ -type d -name bin | cut -d/ -f1 | uniq)
for i in `find . | grep .xml$`; do bzip2 $i&; done
for i in `find . | grep .xml$`; do bzip2 $i; done
rm `du * | awk '$1 == 0 {print $2}'`
kill $(ps aux | grep 'python csp_build.py' | awk '{print $2}')
echo find . -atime +7 -o -size +`expr 10 \* 1024 \* 2` -print
du -hs /path/to/directory
du -a
du --max-depth=0 ./directory
du -s <file>
du -b FILE
echo find / -type f -perm -002) has world write permissions
sudo find -name *!0-91-9.txt -exec chmod 744 '*' {} \; -a -exec ls -l {} \; | sort | parallel ls -l
diff --suppress-common-lines --speed-large-files -y File1 File2 | wc -l
ps aux | grep 'terminal'
cat /var/run/dmesg.boot | grep Features
awk -F, 'NR==1 {gsub(//,,$3);print $3}' $(dirname $(readlink -f $(which erl)))/../releases/RELEASES
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n)
/usr/bin/find $DIR -maxdepth 1 -ipath $TMP_DIR -print -quit
ps -A|grep mysql
ps aux | grep mysql | grep -v grep
who | cut -d ' ' -f 1 | grep -e '^ab' -e '1$'
who | grep -e '^ab' -e '1$'
echo $b|grep -q $a
ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'
ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F ':' '{print $2}'
netstat -rn | gawk '/UG/ {print $NF}' | xargs ifconfig | gawk 'match($0,/inet addr:(.*) B/,a) {print a1}'
ifconfig | grep 192.168.111 | awk '{print $2}'
ifconfig | grep -v '127.0.0.1' | sed -n 's/.*inet addr:\(0-9.\+\)\s.*/\1/p'
ifconfig | sed -n 's/.*inet addr:\(0-9.\+\)\s.*/\1/p'
ps -A -o pid | xargs -I pid readlink /proc/pid/exe | xargs -I file dirname file
pgrep -u w | grep ssh| awk '{print $1}' ssh
dirname `find / -name ssh | grep bin`
w | awk '{print $1}'
pstree | grep php
x=$(grep $(dirname $path) file)
w | sed '1,2d' | cut -f1 -d' ' | sort | uniq -c
w | grep ssh
ps aux | awk '{print $11}' | grep -x -e /.* | xargs -I file dirname file
ps aux | awk '{print $11}' | grep -x -e /.* | xargs dirname
ps aux | awk '{print $11}' | grep -x -e /.* | xargs dirname | head
cd find . -name Subscription.java | xargs dirname)
cd `find . -name Subscription.java | xargs dirname`
diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq
directories=$(diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq)
yum list | grep subversion
env | grep DUALCASE
grep -r string to be searched  /path/to/dir
month=$(cal | head -1 | grep -oP A-Za-z+)
brew outdated | wc -l
match=$(echo ${line} | egrep -o 'run-parts (-{1,2}\S+ )*\S+')
groups
groups user
{ time sleep 1; } 2>&1 | grep real
grep --help |grep recursive
grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e pattern
grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e pattern
grep -rnw '/path/' -e 'pattern'
grep --exclude=*.o -rnw '/path/to/somewhere/' -e pattern
grep -Ril text-to-find-here /
shopt -p | grep checkjobs
shopt | grep login
set | grep ^IFS=
grep -R texthere *
set | grep ^fields=\\\|^var=
grep -e TEXT *.log | cut -d' ' --complement -s -f1
echo $f | grep -Eo '0-9+.+0-9+.?0-9?' | cut -d. -f1
echo $f | grep -Eo '0-9+.+0-9+.?0-9?' | cut -d. -f3
echo $f | grep -Eo '0-9+.+0-9+.?0-9?' | cut -d. -f2
grep -r -l foo .
grep -r searched-string .
TMPDIR=`dirname $(mktemp -u -t tmp.XXXXXXXXXX)`
dirname $(mktemp -u -t tmp.XXXXXXXXXX)
( find ./ -name '*.php' -print0 | xargs -0 cat ) | wc -l
( find . \( -name '*.h' -o -name '*.cpp' \) -print0 | xargs -0 cat ) | wc -l
USERS=$(w | awk '/\/X/ {print $1}')
USERS=$(awk '/\/X/ {print $1}' <(w))
readlink -f $(which lshw)
$(dirname $(readlink -f $BASH_SOURCE))
getent passwd | cut -d: -f1 | perl -e'while(<>){chomp;$l = `crontab -u $_ -l 2>/dev/null`;print $_\n$l\n if $l}'
basename -a ${alpha@}
awk '{print result =,$0}' <(rev file)
rev file | awk '{print result =,$0}'
join -11 -21 -o1.1,1.2,1.3,2.3 file1 file2
sed 's/$/ FAIL/' fail.txt | join -a 1 -e PASS -j 1 -o 1.1,2.2 list.txt -
join -j 1 -t : -o 2.1,2.2,2.4,1.3 <(sort empsal) <(sort empname)
join -v1 <(sort file1) <(sort file2)
join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)
join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt
join -j1 -o 2.1,2.2,1.2,1.3  <(sort test.1) <(sort test.2)
join -j1 file2 file1
$ join -j 2 -o 1.1 1.2 2.1 <(sort 1) <(sort -k2 2)
join -j 2  -o 1.1 1.2 2.1 <(sort -k2 1) <(sort -k2 2)
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +) ^ +/\1 7/' | crontab -
sudo ln -f findpdftext /usr/local/bin
ln -f secret_file.txt non_secret_file.txt
ln -f '/home/user/Musik/mix-2012-13/aesthesys~ I Am Free, That Is Why I'''m Lost..mp3' '/home/user/Musik/youtube converted/aesthesys~ I Am Free, That Is Why I'''m Lost..mp3'
sudo ln -s -f /usr/local/bin/findpdftext /usr/local/bin/fpdf
sudo ln -s -f /usr/local/bin/findpdftext /usr/local/bin/fpt
ln -sfn /other/dir new_dir
ln -sfn source_file_or_directory_name softlink_name
sudo ln -sTfv $default_java_dir /usr/lib/jvm/default-java
sudo ln -f -s $javaUsrLib/jdk1*/bin/* /usr/bin/
ln -sf $(readlink -f $1) $*
ln -sfn $c $lines
sudo ln --symbolic --verbose --force $pluginpath $pdir
ln -sfn newDir currentDir
ln -sf $keyname     id_rsa
ln -f -s /apps/myapps/new/link/target mylink
ln -sf $f ~/my-existing-links/$(basename $f)
ln -nsf $lastModified $SYMLINK_PATH
ln -nsf alpha_2 alpha
ln -nsf dir2 mylink
gzip -d --force * /etc
ssh -t somehost ~/bashplay/f
ssh -t remotehost sudo <cmd>
rm -rf $(pwd -P)/*
ssh -tt foo ./script.py
rm -rf *~important-file
ln --force --target-directory=~/staging ~/mirror/*
ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' '/cygdrive/c/Users/Mic/mypics'
rm --force ${temp}
rm -f *.bak *~
rm -f /tmp/stored_exception /tmp/stored_exception_line /tmp/stored_exception_source
echo $line | column -t
cat file.txt | column -c 28 -s \ 
( awk 'NR % 2' input; awk 'NR % 2 == 0' input ) | paste - - - | column -s'   ' -t
date --date @120024000
echo  ${arr@/%/$'\n'} | column
echo  ${arr@/%/$'\n'} | sed 's/^ //' | column
paste -d  - - < file | column -t
awk '{for(i=3;i<=NF;i++){print $1,$2,$i}}' file | column -t
fold -s $2 | mailx -s $SUBJECT -b abc@abc.com $EMAIL -r $MAILBCC
column -t -s $'\n' list-of-entries.txt
column -t -s '' list-of-entries.txt
mount | column -t
cat file | column -c 80
column -t -s' ' filename
column -t -s $'\t' list-of-entries.txt
column -t -s $'\t' FILE
...| awk '{print $5\t\t $3\t$4}'|column -t
cat file | column -t
column -t file
date -ud @1267619929
stat -c 'File: %n Modified: %y' t* | column -t
stat -f 'File: %N Modified: %t%Sm' t* |column -t
... | column -s$'\t' -t
printf ... | fold -w 80
ruby-script.rb | column -s $'\t' -t
CDATE=$( date -d @$timestamp +%Y-%m-%d %H:%M:%S )
VARIABLENAME=$(date -d @133986838)
date -d @$TIMESTAMP
date -d @1267619929
ssh -f user@gateway -L 3307:1.2.3.4:3306 -N
ssh -f mysql_access_server -L 3309:sqlmaster.example.com:3306 -N
ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost
ssh -N -i <(echo privatekeystuffdis88s8dsf8h8hsd8fh8d) -R 16186:localhost:8888 hello.com
ssh -f user@gateway -p 24222 -L 3307:1.2.3.4:3306 -N
ssh -L localhost:8000:clusternode:22 user@bridge
basename -- $0
basename $0
kill -20 $PID; kill -18 $PID
grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n
pass=$(LC_CTYPE=C < /dev/urandom tr -cd :graph: | tr -d '\n' | fold -w 32 | head -n 1)
echo -e {{a..n},ñ,{o..z}}\n | nl
echo -e {{a..c},ch,{d..l},ll,{m,n},ñ,{o..z}}\n | nl
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') \ <(tac)
MAPPER=$(mktemp -up /dev/mapper)
fn=$(mktemp -u -t 'XXXXXX')
tFile=$(mktemp --tmpdir=/dev/shm)
fifo_name=$(mktemp -u -t fifo.XXXXXX)
dig $domain
dig -t A $domain
who am i --ips|awk '{print $5}' #ubuntu 14
ps -p 24297 -o comm --no-heading
basename $(pwd)
pwd | awk -F / '{print $NF}'
host $(uname -n) | grep IPv6 address | head -n 1 | awk '{print $5}'
host $(uname -n) | grep address | grep -v IPv6 | head -n 1 | awk '{print $4}'
header=$(curl -sI $1 | tr -d '\r')
dig +short $domain
$dig -x 8.8.8.8 | grep  PTR | grep -o google.*
reverse=$(dig -x $ip +short)
dig -x $1 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5
dig -x $IP | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5
dig -x 8.8.8.8| awk '/PTR:space:/ && /google/ {print $NF}'
cat 1.txt | xargs dig TXT
grep ^Q File1.txt | cut -d= -f2- | sort | comm -23 - <(sort File2.txt)
echo $data | cut -f2 -d$'\n'
pstree $(pgrep CID$client_id) -ap | sed -n 's/.*rsync,\(0-9*\).*/\1/p'
which find
echo $path | rev | cut -d/ -f1 | rev
ps -fp <pid>
ps -p $$ | awk '$1 == PP {print $4}' PP=$$
ps | grep `echo $$` | awk '{ print $4 }'
ps -ef | grep apache
lshw -class cpu|grep ^       width|uniq|awk '{print $2}'
top -l 1 -s 0 -i 1 -stats vprvt -pid PID
top -l 1 -s 0 -stats mem -pid PID
top -l 1 -s 0 -stats vprvt -pid 8631
NET_IP=`ifconfig ${NET_IF} | grep -Eo 'inet (addr:)?(0-9*\.){3}0-9*' | grep -Eo '(0-9*\.){3}0-9*' | grep -v '127.0.0.1'`
ifconfig en0 | awk '$1 == inet {print $2}'
ifconfig en0 | awk '/inet addr/{print substr($2,6)}'
ip addr show en0 | awk '$1 == inet {gsub(/\/.*$/, , $2); print $2}'
ifconfig en0 | awk '/inet addr/ {gsub(addr:, , $2); print $2}'
ifconfig en1 | awk '{ print $2}' | grep -E -o (0-9{1,3}\.){3}0-9{1,3}
ifconfig en1 | sed -n '/inet addr/s/.*addr.\(^ *\) .*/\1/p'
my_ip=$(ifconfig en1 | grep 'inet addr' | awk '{print $2}' | cut -d: -f 2)
ifconfig eth0 | awk '/inet /{sub(/^0-9*/,); print $1}'
ifconfig eth0 | awk '/inet addr/{sub(addr:,); print $2}'
ifconfig eth0 | awk '/inet addr/{sub(/^0-9*/,); print $1}'
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}'
ifconfig eth0 | grep -oP '(?<= inet addr:)^ +'
ifconfig eth0 | grep inet | cut -d: -f2 | cut -d' ' -f1
/sbin/ifconfig $(netstat -nr | tail -1 | awk '{print $NF}') | awk -F: '/inet /{print $2}' | cut -f1 -d ' '
ifconfig eth0 | grep addr: | awk '{ print $2 }' | cut -d: -f2
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -1
ifconfig | grep 'inet addr:' | grep -v 127.0.0.1 | head -n1 | cut -f2 -d: | cut -f1 -d ' '
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
ifconfig | grep -A2 venet0:0\|eth0 | grep 'inet addr:' | sed -r 's/.*inet addr:(^ +).*/\1/' | head -1
ifconfig $(netstat -rn | grep -E ^default|^0.0.0.0 | head -1 | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | grep -Eo '(0-9*\.){3}0-9*'
ifconfig `ip route | grep default | head -1 | sed 's/\(.*dev \)\(a-z0-9*\)\(.*\)/\2/g'` | grep -oE \b(0-9{1,3}\.){3}0-9{1,3}\b | head -1
ip=$(ifconfig | grep -oP (?<=inet addr:).*?(?=Bcast))
ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_, );print _1}'
ifconfig | grep 'inet' | grep -v '127.0.0.1' | awk '{print $2}' | sed 's/addr://'
ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'
ifconfig | grep -oP (?<=inet addr:).*?(?=  Bcast)
ifconfig | grep -oP (?<=inet addr:).*?(?=Bcast)
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
ifconfig | grep ad.*Bc | cut -d: -f2 | awk '{ print $1}'
ifconfig eth0 | grep -Eo ..\(\:..\){5}
ifconfig eth0 | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
ifconfig eth0 | head -n1 | tr -s ' ' | cut -d' ' -f5
x=$(ifconfig eth0) && x=${x#*HWaddr } && echo ${x%% *}
ifconfig en0 | grep -Eo ..\(\:..\){5}
ifconfig en0 | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
ifconfig eth0 | awk '/HWaddr/ {print $5}'
ifconfig eth0 | grep -Eoi :0-9A-F:{2}\(\::0-9A-F:{2}\){5}
ifconfig eth0 | grep HWaddr | cut -d ' ' -f 9
ifconfig | grep -i hwaddr | cut -d ' ' -f9
ifconfig p2p0 | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
ifconfig -a | awk '/^a-z/ { iface=$1; mac=$NF; next } /inet addr:/ { print mac }' | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
ifconfig | awk '$0 ~ /HWaddr/ { print $5 }'
fg
fg 1
ifconfig | grep inet addr: | grep -v 127.0.0.1 | grep -Eo '0-9{1,3}\.0-9{1,3}\.0-9{1,3}\.0-9{1,3}'  | head -1
apropos -r '^std' | vi -
fg 2
go=$(dig -x 8.8.8.8| awk '/PTR:space:/{print $NF}')
$dig -x 8.8.8.8 | grep  PTR | grep -o google.*
dig -x 8.8.8.8 | awk '/PTR:space:/{print $NF}'
dig -x 8.8.8.8 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5
/sbin/ifconfig  | sed -ne $'/127.0.0.1/ ! { s/^ \t*inet \t\\{1,99\\}\\(addr:\\)\\{0,1\\}\\(0-9.*\\) \t\/.*$/\\2/p; }'
ifconfig | awk -F :+ '/inet addr/ && !/127.0/ {print $4}'
ifconfig | grep -Eo 'inet (addr:)?(0-9*\.){3}0-9*' | grep -Eo '(0-9*\.){3}0-9*' | grep -v '127.0.0.1'
ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?((0-9*\.){3}0-9*).*/\2/p'
git diff --name-only | xargs dirname | uniq
rest_cmd=$(shopt -p dotglob)
ifconfig en0 | grep inet | grep -v inet6
ifconfig eth0 | grep HWaddr
ifconfig eth0 | grep HWaddr
groups a b c d
groups $USERNAME | cut -d\  -f 1
tmux set -g history-limit 10000
tmux set-option -g history-limit 10000
cd -
cd $(xsel)
cd `xsel`
cd $(ls -d */ | grep 1670)
cd `find . -maxdepth 1 -type d | grep 1670`
cd `ls -d */ | grep 1670`
cd /the/project/root//data
cd /tmp
cd /cygdrive/c/Program\ Files\ \(x86\)
cd /cygdrive/c/Program Files (x86)
cd '/cygdrive/c/Program Files (x86)/$dollarsign'
cd /some/where/long
cd ~
cd `echo -n ~`
cd ${dirs-1}
cd $(echo $somedir | sed s#^~#$HOME#)
cd $(dirname $(which ls))
cd $(which oracle | xargs dirname)
cd $(ls -rd 0-9*/ | tail --lines 1)
cd -
cd $(git rev-parse --show-cdup)
source <(grep = file.ini | sed 's/ *= */=/g')
curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less
echo $(basename /foo/bar/stuff)
echo `basename $filename`
VAR=`dig axfr @dc1.localdomain.com localdomain.com | grep -i Lawler | awk '{ getline ; $1=substr($1,1,length($1)-1); print $1 ; exit }'`
dig $domain | grep $domain | grep -v ';' | awk '{ print $5 }'
yes n | gunzip file*.gz
shopt $NGV nullglob
ssh-keygen -Hf ~/.ssh/known_hosts
cal -h | sed s/ $(date +%d) /$'\033\94m&\033\0m/g; 's/ $(date +%d)$/$'\033\94m&\033\0m/g'
cal -h | sed s/$(date +%d)/$'\033\94m&\033\0m/g'
cal -h | sed s/\<$(date +%d)\>/$'\033\94m&\033\0m/g'
( cd ~/mydir && mycommand )
echo $4/0 || exit $?
make || exit $?
echo $c | crontab
tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq
set -e
ps -o pid= --ppid $PPID | xargs kill -9
lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
kill -9 $(lsof -i:3000 -t)
ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9
ps -ef | grep myProcessName | grep -v grep | awk '{print $2}' | xargs kill -9
ls -Art *.sql.gz |tail -n 1 |xargs gunzip -c | mysql --user=user --password=password database
export user=`env|grep -i SSH_CLIENT|cut -d' ' -f1|cut -d'.' -f4`
source $DIR/incl.sh
cat file-of-ips | xargs -n 1 -I ^ -P 50 ping ^
yes 0 | sed '1~2s/0/1/'
yes no
yes 1 | nl | tee /tmp/to
seq 1 10 | sed $': loop; n; n; a insert\nn; b loop'
fold -w30 longline | pr -20ts'|'
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'
sed -i 15i `hostname` test.html
tac file | awk '/ScriptAlias/ && ! seen {print new line; seen=1} {print}' | tac
yum -y install mono-devel
yum install packagename
yum --disablerepo=sublime2 install firefox
yum install firefox
sudo yum install glibc
yum --enablerepo=remi install php-mbstring
yum --enablerepo=remi php-mssql
cat /home/pkglist.txt | xargs yum -y install
yum install --exclude='*glob*' *.rpm
brew install git bash-completion
yum install ffmpeg-2.6.4-1.fc22.x86_64.rpm
yum --nogpgcheck localinstall packagename.arch.rpm
yum install -y devtoolset-3
yum install -y nodejs
yum install mysql
yum -y groupinstall Development Tools
yum -y groupinstall MYSQL Database Client
yum install mysql mysql-server
kill -9 \`pgrep myprocess\`
ln --symbolic --interactive $SCRIPT_DIR/$FILE
grep -R 'word' *.properties | more
ps aux | less -S
ls --color | less -r
source <(grep -v mesg /etc/bashrc)
grep = myfile | source /dev/stdin
FOO_NO_WHITESPACE=$(echo -e ${FOO} | tr -d ':space:')
set -o allexport; source conf-file; set +o allexport
source <( grep marker config.sh )
ssh -v -Y phil@192.168.0.14 -p 222
ssh -Y $ssh_user@$ssh_server
cut -d, -f1 file | uniq | xargs -I{} grep -m 1 {} file
join -t':' <(sort LN.txt) <(sort PH.txt) | join -t':'  - <(sort AD.txt)
awk 'NR==FNR{m$1=$2 $3; next} {print $0, m$1}' file2 file1 | column -t
join file1 file2 | column -t
join -t, -a1 -a2 <(sort file1) <(sort file2)
join -t, <(sort test.1) <(sort test.2) | join -t, - <(sort test.3) | join -t, - <(sort test.4)
join -t, test.1 test.2 | join -t, - test.3 | join -t, - test.4
join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2)
join -1 2 -2 1 -a1 <(cat -n file1.txt | sort -k2,2) <(sort file2.txt) | sort -k2 | cut --complement -d  -f2
join <(sort -n A) <(sort -n B)
join <(sort aa) <(sort bb)
join <(sort aa) <(sort bb) | sort -k1,1n
paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)
join -o 1.2,1.3,2.4,2.5,1.4 <(cat -n file1) <(cat -n file2)
echo abc-def-ghi-jkl | rev | cut -d- -f-2 | rev
echo $path | rev | cut -d'/' -f-3 | rev
echo 0a.00.1 usb controller some text device 4dc9 | rev | cut -b1-4 | rev
screen -X -S SCREENID kill
killall -u $(whoami) dropbox
ps -ef | grep myProcessName | grep -v grep | awk '{print $2}' | xargs kill -9
jobs -p | xargs kill -9
ps aux | grep 'python csp_build.py' | head -1 | tr -s ' ' | cut -d   -f2 | xargs kill
lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
screen -S 23536 -X quit
kill `pstree -p 24901 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n  `
nl -n ln log.txt | sed ...
csvtopretty filename.csv | less -S
fold -80 your_file | more
grep -o '1.' yourfile | head -n2
md5sum *.java | sort | uniq -d -w32
md5sum *.java | sort | uniq -d
ps -o pid --no-headers --ppid $PARENT_PID
ls -1 | xargs readlink -f
md5sum *.txt | sort | perl -ne '($y,$f)=split; print $f\n unless $y eq $x; $x=$y'
ls -l find /etc -name *.txt )
more /etc/hosts | grep ':space:*'`hostname`':space:*' | awk '{print $1}'
more /etc/hosts | grep `hostname` | awk '{print $1}'
crontab -l | grep -v ^# | awk '{print $6}'
echo $PATH | tr ':' '\n' | xargs -I {} find {} -maxdepth 1 -type f -perm '++x'
crontab -l
crontab -l | awk '$1 == * || $1 ~ /^0-9+$/ && $1 < 15 {print}'
crontab -l | egrep word
crontab -l | grep 'word'
cat /etc/passwd | sed 's/^\(^:*\):.*$/crontab -u \1 -l 2>\&1/' | grep -v no crontab for | sh
set | egrep '^^:space:+ ():space:*$' | sed -r -e 's/ ():space:*$//'
set
env | grep '^\(GO\|HOME=\|PATH=\)'
env | grep '^\(GOBIN\|PATH=\)'
env | grep '^GOROOT'
sudo env |grep USER
env | grep ipo | awk 'BEGIN {FS==} ; { print $1 } '
env | sed -n /$USERNAME/p
env | grep ^PATH
env | awk -F= '/a-zA-Z_a-zA-Z_0-9*=/ { if (!system( -n \${ $1 +y}\ )) print $1 }' | sort | uniq
rsync --list-only --include *2012*.xml -exclude *.xml serveripaddress::pt/dir/files/ --port=111 > output.txt
tree -L 2 -fi
ls -alrt `pwd`/*
tree -ivL 1 /data/ | perl -nlE 'say if /\Acommand-0-90-9a-z.*-setup\z/'
ls -l --time-style=long-iso | sort -k6
ls `pwd`/*
tree -af
ls -1 | tr '\n' ','
ls -1b | tr '\n' ';'
ls -m | tr -d ' ' | tr ',' ';'
file * | grep ASCII
ls | tr  \n  
set | grep  () $ | cut -d' ' -f1
set | grep  ()
for dir in find -depth -type d); do  ! $prev =~ $dir  && echo $dir ; prev=$dir; done
saveIFS=$IFS; IFS=$'\n'; for dir in find -depth -type d ); do  ! $prev =~ $dir  && echo ${dir} ; prev=$dir; done; IFS=$saveIFS
mount
mount -l | grep 'type nfs' | sed 's/.* on \(^ *\) .*/\1/'
mount -l -t nfs4
ls -d */ | cut -f1 -d'/'
ps -ef
screen -ls
who | grep $(tty | sed 's:/dev/::')
env | grep .*X.*
env | awk -F = '{print $1}' | grep .*X.*
env | awk -F= '{if($1 ~ /X/) print $1}'
comm -12 <(find ~/bin/FilesDvorak/.* -maxdepth 0) <(find ~/.PAST_RC_files/.*)
env -i
comm -3 <(sort -un f1) <(sort -un f2) | tr -d '\t'
od -cvAnone -w1
cat <(ls 1 | sort -u) <(ls 2 | sort -u) | uniq -d
$(cat myfile)
ls | more
crontab -l
ls -1p | grep '/$' | sed 's/\/$//'
ls -d */|sed 's|/||g'
du -sh */ | sort -n
du -a --max-depth=1 | sort -n
du -h --max-depth=0 * | sort -hr
du -smc * | sort -n
du -s * | sort -n
pwd | cut -b2- | tr '/' '\n'
pwd | cut -f 1- -d\/ --output-delimiter=$'\n'
grep -o . file | sort -f | uniq -ic
grep -o . filename | tr ':upper:' ':lower:' | sort | uniq -c | sort -nr
grep -o . file | sort | uniq -c
grep -o . filename | sort | uniq -c | sort -nr
set | grep -P '^\w*X\w*(?==)' | grep -oP '(?<==).*'
set | grep -P '^\w*X\w*(?==)'
env | sed 's/;/\\;/g'
set | cut -d= -f1 | grep X
set | grep -oP '^\w*(?==)' | grep X
set | awk -F = '{print $1}' | grep .*X.*
set | grep -oP '^\w*X\w*(?==)'
screen -ls
gzip -l $i
gzip -l compressed.tar.gz
ls -ald `which c++`
tree -L 2
comm -23 <(ls dir1 |sort) <(ls dir2|sort)
sort <(ls one) <(ls two) | uniq -u
sort <(ls one) <(ls two) | uniq -d
md5sum * | sort | uniq -w32 --all-repeat=separate | awk '{print $2}'
sort <(cd $CURR_DIR && find . -type f -ctime $FTIME) <(cd $CURR_DIR && find . -type f -atime $FTIME) <(cd $CURR_DIR && find . -type f -mtime $FTIME) | uniq
(find . -type f -ctime $FTIME && find . -type f -atime $FTIME && find . -type f -mtime $FTIME) | sort | uniq
ls -b
joblist=$(jobs -l | tr \n ^)
sync --list-only --include *2012*.xml -exclude *.xml serveripaddress::pt/dir/files/ --port=111 | awk '{ $1=$2=$3=$4=; print substr($0,5); }' >output.txt
screen -ls
screen -ls
screen -r
screen -list
du -a /var | sort -n -r | head -n 10
ls `pwd`/file.txt
ls /usr/bin | more
more <( ls /usr/bin )
echo $(ls $(pwd))
mount | grep '^/dev/' | sed -E 's/(^ *) on (^ *) .*/\2 is located on \1/'
crontab -u apache -l
gzip -l archive.tar.gz
tree -dfi -L 1 $(pwd)
tree -dfi $(pwd)
echo The quick brown fox jumps over the lazy dog | grep -o . | sort | uniq -c | sort -nr
cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c
cut -f $FIELD * | sort| uniq -c |sort -nr
getent group <groupname> | cut -d: -f4 |  tr ',' '\n'
md5sum *.txt | cut -d ' ' -f 1 | sort -u
fold -w3 $1 | sort | uniq -c | sort -k1,1nr -k2
ssh -fNR 1234:localhost:22 root@123.123.123.123
ls -1 /tmp/hashmap.$1
ls -d !(*.ch)
ls -d !(*@(.c|.h))
ls -d /home/alice/Documents/*/
ls -d */
ls -d ./*/
ls !(*foo)
ls !(b*)
ls /home/dreftymac/*
ls -1 | perl -pe 's/\n$/some_delimiter/'
ls -1 | paste -sd , -
ls -1 | tr '\n' ',' | sed 's/,$/\n/'
ls -m
ls | perl -F'\n' -0777 -anE 'say join ,, @F'
ls | sed '$!s/$/,/' | tr -d '\n'
ls | xargs -I {} echo {}, | xargs echo
ls -1 | awk 'ORS= '
ls -1 | perl -l40pe0
ls -l /lib*/ld-linux*.so.2
apropos -r '.*'
ls -mR * | sed -n 's/://p'
tmux ls
ls -d */ | cut -f1 -d'/'
ls -d */|sed 's|/||g'
ls -d ./*/                     ### more reliable BSD ls
ls -d -- */                    ### more reliable GNU ls
ls -d1 */ | tr -d /
ls /home/dreftymac/
yum check-update | awk 'p; /Updated packages/ {p=1}'
yum check-update | awk '{if($5 ~ /updates/){print $1}}' | tr '\n' ','
ls -d -1 $PWD/**/*
zless MyFile
$ ls
yum -v repolist enabled
ls -l /proc/self/fd/
yum list installed  --disablerepo=* --enablerepo=fedora*
ls -l /bin/echo
pstree -p 1782 | sed 's/-/\n/g' | sed -n -e 's/.*(\(0-9\+\)).*/\1/p'
tmux list-sessions
bind -f ~/.inputrc
file -L $(python -c 'import sys; print(sys.executable)')
libdir=$(dirname $(dirname $(which gcc)))/lib
awk -F, 'NR==1 {gsub(//,,$3);print $3}' $(dirname $(readlink -f $(which erl)))/../releases/RELEASES
which bzip2
ssh -i ./middle_id.pem -R 22:localhost:2222 middleuser@middle.example.org
ssh -i ./device_id.pem -p 2222 deviceuser@middle.example.org
ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com
screen -d -m -L python test.py
ssh -X whoever@whatever.com
ssh -q $HOST  ! -f $FILE_PATH  && touch $FILE_PATH
ssh -i id_rsa host
ssh -i keyFile user@host bash -c \nohup ./script arg1 arg2 > output.txt 2>&1 &\
echo 'echo Bash version: ${BASH_VERSION}' | ssh -q localhost bash
ssh -At gw ssh -A app1
git ls-files | xargs file | grep ASCII | cut -d : -f 1 | xargs wc -l
/usr/sbin/host `hostname`
IP=$(dig +short myip.opendns.com @resolver1.opendns.com)
finger vivek
finger `whoami`
chmod +x bar
chmod +x file.sh
mkdir -p $(seq -f weekly.%.0f 0 $WEEKS_TO_SAVE)
mkdir $(seq -f $HOME/Labs/lab4a/folder%03g 3)
mkdir $(printf $HOME/Labs/lab4a/folder%03g  {0..3})
mkdir ~/Labs/lab4a/folder{1,2,3}
mkdir ~/Labs/lab4a/folder{1..3}
mkdir -p folder$( seq -s /folder 999 )1000
dig stackoverflow.com
dig -f /path/to/host-list.txt
wget --post-data=PiIP=$(hostname -I) http://dweet.io/dweet/for/cycy42
ls -d */ | xargs -iA cp file.txt A
echo dir1 dir2 dir3 | xargs -n 1 cp file1
cp -R SRCFOLDER DESTFOLDER/
cp -r dir1/ ~/Pictures/
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | xargs mkdir
mkdir $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
for i in `find . -type d`; do mkdir -p /tmp/tar_root/`echo $i|sed 's/\.\///'`; done
mkdir -p es/LC_MESSAGES
mkdir --parents ./es_MX.utf8/LC_MESSAGES
mkdir $@ |sed -es/mkdir: created directory /$USER created folder /
mkdir -v $@ | sed 's/mkdir: created directory /jar-jar: yea, weesa gotta /'
mkdir --parents ./es_MX.utf8/LC_MESSAGES
mkdir /tmp/A /tmp/B /tmp/C /tmp/ dir with spaces
mkdir 3/foo 3/bar 3/baz
mkdir Labs/lab4a/{folder1,myfolder,foofolder}
mkdir a b c d e
mkdir -p a/b/c
mkdir bravo_dir alpha_dir
mkdir -p es/LC_MESSAGES
mkdir foo bar
mkdir -p foo/bar/baz
mkdir mnt point
mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}
mkdir -p tmp/real_dir1 tmp/real_dir2
mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang
mkdir -p path2/{a..z}
mkdir -p $(echo -e $1 |sed $'s/\r//')
cat a.txt | grep / | sed 's|/^/*$||' | sort -u | xargs -d $'\n' mkdir -p
mkdir -p `cut -f2 -d& filetypes.txt | sed 's/ ,://g' | sort -u`
mkdir -p ${raw_folder} ${split_folder}
xargs -n 1 dirname <somefile.txt | xargs mkdir -p
while read line; do mkdir -p ${line%/*}; done < infile
cat folder_list.txt | xargs mkdir
cat file1 |xargs -I {} dirname {}| sort -u | xargs -I{} mkdir -p {}
mkdir -p $2
mkdir -p $TARGET_PATH
mkdir -p /my/other/path/here
mkdir -p /my/other/path/here/
mkdir -p ./some/path
mkdir -pv /tmp/boostinst
mkdir -p /tmp/test/blah/oops/something
mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}
mkdir -p x/p/q
mkdir -p `dirname /full/path/to/file.txt`
mkdir /cpuset
sudo mkdir /data/db
mkdir /etc/cron.15sec
mkdir /etc/cron.5minute
mkdir /etc/cron.minute
mkdir /path/to/destination
mkdir /tmp/foo
mkdir /tmp/googleTestMock
rsync -aq --rsync-path='mkdir -p /tmp/imaginary/ && rsync' file user@remote:/tmp/imaginary/
mkdir /tmp/new
sudo mkdir /var/svn
mkdir TestProject
mkdir aaa
mkdir aaa/bbb
mkdir alpha_real
mkdir backup
mkdir certs/
mkdir destdir
mkdir -p dir
mkdir dir1
mkdir -m 777 dirname
mkdir foo
mkdir -p foo
mkdir mybuild
mkdir new_dir
mkdir saxon_docs
mkdir subdirectory
mkdir tata
mkdir temp
mkdir testExpress
mkdir ~/log
mkdir ~/practice
mkdir ~/public_html
mkdir ~/temp
mkdir -p `file -b --mime-type *|uniq`
mkdir -p -- $(dirname -- $f)
mkdir -p $FINALPATH
mkdir -p ~/temp/bluecove/target/
mkdir $dir
mkdir ${archive%.tar*}
mkdir .hiddendir
touch .bash_profile
TIMEFORMAT=%R && time ls -l
set -a
paste -sd+ filename | bc
cat FileWithColumnOfNumbers.txt | xargs ruby -e puts ARGV.map(&:to_i).inject(&:+)
cat filename | python -cfrom fileinput import input; print sum(map(int, input()))
cat filname | lua -e sum = 0;for i in io.lines() do sum=sum+i end print(sum)
sed 's/^/.+/' infile | bc | tail -1
cat file.txt | xargs  | sed -e 's/\ /+/g' | bc
cat numbers.txt | php -r echo array_sum(explode(PHP_EOL, stream_get_contents(STDIN)));
paste -s -d+ infile | bc
paste -sd+ infile | bc
... | paste -sd+ - | bc
echo $(( $(... | paste -sd+ -) ))
time find /usr/src -name *.html -exec grep -H foo {} ';' | wc -l
time find /usr/src -name *.html | xargs grep -l foo | wc -l
sort -m a b c d e f g h i j | more
sort -m *.txt | split -d -l 1000000 - output
sort --merge file*.txt | split -l 100000 - sorted_file
sort -m *.$suffix
sort -m _tmp* -o data.tsv.sorted
join -t: <(sort file1) <(sort file2)
join -o 1.1,1.2,1.3,2.1,2.2,2.3 -j2 <(sort -k2 file1) <(sort -k2 file2)
join -t, -o 1.2,2.2,2.3 -a 1 -a 2 -e 'no-match' - <(sort file1.txt)
join -t, -o 1.2,2.2,2.3 -a 1 -e 'no-match' - <(sort file1.txt)
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort) ...
join -j2 <(sort -k2 file1) <(sort -k2 file2)
paste -d, -s file
paste -s -d,
grep -v '^$' | paste -s -d, -
join -t, <(sort file1) <(sort file2)
join -1 2 -2 1 text.txt codes.txt
paste file_1 file_2 | column -s $'\t' -t
paste file{1,2,3,4} | sed -e 's/\t/ \t/g' | column -t -s$'\t'
join -t, -o 1.1,1.2,2.3 in1 in2
join -t, in1 in2
join -t, -o 1.1,1.2,2.3 -a1 in1 in2
paste <(head -$lc current.txt) <(tail -$lc current.txt) | column -t -o,
sed -i 's/foo/bar/g' file
sed -i 's/foo/bar/' file
watch -n 0.1
top -p 18884 -p 18892 -p 18919
mount /dev/shm
mount /path/to/device /path/to/mount/location -o loop
mount /path/to/device /path/to/mount/location -o loop -t vfat
mount /tmp/loop.img /mnt/image -o loop
mount /windows
mount -t cpuset none /cpuset/
sudo mount device_name mount_point
sudo mount /dev/xvdf /vol -t ext4
sudo mount /dev/xvdf1 /vol -t ext4
mount -t ntfs -o ro /dev/mapper/myldm /mnt
mount -t ntfs-3g /dev/mapper/myvolume /media/volume
mount -t proc none /var/snmp3/proc
mount --bind /absolute/path/to/some/where/else project1/link1
mount none -t tmpfs /path/to/dir
sudo mount -t vfat -o rw,auto,user,fmask=0000,dmask=0000 /dev/sda7 /mnt/my_partition
mount -o ro,loop,offset=$OFFSET -t auto $IMAGE /media/$DEST
mount -t ntfs
sudo mount -a
sudo mount -o loop /dev/loop0 test
mount -L WHITE /mnt/WHITE
mount -L WHITE /mnt/WHITE -o rw
mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test
sudo mount -t cifs -o username=me,password=mine //192.168.0.111/serv_share /mnt/my_share
mount -t cifs //server/source/ /mnt/source-tmp -o username=Username,password=password
mount -t smbfs -o soft //username@server/share /users/username/smb/share
mount -t linprocfs none /proc
sudo mount -t vboxsf D:\share_folder_vm \share_folder
sudo mount -t vboxsf myFileName ~/destination
mount -obind /etc /tmp/sarnold/mount_point/
sudo mv $PHANTOM_JS /usr/local/share
mv /usr/bin/openssl /root/
mv -nv caniwrite /usr/local/bin
mv -f file.txt /var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt
mv -f file.txt /var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt
mv -t target file1 file2 ...
sudo mv phantomjs-1.8.1-linux-x86_64.tar.bz2 /usr/local/share/.
mv tobecopied/tobeexclude tobeexclude;
mv tobecopied/tobeexcluded .
for D in `find . -iname *.php~`; do mv ${D} /mydir; done
ls -1 | grep -v ^$EXCLUDE | xargs -I{} mv {} $TARGET
mv * /foo
mv `ls` /foo
mv * /tmp/blah/
mv `ls` somewhere/
mv `ls *.boo` subdir
mv /mnt/usbdisk/^l* /home/user/stuff/.
mv /path/subfolder/* /path/
rsync -a --progress --remove-source-files src/test/ dest
mv /source/path/{.!.,}* /destination/path
mv /path/subfolder/{.,}* /path/
cat $i | xargs mv -t dir.$count
mv ~/Linux/Old/^Tux.png ~/Linux/New/
grep -L -Z -r 'Subject: \SPAM\' . | xargs -0 -I{} mv {} DIR
grep -l 'Subject: \SPAM\' | xargs -I '{}' mv '{}' DIR
grep -L -r 'Subject: \SPAM\' . | while read f; do mv $f out; done
mv $(grep -l 'Subject: \SPAM\' | awk -F ':' '{print $1}') your_file
mv /path/subfolder/.* /path/
mv wordpress/.* .
nl -n rz ca | awk -vOFS=\t '/Ca/{$1=#$2} {$1=$1}1' | sort -k1,1 | cut -f2-
mv server.log logs/$(date -d today +%Y%m%d%H%M).log
tmux movew -s 4 -t 3
mv $2 `dirname $1`
mv /tmp/`basename $1` `dirname $2`
file $(readlink -f $(type -p rename))
nl -nrz -w9  /etc/passwd
nl -nrz -w9 foobar
nl
nl -s- -ba -nrz
cat files | sort -t- -k2,2 -n
tr '.' ' ' | sort -nu -t ' ' -k 1 -k 2 -k 3 -k 4 | tr ' ' '.'
sort -nr bb
sort -n out
sort -n
sort -nk 2,2 file.dat | tac
sort -nrk 2,2 file.dat
tac files | sort -t- -k2,2 -n
sort -b -n -k2.4 table
tac temp.txt | sort -k2,2 -r -u
sort -n -k 2
sort -nrk 2,2
scp -3 user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/
scp user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/
sudo vim `which charm`
ssh -D1080 root@localhost -g
ssh user@host -M -S /tmp/%r@%h:%p -N
ssh user@host -S /tmp/%r@%h:%p
ssh user@host -X
mate `which rails`
vi `which yum`
info gcc option index
info -O gawk
info gcc --index-search=funroll-loops
info gcc option index
info bash 'Basic Shell Features' 'Shell Expansions' 'Filename Expansion' 'Pattern Matching'
tmux
basename some/unknown/amount/of/sub/folder/file.txt
basename /foo/bar/stuff
basename testFile.txt.1 .1
sed 's/^,/ ,/' test2.csv | tr -d \ | column -s, -t
diff --new-line-format= --unchanged-line-format=  file1 file2
diff file2 file1 | grep '^>' | sed 's/^>\ //'
diff --new-line-format= --unchanged-line-format= <(sort file1) <(sort file2)
uniq -w12 -c file
awk -F\t 'NF>1' file
join -1 2 -2 1 -t, BigFile.csv LittleFile.csv
join -t: selection2.txt selection1.txt
yes | sed -n '200000000,${=;p};200000005q'
awk 'NR==16224, NR==16482-1; NR==16482 {print; exit}' file
awk 'NR==16224, NR==16482' file
echo foo.tar.gz | rev | cut -d. -f1 | rev
join -v1 success.txt fail.txt
echo $(basename $1)
basename some/unknown/amount/of/sub/folder/file.txt
basename /EBF/DirectiveFiles/data_report_PD_import_script_ABF1_6
basename /path/to/dir/filename.txt .txt
nl -ba | sed 786q | grep . | awk '{print $2$1}'
yes
echo Hostname=$(hostname) LastChecked=$(date)
echo ${filename%.*}
yes -- -tcp | head -n 2
yes -- -tcp | head -n 2
shred -v -n 1 /path/to/your/file #overwriting with random data
shred -v -n 1 -z -u /path/to/your/file
shred -v -n 0 -z -u /path/to/your/file #overwriting with zeroes and remove the file
shred my-existing-file
shred -u $FILE
shred -uzn 35 filename
command | less
ps -eo pcpu,pid,user,args | sort -r -k1 | less
make 2>&1 | less
lspci -v -v | less
less -S file
od -xcb input_file_name | less
cat BIG_FILE.txt | less
less -p regex file_name
cat -vet file | less
cat -e yourFile | less
objdump --disassemble my-crashing-program | less
less -f <(php -i)
some_command | less -p regex
less -f <(php whatevz.php)
paste -d ' ' file <(rev file)
cat file.json | python -c import sys, json, jsonpath; print '\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book?(@.price < 10).title'))
xmllint example.xml --xpath /config/*/@* | sed s| key|\nkey|g | nl
source <(./script.sh | sed -rn '/volume/{s#/dev/(^:space:+):space:+#\1=#;p}')
yes | execute_command
/bin/true $(seq 1 100000)
scp -vp me@server:/location/files\*
/bin/true $(seq 1 100000)
rename -n 's/special/regular/' **
rsync -nvraL test/a test/dest --exclude=a/b/c/d
source <( sed 's/:\(.*\)/=\1/' msgs.config )
cat ips | xargs -i% ping -c 2 %
cat ips | xargs -n1 ping -c 2
echo $(seq 254) | xargs -P255 -I% -d  ping -W 1 -c 1 192.168.0.% | grep -E 0-1.*?:
ping -c 1 hostname | grep 192.168.11 | grep 'bytes from' | awk '{print $4}' | sed 's/://g'
ping -b 10.10.0.255
echo -e \n\n\n | ssh-keygen -t rsa
printf  | ssh-keygen -b 1024 -f ball -t dsa
cat somedata.txt | $outfile
yes | awk 'FNR<4 {print >>file; close(file)}  1' | more
program1 | tee >(program2) >(program3)
ls | read var
bg %  so it wont die when you logoff
popd
ls | xargs -I {} mv {} Unix_{}
for FILENAME in *; do mv $FILENAME Unix_$FILENAME; done
ls | xargs -i mv {} unix_{}
ls | xargs -I {} mv {} PRE_{}
for f in *; do  -f $f  && mv $f unix_$f; done
nl filename
{ echo foo; cat bar; } | tee bar > /dev/null
ping google.com | xargs -L 1 -I '{}' date '+%+: {}'
history $@ | tac | nl | tac | sed 's/^\( *\)\(0-9\)/\1-\2/'
history $@ | tac | nl | tac
tail -f /path/to/log | perl -pne 'print scalar(localtime()),  ;' > /path/to/log-with-timestamps
ping www.google.com | while read endlooop; do echo $(date): $endlooop; done
ping www.google.fr | while read pong; do echo $(date): $pong; done
g++ omnitest.cpp -E | less
ssh -n $R_USER@$R_HOST 'touch /home/user/file_name.txt'
echo Cannot acquire lock - already locked by $(cat $lockfile)
comm -13 <(grep '#include' file1 | sort) <(grep '#include' file2 | sort)
nl | sort -R | cut -f2 | head -${1:-10}
echo $PATH | awk -F: -f rem_dup.awk | paste -sd:
echo -n $line | od -x
echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date)
tail -n +11 /tmp/myfile
echo I am $(whoami) and the program named ls is in $(which ls).
df /mnt/myUSBdisk | grep -q /mnt/myUSBdisk && echo Mounted || echo Not mounted
echo  RDBMS exit code : $RC       | tee -a ${LOG_FILE}
df /tmp | grep -q tmpfs && echo Shared Memory || echo Not Shared Memory
echo This is   a sentence. | tr -s   \012
echo Total generated: $(echo $generated_ports | sort | uniq | wc -l).
echo -e a\nb\ncccccccccccc\nd | paste - - | column -t
echo deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main | tee -a /etc/apt/sources.list
echo deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main | tee -a /etc/apt/sources.list
cat ips | xargs -n1 echo ping -c 2
cat ips | xargs echo ping -c 2
tail -n +1 file1.txt file2.txt file3.txt
cat blah | perl -en '/\xCA\xFE\xBA\xBE/ && print found'
echo hello `whoami`
tail -n +1000001 huge-file.log
cat new.txt  | nl
cat new.txt  | nl | sed  /2/d
cat new.txt  |  nl |sed  3d;4d
echo on | tee /sys/bus/usb/devices/usb*/power/level
printf operator: `finger ${USER} | grep Name: | cut -f3 -d:` \n
echo hello world | echo test=$(cat)
comm -2 file1.txt file2.txt | awk -F'\t' '{print (NF==2?y:)}'
yes yes | sed -e 5s/yes/no/ -e 5q
echo -e HTTP/1.1 200 OK\n\n $(date)
echo -en '111 22 3\n4 555 66\n' | tr ' ' '\t'
if find `echo $some_dir` -maxdepth 0 -empty | read v; then echo Empty dir; fi
if find /some/dir/ -maxdepth 0 -empty | read v; then echo Empty dir; fi
if find `echo $some_dir` -maxdepth 0 -empty | read v; then echo Empty dir; else Dir is NOT empty fi
ls -alFt `find . -name bla.txt` | rev | cut -d  -f1 | rev | head -1
echo 'hello, world' | cat
 -z find aaa/ -maxdepth 1 -type f)  && echo empty
cat file | fold -w29
cat file | fold -s -w29
cat file | xargs -n3
cat -n infile
od -A n -t d -N 1 /dev/urandom
echo {1..9}: 10 | tr -d ' '
yes '#' | head -n 10 | tr -d '\n'
yes x | head -n 10
printf '%-10s%-10s%-10s%s\n' $(yes x | head -n 10)
yes x | head -10 | awk 'BEGIN { RS = %%%%%%% } { split($0,a,\n); for (i=1; i<length(a); i+=4) print ai, ai+1, ai+2, ai+3 }'
head -c 1000 /dev/zero | tr '\0' '*'
yes 123456789 | head -2
yes | head -3
echo $(yes % | head -n3)
tr -s ' ' < file | cut -d' ' -f4
yes ' ' | head -7 | tr -d '\n'
dig @ns1.newnameserver domain. a
dig @ns2.newnameserver domain. a
dig @some.other.ip.address domain. a
dig @8.8.8.8 domain. a
ps aux | awk '{print $4\t$11}' | sort | uniq -c | awk '{print $2 $1 $3}' | sort -nr
ps aux | awk '{print $4\t$11}' | sort | uniq -c | awk '{print $2 $1 $3}' | sort -nr |grep mysql
who | awk -F '()' '/orschiro/{print $(NF-1)}' | grep -v orschiro | uniq
who | sed -e '/orschiro/! d; /pts/! d; s/^.*\(:0-9.\+\).*$/\1/p;d' | head -n1
echo $(/usr/sbin/arp $(hostname) | awk -F'()' '{print $2}')
hostname -I|cut -d  -f 1
hostname  -i
hostname --all-ip-address|cut -d ' ' -f1
hostname --ip-address
hostname -I
hostname -I | awk '{print $1}'
hostname -I | cut -d' ' -f1
dig @some.other.ip.address domain. ns
dig @8.8.8.8 domain. ns
ps h -o pid,user -C ssh,sshd | tr -s  
dig @server hostname.bind ch txt
yes 'http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr=' | nl -ba | sed 786q | grep . | awk '{print $2$1}'
od -An -N2 -i /dev/random
echo $1 | od -xcb
ps aux | tr -s ':blank:' | cut -d' ' -f3
sort ips.txt | uniq -c | sort -bgr
sort ports.txt | uniq -c | sort -r
ls -1 | tr 'A-Z' 'a-z' | sort | uniq -c | grep -v  1 
sort filename | uniq -c
sort filename | uniq -c | sort -nr
sort | uniq -c
sort | uniq -c | sort -n
sort ip_addresses | uniq -c
sort -n ip_addresses.txt | uniq -c
tree | tail -1
echo -ne $VAR1 | xxd -r -p | od -c
awk -F '\t' '{print $2}' * | sort | uniq -c | sort -nr
echo Aa | od -t x1
printf Aa | od -t x1
echo $DIREC | od -c
printf '%0.s-' $(seq 1 $variable)
seq  -f # -s '' 10
head -c 100 < /dev/zero | tr '\0' '='
printf %100s |tr   =
cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1
seq -s % 4|tr -d ':digit:'
seq -s= 100|tr -d ':digit:'
ls | sort -f | uniq -i -d
diff -q /dir1 /dir2|cut -f2 -d' '
tree -fi |grep -v \>
git whatchanged --all | \grep \.\.\. | cut -d' ' -f5- | cut -f2- | sort | uniq -c | sort
who | cut -d' ' -f1 | sort | uniq
$ find other -maxdepth 1
diff -dbU0 a b
diff -dbU0 a b | tail -n +4 | grep ^- | cut -c2-
diff -burNad teste1 teste2
ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { print $0; printf sent:%d received:%d loss:%d%%\n, sent, received, loss; }'
seq 2000 65000 | sort -R | head -n 1
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') | tac
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
yes | head -n 10 | awk '{printf( %03d , NR )}'
yes | head -n 10 | awk '{printf( %03d , NR )}'    ##for 01..10
yes | grep y | sed 100q | awk '{printf( %03d , NR )}'; echo
yes | head -n 100 | awk '{printf( %03d , NR )}'
yes | head -n 100 | awk '{printf( %03d , NR )}'   ##for 001...100
seq 10 | xargs
seq 10 | xargs echo -n
sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print -----------------------------------------------------------------------;}'
ping host | awk '{if($0 ~ /bytes from/){print strftime()|$0}else print}'
od -cvAnone -w1 | sort -b | uniq -c | sort -rn | head -n 20
od -cvAnone -w1 | sort -bu
echo Welcome $(whoami)!
echo Welcome `whoami`!
echo -ne Welcome $(whoami)!\n
echo -ne Welcome `whoami`!\n
readlink -f PATH
readlink -f YOUR_PATH
readlink -f $(which java)
grep -Eo '(0-9+-){3}0-9+' infile | tr - .
cal -h | cut -c 4-17 | tail -n +3
echo He likes cats, really? | fold -w1 | sort -u
comm -12 <(grep -rl word1 . | sort) <(grep -rl word2 . | sort)
ls -1 | paste -sd , -
getent group | cut -d: -f1
cat report.txt | grep -i error
tac file | awk '/pattern/{print;exit}1' | tac
tac file | sed '/pattern/q' | tac
sed -n '/pattern/!p' file
seq 1 10 | perl -e '@x=()x3;while(<>){print shift @x;push @x,$_}'
seq 1 10 | perl -e'@x=<>;print@x0..$#x-3'
seq 1 10 | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )'
seq 1 10 | perl -ne 'push @l, $_; print shift @l if @l > 3'
seq 10 | tac | sed '1,3d' | tac
who | awk '{print The user  $1  is on  $2}'
which -a python
grep $(cat file1.txt) file2.txt
zcat /var/log/fail2ban.log* | gawk  '/.*Ban.*/  {print $7};' | sort | uniq -c | sort | gawk '{ geoiplookup  $2 | cut -f2 -d:  | getline geoip; print $2 \t\t $1   geoip}'
comm -23 <(find dir1 -type d | sed 's/dir1/\//'| sort) <(find dir2 -type d | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'
comm -23 <(find dir1 -type f | sed 's/dir1/\//'| sort) <(find dir2 -type f | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'
comm -23 <(find dir1 | sed 's/dir1/\//'| sort) <(find dir2 | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'
cat $1.tmp | sort -u
who | awk '{ print $1, $2 }'
who | cut -d   -f1,2
df -Ph $PWD | tail -1 | awk '{ print $3}'
df . | awk '$3 ~ /0-9+/ { print $4 }'
df . -B MB | tail -1 | awk {'print $4'} | cut -d'%' -f1
df . -B MB | tail -1 | awk {'print $4'} | grep  .0-9*
df $PWD | awk '/0-9%/{print $(NF-2)}'
echo -e ALERT - Shell Access on:' `date` `who` '\n\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`
od -a -An -v file | perl -0777ne 's/\n//g,print $_\n  for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs'
ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
my_program | tee >(split -d -b 100000 -)
tail -f /var/log/some.log | grep --line-buffered foo | grep bar
tail -f /var/log/syslog
tail -f file | stdbuf -o0 grep my_pattern
tail -f file | grep --line-buffered my_pattern
yes $1 | head -$number
basename $FILE | cut -d'.' -f-1
set | grep ^fields=\\\|^var=
paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)
readlink -f  /path/here/..
readlink -m /path/there/../../
echo 'abcdefg'|tail -c +2|head -c 3
echo $(comm -12 <(echo $a | fold -w1 | sort | uniq) <(echo $b | fold -w1 | sort | uniq) | tr -d '\n')
seq $(tail -1 file)|diff - file|grep -Po '.*(?=d)'
history
cat /proc/17709/cmdline | xargs -0 echo
ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4
comm -12 <(echo $a|awk -F\0 '{for (i=1; i<=NF; i++) print $i}') <(echo $b|awk -F\0 '{for (i=1; i<=NF; i++) print $i}')|tr -d '\n'
comm -12  <(ls 1) <(ls 2)
comm -12  <(ls one) <(ls two)
comm -12 file1 file2
comm -12 <(sort < a) <(sort < b)
comm -12 <(sort set1) <(sort set2)
comm -12 ignore.txt input.txt
comm -12 <(comm -12 <(comm -12 <(sort file1) <(sort file2)) <(sort file3)) <(sort file4)
cat `find . -name '*.foo' -print`
$ cat 1
cat -vet a
rev domains.txt | cut -d '.' -f 2- | rev
rev file
cat -v -e filename
cat whatever | egrep 'snozzberries|$'
cat /etc/passwd /etc/group
cat find . -name '*.foo')
od -t x1 -An file |tr -d '\n '
xxd -p file | tr -d '\n'
grep -ao /\\ /dev/urandom|tr -d \\n
cat /dev/urandom | tr -dc '. ' | fold -w 100
cat list_part* | sort --unique | wc -l
cat /etc/passwd | sed 's/^\(^:*\):.*$/crontab -u \1 -l 2>\&1/' | sh | grep -v no crontab for
date -u -Iseconds
date +%s
set -o
ps  -ef | grep $$ | grep -v grep
ps -p $$
echo ( `date -d $B +%s` - `date -d $A +%s`) / (24*3600) | bc -l
diff <(fold -w1 <<< $s) <(fold -w1 <<< $r) | awk '/<>/{printf $2}'
diff -bur folder1/ folder2/
diff ${@:3} <(sort $1) <(sort $2)
tree -d -L 1 -i --noreport
mount | awk '$3 == /pa/th {print $1}'
paste --delimiter=\\n --serial *.txt
echo -n Hello | od -A n -t x1
echo orange | fold -w 1
echo abcdefg | fold -w1
fold -w1 file | pr -4t | sed 's/\s*-\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\'
paste <(paste -d  f1 f2) f3
paste file file2 file3 | sed 's/\t/ /'
paste -d'¤' file1 file2 | sed 's,¤, ,g'
paste -d  file1 file2 | paste -d'|' - file3 | sed 's,|, ,g'
join -v 1 <(sort file1) <(sort file2)
sort file1.txt file2.txt file2.txt | uniq -u
sort set1 set2 | uniq
paste tmp/sample-XXXX.{tim,log}
sort file1 file2 | uniq -u
finger -l | grep Name: | cut -d : -f 3 | cut -c 2- | sort | uniq
finger | awk 'NR>1{print $2,$3}'
finger -l | grep Name: | tr -s ' ' | cut -d   -f 2,4- | sort | uniq
cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2   $1}'
sort file1 file2 | uniq -d
yes $'one\ntwo' | head -10 | nl | sort -R | cut -f2- | head -3
ps -u $(whoami) --no-header -o vsz | dc -f - -e '+z1<rsrz1<rp'
getent group | cut -d: -f1 | sort | cat -n
set | grep ^IFS=
date -d Oct 21 1973 +%s
comm -12 <(zcat number.txt.gz) <(zcat xxx.txt.gz)
fold -b16 | sed 's/../& /g'
fold -b -w 20 | cut --output-delimiter $'\t' -b 1-3,4-10,11-20
fold -w3
yes | cat -n | head -10 | awk 'NR % 4 == 1'
paste -sd',,\n' file
cat file | paste -d' ' - -
cat file | paste -d\ - - -
paste -d' ' <(sed -n 'p;n' num.txt) <(sed -n 'n;p' num.txt)
echo $FILE | cut -d'.' -f2
echo $(ls -l $(which bash))
ls -l `which passwd`
ls -l $( which studio )
which studio | xargs ls -l
ls `which g++` -al
ls `which gcc` -al
echo $FILE | cut -d'.' -f1
echo $FILE | cut -d'.' --complement -f2-
echo $FILE|rev|cut -d. -f3-|rev
ls /home/ABC/files/*.csv | rev | cut -d/ -f1 | rev
tree -Csu
df
df -H --total /
df -k .
df -h /
df -Ph | column -t
df .
df --total
a=$( df -H )
cat `which java` | file -
file -L `which gcc`
file `which c++`
file `which file`
which file | file -f -
file $(which foo)
file `which python`
echo -en ${line:0:11} \t $(md5sum ${line:12}) \0
paste -d':' *.txt | sed 's/ ^:*$//;s/ ^:*:*/ /g;s/://g'
echo $string | cut -d';' -f1
echo <line> | cut -d ; -f 1
grep -o '^\S\+' <(comm file1 file2)
cat -v /dev/urandom
tr -s ' ' < file | cut -d' ' -f4
cat text.txt | tr -s ' ' | cut -d ' ' -f4
cat text.txt | cut -d   -f 4
echo `date -v-1d +%F`
which c++
which gradle
which programname
which python
which python2.7
git branch  --no-color  | grep -E '^\*' | cut -d ' ' -f 2
git branch | grep * | cut -d ' ' -f 2
git status --branch --porcelain | grep '##' | cut -c 4- | cut -d'.' -f1
git status | grep On branch | cut -c 11-
git status | head -1 | cut -d ' ' -f 3
git symbolic-ref HEAD 2>/dev/null | cut -d/ -f 3
groups $(who | cut -d' ' -f 1)
cat --help
history | awk '{sub($1, ); sub(/^ \t+/, ); print}'
history | awk '{sub($1, , $0); sub(/^ \t+/, , $0); print}'
echo $(hostname):$(cat /sys/block/sda/size)
echo -n `hostname`
df
df --total
cat /proc/1/sched  | head -n 1
who -la
ps -ef | grep $0 | grep $(whoami)
mount -v | grep  on / 
tree -afispugD --inodes | awk '{FS=./; ORS=; printf(%-60s%s\n,$NF,$0)}'
echo 'your, text, here' | fold -sw 70
cat file | xargs
history 10
history 10 | cut -c 8-
cal 4 2009 | tr ' ' '\n' | grep -v ^$ | tail -n 1
echo 0a.00.1 usb controller some text device 4dc9 | rev | cut -b1-4 | rev
cat $filename | sed ${linenum}p;d;
cat /etc/passwd -n | grep `whoami` | cut -f1
wc `find`
wc `find | grep .php$`
seq 1 100000 | sed -n '10000,10010p'
seq 1 100000 | tail -n +10000 | head -n 10
cat dump.txt | head -16224 | tail -258
cat file | head -n 16482 | tail -n 258
history | sed -n '2960,2966p'
tail -n +347340107 filename | head -n 100
grep -e TEXT *.log | cut -d':' --complement -s -f1
join -t   -j 1 <(sort file1) <(sort file2)
sort <(sort -u file1.txt) file2.txt file2.txt | uniq -u
sort foo.txt | uniq
grep -w -v -f blacklist file
grep -v 'pattern' filename
comm -23 <(sort a.txt) <(sort b.txt)
comm -23 <(sort file1) <(sort file2)
comm -13 <(sort file1) <(sort file2)
comm -13 <(sort first.txt) <(sort second.txt)
tac file | rev
cat <(grep -vxF -f set1 set2) <(grep -vxF -f set2 set1)
comm file1 file2
gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/^/.^/*/\.\./,/,;t 1;s,:^=*=,:;,;s,;,;  ,g' | tr \; \\012
ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012
groups | tr \  \\n
who | awk '{ print $1 }'
who | sed -e 's/ \t.*//g'
alias -p | cut -d= -f1 | cut -d' ' -f2
mount | awk '/\/dev\/sd/ {print NR, $1, $3}'
paste <(mount | awk 'tolower($0) ~ /\/dev\/sd*/ {print NR \t $1 \t $3}') <(/usr/sbin/smartctl -a /dev/sdb | awk '/Device:/ {print $2}')
mount | grep -i /dev/sd.* | awk '{ print NR \t $1 \t $3 }' > mount_output &
df -h |  awk '{print $1}'
diff -q /dir1 /dir2 | grep /dir1 | grep -E ^Only in* | sed -n 's/^:*: //p'
svn status |  grep '\!' | cut -d\  -f2-
dig @127.0.0.1  _etcd-client._tcp. SRV
who | awk '{ if (NR!=1 && NR!=2) {print} }' | sed -e 's/ /, /g'
finger -l | awk '/^Login/'
finger -l | awk '/^Login/' | sed 's/of group.*//g'
df $filename | awk 'NR==1 {next} {print $6; exit}'
df $path | tail -1 | awk '{ print $6 }'
df --output=target $path | tail -1
df -P $path  | tail -1 | awk '{ print $NF}'
df -P /tmp | awk 'BEGIN {FS= *0-9+%? +}; NR==2 {print $NF}'
echo -e ONBOOT=\YES\\nIPADDR=10.42.84.168\nPREFIX=24 | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth4
df -P $path | awk 'BEGIN {FS= *0-9+%? +}; NR==2 {print $1}'
df -h $path | cut -f 1 -d   | tail -1
ps -o user= -p $$ | awk '{print $1}'
yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6
wc `find . -name '*.h|c|cpp|php|cc'`
echo MYVAR | grep -oE '/^/+:' | cut -c2- | rev | cut -c2- | rev
comm -2 -3 <(sort -n B.txt) <(sort -n B.txt)
cat $file | wc -c
comm -12 <(sort -u /home/xyz/a.csv1) <(sort -u /home/abc/tempfile) | wc -l
ls -d -1 $PWD/**/*/* | cat -n
ls | grep android | cat -n
yes | head -n10 | grep -n . | cut -d: -f1 | paste -sd:
seq 10 | parallel -j4  echo '{}'
seq 10 | xargs -P4 -I'{}' echo '{}'
seq 10 | awk 'NR%2{printf(%s , $0); next}1'
seq 10 | paste -sd \n -
seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}'
seq 10 | sed 'N;s/\n/ /'
seq -w 1 10
seq 1 100
printf  %02d $(seq 1 30)
seq -f %02g 30
seq -w 30
seq -w 30
seq 5 | awk '{printf %s, $0} END {print }'
seq 5 | awk '{printf %s, $0}'
seq $1
sort -n ip_addresses.txt | uniq -c
echo $PATH | rev | cut -d/ -f1 | rev
cat /dev/urandom | tr -dc 'a-zA-Z0-9'
comm -1 -2 <(ls /dir1 | sort) <(ls /dir2 | sort)
comm -1 -2 file1.sorted file2.sorted
comm -1 -2 <(sort file1) <(sort file2)
echo $name | tr -c -d 0-9
cat file | fold -w29 | head -1
cat file | fold -s -w29 | head -1
cut -d: -f1 /etc/group
cat file1.txt | grep -Fvf file2.txt | grep '^Q'
finger -s | awk '{printf(%s %s\n, $1, $2);}'
cat /dev/urandom | tr -dC ':graph:'
cat datafile | rev | cut -d '/' -f 2 | rev
comm -1 -3 file1 file2
wc -l $f | tr -s ' ' | cut -d ' ' -f 1
cat set1 set2 | sort -u
cat -n file_name | sort -uk2 | sort -nk1 | cut -f2-
set -x
readlink -ev mypathname
for l in find . -type l); do cd $(dirname $l); if  ! -e $(readlink $(basename $l)) ; then echo $l; fi; cd - > /dev/null; done
qstat -xml | tr '\n' ' ' | sed 's#<job_list^>*>#\n#g' \   | sed 's#<^>*>##g' | grep   | column -t
script -c ./a /dev/null | tee output.txt
script -q /dev/null ./a | tee output.txt
stdbuf -o 0 ./a | tee output.txt
~ $ . trap.sh | cat
rpm -qfi `which ldconfig`
echo <(yes)
du | awk '{print $2}'
df -k $FILESYSTEM | tail -1 | awk '{print $5}'
df . -B MB | tail -1 | awk {'print substr($5, 1, length($5)-1)'}
tree -p -d
cal 09 2009 | awk 'BEGIN{day=9}; NR==4 {col=index($0,day); print col }'
cal 09 2009 | awk 'NR==4{day=9; col=index($0,day); print col }'
cal 09 2009 | awk '{day=9; if (NR==4) {col=index($0,day); print col } }'
pstree | cat
tee
readlink /dev/disk/by-uuid/b928a862-6b3c-45a8-82fe-8f1db2863be3
dig -x 72.51.34.34
dig -x 127.0.0.1
j=`echo $i | rev | cut -d . -f2`;
yes '' | nl -ba | sed -n -e 11,24p -e 24q
echo $string | cut -d';' -f2
echo <line> | cut -d ; -f 2
tr -s ' ' | cut -d ' ' -f 2
echo -e <line> | sed 's:\s\+:\t:g' | cut -f2
cut -d ' ' -f 2
cut -d\  -f 2
cut -d  -f2 a
zcat number.txt.gz | { zcat xxx.txt.gz | comm -12 /dev/fd/3 - ; } 3<&0
ldd $(which YOURAPPNAME)
dig +short -f list
dig TXT +short o-o.myaddr.l.google.com @8.8.8.8
dig TXT +short o-o.myaddr.l.google.com @ns1.google.com
getent group | cut -d: -f1 | sort
sort ip_addresses | uniq -c
who | awk '{ print $1; }' | sort -u | awk '{print $1; u++} END{ print users:  u}'
dirname $(readlink -f $0)
df -P $path | tail -1 | cut -d' ' -f 1
df . | tail -1 | awk '{print $1}'
echo `seq $start $end`
seq -s' ' $start $end
seq 10 | xargs echo
seq 5 | perl -ne 'chomp; print $_ ; END{print \n}'
diff --old-line-format '%L' --new-line-format '' --unchanged-line-format ''  <(nl File-out) <(nl File-Reference)
uniq
echo 123 | tee >(tr 1 a)  | tr 1 b
hostname -a -l mydomain.com | sed -n '/;; ANSWER/{n;N;p;q}'
diff -rq dir1 dir2 | grep 'Only in dir1/'
diff -rq /path/to/folder1 /path/to/folder2
diff  --brief --recursive dir1/ dir2/
diff -q dir1 dir2
diff -qr dir_one dir_two | sort
diff -rqyl folder1 folder2 --exclude=node_modules
diff -arq folder1 folder2
echo $(basename $(readlink -nf $0))
head -$N file | tail -1 | tr ',' '\n'
history | awk '{print $2}' | awk 'BEGIN {FS=|}{print $1}' | sort | uniq -c | sort -n | tail | sort -nr
awk '{print $2}' < file.txt | paste -s -d, -
cut -d' ' -f5 file | paste -d',' -s
who am i|awk '{ print $5}'
host `hostname` | awk '{print $4}'
hostname  -I
hostname  -I | awk -F  '{print $1}'
hostname  -I | cut -f1 -d' '
hostname -I | awk '{print $1}'
hostname -i
hostname -I
md5sum /path/to/destination/file
ps -u $(whoami) | grep firefox | awk '{printf $1}'
readlink -f $path
ls -d -1 $PWD/**/*/* | nl
ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d '/'
ping -c 5 google.com | grep round-trip | cut -f 5 -d /
ping -c 4 www.stackoverflow.com | awk -F '/' 'END {print $5}'
ping -c 4 www.stackoverflow.com | sed '$!d;s|.*/\(0-9.*\)/.*|\1|'
ping -c 4 www.stackoverflow.com | tail -1| awk '{print $4}' | cut -d '/' -f 2
basename `pwd`
basename $(pwd)
basename `pwd`
echo $(basename $(pwd))
pwd | xargs basename
pwd | grep -o '^/*$'
basename $(echo a:b:c:d:e | tr ':' '/')
who -b | awk '{$1=; $2=; print $0}' | date -f -
cal 02 1956
seq 65 90 | awk '{printf(%c,$1)}'
echo $b | grep -o $a | tr -d '\n'
echo $b | grep --only-matching $a | xargs | tr --delete ' '
zcat $file | awk '{print NF}' | head
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
gunzip -l file.zip
sed 's/\n//' file
nl -b a file | sort -k1,1nr | sed '1, 4 d' | sort -k1,1n | sed 's/^ *0-9*\t//'
tail -n +2 $FILE
cat ${SPOOL_FILE}                   | tee -a ${LOG_FILE}
cat /tmp/nums | addnums
cat Little_Commas.TXT
nl file | sort -nr | cut -b8-
echo `sed -e 's/$/\ |\ /g' file`
cat filename
tail -n +2 foo.txt
cat my_script.py
cat n
cat numbers.txt
cat order.txt
cat somefile | splitter 16224-16482
cat xx.sh
cat ~/.ssh/config
perl -ple '' `find . -name file*`
echo $(date):  $line
echo $(date) doing stuff
echo $(date +%H:%M:%S): done waiting. both jobs terminated on their own or via timeout; resuming script
echo The current default java is $(readlink --canonicalize `which java`)
echo $PWD | sed 's!.*/!!'
tree
tree -p
tree -s
tree -D
ps -p $$ | tail -1 | awk '{print $NF}'
ps | tail -n 4 | sed -E '2,$d;s/.* (.*)/\1/'
echo `whoami` `stat -c %i /home`
who -m | awk '{print $1;}'
cat /var/spool/mail/`whoami`
getent passwd `whoami` | cut -d : -f 5
echo $(pwd)/$(basename $1)
echo pwd: `pwd`
pwd -P
echo -n $(pwd)
echo `date` `hostname`
echo `date +%a %x %X` `hostname`
date ; read -t 10 -p Hit ENTER or wait ten seconds ; echo ; date
date --date='1 days ago' '+%a'
date -d $(date -d 2 months +%Y-%m-1) -1 day +%a
diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/<>/{printf $2}'
echo dirname/readlink: $(dirname $(readlink -f $0))
dirname `pwd -P`
dirname `readlink -e relative/path/to/file`
echo $(dirname $(readlink -m $BASH_SOURCE))
mount | tail -1 | sed 's/^.* on \(.*\) (^)*)$/\1/'
history
cat text1;text2;text3 | sed -e 's/ /\n/g'
cat `find whatever`
cat $(which f)
cat `which f`
tree --du -h -L 2
df -P file/goes/here | tail -1 | cut -d' ' -f 1
df | grep /dev/disk0s2
file $(readlink -f $(type -p rename))
ls -1 | tr '\n' ','
ls -1 | tr '\n' ',' | sed 's/,$/\n/'
ls | sed '$!s/$/,/' | tr -d '\n'
ls -1b | tr '\n' ';'
ls -m | tr -d ' ' | tr ',' ';'
tree --help 2>&1 | head -n2
tree --help |& head -n2
git log --pretty=format: --name-only | grep .cs$ | sort | uniq -c | sort -rg | head -20
cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1
cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32
cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32
sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-
zcat $line | head -n5
awk -F, '{ if (NR == 1)print}{if($3 == f)print}' input | column -t -s,
head -n 1 filename | od -c
seq 1 10000 | head -1
head -1 <(sort set)
od --read-bytes=2 my_driver
sed 's/\(^ *\) /\1\n/' input | fold -w 100
finger $USER |head -n1 |cut -d : -f3
finger `id -un` | head -1 | cut -d: -f3-
ls `pwd`/file.txt
xargs -n 1 -I '{}' find $(pwd) -type f -inum '{}' -print
which cc
which gcc
which rails
which lshw
tree -fi
echo $(readlink -f /dev/disk/by-uuid/$1) is mounted
echo $(readlink -f /dev/disk/by-uuid/$1) is not mounted
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet -i identity_file machine.example.org gcc -dumpversion
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'
echo $NAME | cut -d'.' -f2-
cat files.txt | xargs du -c | tail -1
df --total -BT | tail -n 1
tree --help
split --help
echo Hello world | od -t x1 -t c
finger $username | awk '/^Directory/ {print $2}'
finger $USER_NAME | grep Directory | expand | cut -d ' ' -f 2
hostname
ping -c 2 -n 127.0.0.1 | awk -F' =' -v OFS='\t' 'NR>1 { print $6, $10 }'
echo hello world | tee  >(awk '{print $2, $1}')
echo hello world | tee /dev/tty | awk '{print $2, $1}'
cat /proc/config.gz | gunzip
history | tail
history | tail -10
history | tail -n 10
tail great-big-file.log
tail -f /var/log/syslog
tail /var/log/syslog
tail -n 1000 /var/spool/cron/*
history | tail -1 | awk '{print $1}'
sed 's/^/./' | rev | cut -d. -f1  | rev
tail -1 $file1 | tee -a $file2
tail -1 <(sort set)
mount | tail -1 | sed 's/ on .* (^)*)$//'
echo Your string here| tr ' ' '\n' | tail -n1
echo a b c d e | tr ' ' '\n' | tail -1
awk '{print $NF}' file.txt | paste -sd, | sed 's/,/, /g'
nl -b a <filename> | grep <phrase> | awk '{ print $1 }'
uniq -c | sort -n | tail -n1
cat table.txt | awk '{print $1}' | sort | uniq  | xargs -i grep {} table.txt
join -v 2 index <(nl strings)
join <(sort index) <(nl strings | sort -b)
who | awk '{print $3   $4  $1}' | sort | head -1
perl -ne 'print ($l = $_) if (length > length($l));' filename | tail -1
ping google.com -n 10 | awk '/Minimum =/ { sub(,,,$3); print $3 }'
ping google.com -n 10 | grep Minimum | awk '{print $3}' | sed s/,//
ls -1tr * | tail -1
grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1
mount | tail -1 | sed -e s/^^/*\(.*\) type .*$/\1/g
diff  --brief --recursive dir1/ dir2/
cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1
sudo find . -xdev -type f | cut -d / -f 2 | sort | uniq -c | sort -n
wc -l file.txt | cut -f1 -d 
ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { printf sent:%d received:%d loss:%d%%\n, sent, received, loss }'
history | cut -d' ' -f4- | sed 's/^ \(.*$\)/\1/g'
history | sed 's/^ *0-9\+ *//'
history|awk '{$1=;print substr($0,2)}'
echo `pwd`/`dirname $0`
mount | sed -n -e s/\/\/mynetaddr on \(^ *\).*$/\1/p
echo <(true)
ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)'
echo `pwd -P`
ping -c4 www.google.com | awk '/---/,0'
ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }' | cut -d'=' -f2
ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }'
echo $(dirname $(readlink -e $F))/$(basename $F)
ls -l | head -2 | tail -1
ls -l | tail -n +2 | head -n1
tr -s ' ' | cut -d ' ' -f 2
comm -23 <(command_which_generate_N|sort) <(command_which_generate_M|sort)
tar tf nginx-1.0.0.tar.gz | xargs dirname | sort | uniq
finger | cut -d ' ' -f1 | sort -u
finger | cut -d ' ' -f1 | sort -u | grep -iv login
finger | tail -n +2 | awk '{ print $1 }' | sort | uniq
who |grep -i admin |cut -c10-20
grep -rl needle text my_folder | tr '\n' '\0' | xargs -r -0 file | grep -e ':^:*text^:*$' | grep -v -e 'executable'
who -b
ping 8.8.8.8 | awk -F=  '{if($10>50) {cmd=date; cmd | getline dt; close(cmd) ; print $10, dt}}'
ping 8.8.8.8 | awk '{split($7,a,=.);if (a2>58) print a2, strftime()}'
history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head
history | awk '{print $2}' | awk 'BEGIN {FS=|}{print $1}' | sort | uniq -c | sort -nr | head
cat files.txt | xargs du -c | tail -1 | awk '{print $1}'
echo $(cat /proc/$$/cmdline)
nl -n ln | sort -u -k 2| sort -k 1n | cut -f 2-
echo `whoami`
whoami
who -m | awk '{print $1}'
seq -f 'some line %g' 500 | nl | sort -R | cut -f2- | head -3
time cut -f50000000 -d$'\n' myfile.ascii
date +%T
df | tail -n +2 | tr -s ' ' | cut -d ' ' -f 2 | paste -s -d+ | bc
readlink `pwd`
df -T $dir | tail -1 | awk '{print $2;}'
comm -23 <(sort file1) <(sort file2)|grep -f - file1
sort file_a file_b|uniq -u
comm -3 <(sort set1) <(sort set2) | sed 's/\t//g'
comm -23 file1 file2
comm -2 -3 A B | comm -2 -3 - C | comm -2 -3 - D
comm -23 a.txt b.txt
comm -3 a b
comm -23 second-file-sorted.txt first-file-sorted.txt
comm -23 File 1 File 2
comm -2 -3 <(sort A.txt) <(sort B.txt)
comm -23 <(sort -u A.txt) <(sort B.txt)
comm -3 a b | sed 's/^\t//'
comm -23 a b
comm -13 a b
comm -2 -3 f1 f2
cut -d' ' -f1 file2 | comm -13 - file1
comm -13 first.txt second.txt
who -su | sort | uniq | column
who | awk '{print $1}' | xargs -n 1 id
yes $OPTARG | head -$opt
column <<< $(printf '%s\n' $module)
echo $modules | column -t | fold | column -t
column -x <<< $(printf '%s\n' $module)
echo $opt | tr -d ''
ps axu | grep jboss | tr -s ' ' | cut -d' ' -f5
date '+%Y' --date='222 days ago'
diff -q $file ${file/${dir1}/${dir2}}
diff -q <(sort set1) <(sort set2)
diff -q <(sort set1 | uniq) <(sort set2 | uniq)
diff --brief -r dir1/ dir2/
diff -arq folder1 folder2
diff --brief -Nr dir1/ dir2/
diff -qr /tmp/dir1/ /tmp/dir2/
diff PATH1/ PATH2/ -rq -X file1
diff -qr dir1 dir2
diff -qr dir1/ dir2/
diff -rq dir1 dir2
diff -qr dir_one dir_two | sort
diff -rqyl folder1 folder2 --exclude=node_modules
pwd | tr '/' '\n'
date -j -v-1d
date +%Y:%m:%d -d 1 day ago
date +%Y:%m:%d -d yesterday
date -d -1 days +%a %d/%m/%Y
echo $NEWFILE | sudo tee /etc/apt/sources.list
head -<$LINENUM + 10> filename | tail -20
du -ksh * | sort -n -r
du -ks * | sort -n -r
ps -aux | grep ^username | awk '{print $2}' | xargs pstree
tr -dc '1-65000' </dev/urandom | head -c N
sort --random-sort $FILE | head -n 1
head -$((${RANDOM} % `wc -l < file` + 1)) file | tail -1
grep -m1 -ao '0-9' /dev/urandom | sed s/0/10/ | head -n1
head -200 /dev/urandom |cksum | cut -f1 -d   | awk '{print $1%63000+2001}'
seq 2000 65000 | sort -R | head -n 1
dig google.com ns | awk 'p{print $5}/^;; ANSWER SECTION:$/{p=1}/^$/{p=0}'
cal -h | cut -c19-20
cal -h | cut -c 4-17
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n ,
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/'
yum list zsh
cal | sed -e 's/^.\{3\}//' -e 's/^\(.\{15\}\).\{3\}$/\1/'
cal -h|sed -r s/\b$(date|cut -d' ' -f3)\b/*/
cal
cal $month $year | awk -v day=$day -f cal.awk
cal April 2012 | tee t | more
cal 2 1900
paste <(cal 6 2009) <(cal 6 2010)
pwd | awk -F/ '{print $NF}'
pwd | grep -o \w*-*$
pwd | sed 's#.*/##'
cal -h
cal 01 2015 | sed -n '1,2b;/^.\{6\} \{0,1\}\(0-9\{1,2\}\) .*/ {s//0\1/;s/.*\(0-9\{2\}\)$/\1/p;q;}'
cal $m $y | sed -e '1,2d' -e 's/^/ /' -e s/ \(0-9\)/ $m\/\1/g
cal | awk 'NR==2 {for (i=1;i<=NF;i++) {sub(/ /,,$i);a$i=i}} NR>2 {if ($aTu~/0-9/) {printf %02d\n,$aTu;exit}}' FIELDWIDTHS=3 3 3 3 3 3 3 3
cal | awk 'NR>2 && NF>4 {printf %02d\n,$(NF-4);exit}'
cal | awk 'NR>2{Sfields=7-NF; if (Sfields == 0 ) {printf %02d\n,$3;exit}}'
echo $(($(date +%s) / 60 / 60 / 24))
echo `date +%s`/86400 | bc
$(dirname $0)
`dirname $0`
\time -f%e sleep 1
echo <(true)
head -c -N file.txt
dirname `find / -name ssh | grep bin | head -1`
echo dirname: $(dirname $mystring)
echo dirname: `dirname $0`
echo dirname: `dirname $0`
ls $PWD/cat.wav
ls -1 | awk  -vpath=$PWD/ '{print path$1}'
ls -d $PWD/*
ls -d -1 $PWD/**
ls -d -1 $PWD/*.*
pstree -p
date -d @$(git log -n1 --format=%at) +%Y%m%d%H%M
groups                                        //take a look at the groups and see
groups el                                     //see that el is part of www-data
cp --help
yum --help
yum -h
pstree
echo $(ifconfig)
w -h $euids
ls -1t | head -1
wc -l *.c
ldd /bin/* /usr/bin/* | sed -e '/^^\t/ d; s/^\t\(.* => \)\?\(^ *\) (.*/\2/g' | sort | uniq -c
ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS
echo groups:  $(groups myuser | sed -e 's/.\+\s\+:\s\+\(.\+\)/\1/g' -e 's/\(\s\+\)/, /g') 
ls -a | tee output.file
ifconfig $(netstat -rn | grep -E ^default|^0.0.0.0 | head -1 | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | grep -Eo '(0-9*\.){3}0-9*'
ifconfig `ip route | grep default | head -1 | sed 's/\(.*dev \)\(a-z0-9*\)\(.*\)/\2/g'` | grep -oE \b(0-9{1,3}\.){3}0-9{1,3}\b | head -1
w | sort
ls -l -- $dir/$file
ls -l ${0}
echo 'ls -hal /root/ > /root/test.out' | sudo bash
ls -hal /root/ > /root/test.out
ls -hal /root/ | sudo tee /root/test.out
sudo ls -hal /root/ | sudo bash -c cat > /root/test.out
sudo ls -hal /root/ | sudo dd of=/root/test.out
sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null
ls -lb
$ ls -Fltr ./my dir ./anotherdir
ls -ld /tmp /tnt | sed 's/^.*$/<-- & --->/'
ls -ld /tmp /tnt
$ ls -Fltr $var
ls -al file.ext
$ ls -Fltr *
$ ls -Fltr
ps -e -orss=,args= | sort -nr | head
ls |& tee files.txt
ls -lR / | tee -a output.file
ls -lR / | tee output.file
echo The script you are running has basename `basename $0`, dirname `dirname $0`
ls -l /proc/$$/exe | sed 's%.*/%%'
mktemp -u
yum repolist | tail -n +3 | grep -v 'repolist:' | cut -f1 -d' '
wc *.py
cal $(date +%m %Y) | awk 'NF {DAYS = $NF}; END {print DAYS}'
echo Number files in SEARCH PATH with EXTENSION: $(ls -1 ${SEARCHPATH}/*.${EXTENSION} | wc -l)
cat $file | cut -c 1-10
./script.sh | sort -u
./yourscript.ksh | sort | uniq
echo $COMMANDS$'\n'$ALIASES | sort -u
groups $(who | cut -d' ' -f 1)
echo this dir: `dirname $BASH_SOURCE`
dirname /path/to/vm.vmwarevm/vm.vmx
echo /path/to/vm.vmwarevm/vm.vmx | xargs dirname
$(dirname $(readlink -e ../../../../etc/passwd))
$(dirname $(readlink -e ../../../../etc/passwd))
dirname `readlink -e relative/path/to/file`
pstree -p pid ...
ps -aux |  awk '/^username/{print $2}' | xargs pstree
pstree -A -s $$
pstree $(pgrep -fn bash)
pstree -ap `pidof cron`
pstree -sp $$
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | less
pstree -s $ID
pstree -aAp $(ps -ejH | awk -v v1=$mypid '$1==v1 {print $3}')
pstree -p $$
pstree -s $$
pstree -p user
pstree -apl
pstree -a $PID
pstree | grep MDSImporte | cut -c 1-${WIDTH}
pstree | grep MDSImporte | less -SEX
sort --random-sort $FILE | head -n 1
$(readlink -f $(dirname $0))
grep -n  myfile.txt | sort -r -n | gawk -F : { print $2 }
pstree -a pid
echo `ls` `cal`
dig +noall +answer soa yahoo.com | awk '{sub(/.$/,,$5);print $5}'
shopt -p globstar
du -h --max-depth=1 . | sort -n -r
w -h  | cut -d' ' -f1 | sort | uniq
echo 0 1 * * * /root/test.sh | tee -a /var/spool/cron/root
ifconfig | grep HW
grep -r texthere .
ls -1 | (for ((x=0;x<N;x++)) ; do read ; done ; head -n1)
ls -1 | tail -n +N | head -n1
watch -n1 'ps x -o %p %r %c | grep test '
echo dirname/readlink: $(dirname $(readlink -f $0))
cal | awk '$6{date=$6}END{print date}'
echo $(dirname $(readlink -e $F))/$(basename $F)
head -c N file.txt
cat filename | awk '{print length, $0}'|sort -nr|head -1
perl -ne 'print length().  line $.  $_' myfile | sort -nr | head -n 1
echo `cat $FILE | head -n 100 | wc -c` / 1024 | bc -l
ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10
sudo du -hDaxd1 /var | sort -h | tail -n10
history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head
history | awk '{print $2}' | awk 'BEGIN {FS=|}{print $1}' | sort | uniq -c | sort -nr | head
rgrep . | wc -l
cat `find . -name *.php` | wc -l
w | awk '{print $1}' | xargs -I '{}' id '{}'
cal | awk 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print ai}' FIELDWIDTHS=3 3 3 3 3 3 3 3 date=31
cal | awk -v date=31 'NR == 2 { split($0, header) } NR > 2 { for (i = 1; i <= NF; ++i) if ($i == date) { print headerNR == 3 ? i + 7 - NF : i; exit } }'
cal | awk -v date=31 -v FIELDWIDTHS=3 3 3 3 3 3 3 3 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print ai}'
date --date=222 days ago +%d
date --date=222 days ago +%Y
date -d yesterday 13:00 '+%Y-%m-%d'
date --date yesterday +%a %d/%m/%Y
grep -v # -R  /var/spool/cron/tabs
grep -U -l $'\015' $(fd)
read REPLY\?This is the question I want to ask?
crontab
pr -n 'find . -type f -mtime -1 -print'|lpr
pushd `pwd`
pushd $(dirname `which $@`)
pushd $(/bin/pwd)
pushd $PWD
pushd .
pushd ${line/#\~/$HOME};
pushd $(dirname $0)
MY_DIR=$(dirname $(readlink -f $0))
TTY=$(tty) WHOLINE=$(who | grep ${TTY#/dev/})
bg %1 puts the job in the background
echo -n $(pwd) | pbcopy
printf $(pwd) | pbcopy
pwd | tr -d '\n' | pbcopy
getent `uname -n`
dig -t SRV _kerberos._udp.foo.com
bind -q complete
grep -q tar archive <<<$filetype
set -u
set -eu
ldd /bin/* /usr/bin/* ... | sed -e '/^^\t/ d; s/^\t\(.* => \)\?\(^ *\) (.*/\2/g' | sort | uniq -c
head -c 10 $0 | tr '\000-\377' '#'
read -rep $'Please Enter a Message:\n' message
read
read -a arr
read -a first
read XPID XUSERID XPRIORITY XVIRTUAL XRESIDENT XSHARED XSTATE XCPU XMEM XTIME XCOMMAND
read VARNAME
read -e -p Do that? Y,n -i Y input
read -e -p ${myprompt@P}
read -e -p '> ' $1
read -p $1  yn
read -p Do you wish to install this program? yn
read -s ENTERED_PASSWORD
read PASSWORD
read -p $*
read -p $1 (yes or No): 
read -p > $line (Press Enter to continue)
read -p Press Enter key to release lock...
read -p Password:  -s SSHPASS
read -r -p $(echo $@) ? y/N  YESNO
read -r a
read -r ans
read -p 'BGG enter something:' -r data
read dir
read -s foobar
read -p  Again? Y/n  i
read -p $(echo -e 'Please Enter a Message: \n\b') message
read -p `echo -e '\nPlease Enter\na Message: '` message
read -p Please Enter a Message: `echo $'\n> '` message
read -p `echo -e 'Please Enter a Message: \n\b'` message
read -p Please Enter a Message: $cr message
read -s password
read -s -p Password:  password
read -p Are you sure you want to continue? <y/N>  prompt
read -r -p ${1:-Are you sure? y/N}  response
read -r -p Are you sure? y/N  response
read -r -p About to delete all items from history that match \$param\. Are you sure? y/N  response
read -p  Enter Here :  text
read -t 0.1 -p This will be sent to stderr
read -t 10
read -p <Your Friendly Message here> : y/n/cancel CONDITION;
read -p Are you alright? (y/n)  RESP
read -p Are you sure you wish to continue?
read -r -p Are you sure? Y/n response
read -p Continue (y/n)? CONT
read -p Continue (y/n)? choice
read -p $'Enter your age:\n'
read -p Enter your choice:  choice
read -e -i yes -p Enter your choice:  choice
read -p Is this a good question (y/n)?  answer
read -e
read -p `pwd -P`\$  _command
read -p command :  input_cmd
read -e -p Enter the path to the file:  -i /usr/local/etc/ FILEPATH
read -e -p Enter your choice:  choice
read -e -p My prompt:  varname
read -rn1
y=$(bash -c read -n 1 c; echo \$c)
read -sk
read -r -n 1 -p ${1:-Continue?} y/n:  REPLY
read -n1 ans
read -n1 -p Do that? y,n doit
read -rp $'Are you sure (Y/n) : ' -ei $'Y' key
read -n1 -r -p Press any key to continue... key
read -t5 -n1 -r -p 'Press any key in the next five seconds...' key
read -n1 -p Pick a letter to run a command A, B, or C for more info  runCommand
read -d'' -s -n1
read -p Are you sure?  -n 1 -r
read -p Are you sure? (y/n)  -n 1
read -t 3 -n 1 -p Is this a good question (y/n)?  answer
read -n 1 -p Is this a good question (y/n)?  answer
read line
parec --raw --channels=1 --latency=2 | od -N2 -td2 | head -n1 | cut -d' ' -f2- | tr -d ' '
IFS=$'\n' read -d '' -ra files < <(find /foo -name *.txt)
source $( dirname $( which $0 ) )/lib/B
awk 'FNR==NR { array$1++; next } { n = asorti(array,sort); for (i=1; i<=n; i++) if (sorti <= $1 + 10 && sorti >= $1 - 10 && $1 != sorti) line = (line ? line , : line) sorti; print $0, line; line =  }' file.txt{,} | column -t
od -vtx1 /dev/midi1
read -u 4 line
dig TXT -f 1.txt
read -n 1 -r
read -n1
read -n 1 c
tr -cs ':space:'
read -r -d $'\0' f2
read -d '' line
read -r -d $'\0'
read -r -d $'\0' content <<< ${some_variable}
read -n10 -e VAR
read -a to_sort <<< $1
read sh_lock_lastPID < $sh_lock_file
du -s $i | read k
history -r $HISTFILE     #Alternative: exec bash
history -r
cat /dev/input/mice | od -t x1 -w3
od -A n -N 2 -t u2 /dev/urandom
date --date yesterday +%a %d/%m/%Y | read dt
bzip2 -dc input1.vcf.bz2 input2.vcf.bz2 | awk 'FNR==NR { array$1,$2=$8; next } ($1,$2) in array { print $0 ; array$1,$2 }'
screen -dr 14313
screen -d -R -S test
screen -r foo
screen -d -r remote-command
cat
cat -n
cat f.html | grep -o \
screen -R -O -t mysession -S mysession -f
screen -x screen id
inarray=$(echo ${haystack@} | grep -o needle | wc -w)
chmod -R a+rX *
chmod -R +xr directory
chmod -Rf u+w /path/to/git/repo/objects
rm -fR ${TMP}/;
rsync -nvraL test/a/ test/dest --exclude=/b/c/d
mount --rbind /dev /var/snmp3/dev
mount --rbind /sys /var/snmp3/sys
mount --rbind /something /new_something
sudo chown -R $(whoami):admin /usr/local
sudo chmod -R 777 theDirectory/
sudo chown $(whoami):$(whoami) /usr/local/rvm/gems/ruby-2.0.0-p481/ -R
chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR
chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR/
chown -R tomcat7:tomcat7 webapps temp logs work conf
chown -R user_name folder
chown -R $1:httpd *
chown amzadm.root -R /usr/lib/python2.6/site-packages/
chown amzadm.root -R /usr/lib/python2.6/site-packages/awscli/
chown -R tomcat6 webapps temp logs work conf
chown -R www-data /var/www/.gnome2 /var/www/.config /var/www/.config/inkscape
sudo chown -R $(whoami) /usr/lib/node_modules/
sudo chown -R `whoami` /usr/local
sudo chown -R `whoami` /usr/local/lib
sudo chown -R `whoami` /usr/local/lib/node_modules
sudo chown -R $(whoami) ~/.npm
sudo chown -R `whoami` ~/.npm
chown -R :daemon /tmp/php_session
chown -R :lighttpd /var/lib/php/session
sudo chown -R :laravel ./bootstrap/cache
sudo chown -R :laravel ./storage
chown -R your_user_name.your_user_name 775 /home/el/svnworkspace
chown -R antoniod:antoniod /opt/antoniod/
chown -R antoniod:antoniod /var/antoniod-data/
chown -R your_user_name.your_user_name 775 /workspace
chown user1:user1 -R subdir1
chown user2:user2 -R subdir2
chown user3:user3 -R subdir3
chown dev_user.dev_user -R ~/.ssh/
chown nginx:nginx /your/directory/to/fuel/ -R
chown -R owner:owner public_html
chown -R andrewr:andrewr *
ls | xargs chown -R apache:apache
sudo chown -R www-data:www-data /var/www
sudo chown -R test /home/test
sudo chown -R $USER /usr/local/lib/node_modules
chown ftpuser testproject/ -R
chown -R nobody upload_directory
sudo chown -R $USER ~/tmp
sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
sudo chown -R  $USER:$GROUP /var/lib/cassandra
sudo chown -R  $USER:$GROUP /var/log/cassandra
chown -R ${JBOSS_USER}: $JBOSS_LOG_DIR
sudo chown -R ec2-user:apache /vol/html
chown -R user:www-data yourprojectfoldername
ls -d * | grep -v foo | xargs -d \n chown -R Camsoft
sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates
chown -R root:root /var/cache/jenkins
chown -R root:root /var/lib/jenkins
chown -R root:root /var/log/jenkins
chgrp -R www-data /var/tmp/jinfo
chgrp -R fancyhomepage /home/secondacc/public_html/community/
chgrp -R apache_user files
chgrp -R my_group files
chgrp -R project_dev /home/user1/project/dev
chgrp -R git .git
chgrp -R shared_group /git/our_repos
chgrp -R GROUP /path/to/repo
chgrp -R repogroup .
chgrp -R admin *
chgrp -R git ./
chgrp -R $GROUP $PATH_TO_OUTPUT_FOLDER
chgrp --recursive website public_html
gzip -kr .
cp -R $1 $2
cp -Rp $appname.app Payload/
cp -r $1 $2
cp -r ../include/gtest ~/usr/gtest/include/
cp -R SRCFOLDER DESTFOLDER/
sudo cp -a include/gtest /usr/include
cp -nr src_dir dest_dir
cp -rs /mnt/usr/lib /usr/
cp -rv `ls -A | grep -vE dirToExclude|targetDir` targetDir
cp -r `ls -A | grep -v c` $HOME/
cp -Rvn /source/path/* /destination/path/
yes | cp -rf /zzz/zzz/* /xxx/xxx
cp * .hiddendir -R
rsync -rvv /path/to/data/myappdata/*.txt user@host:/remote/path/to/data/myappdata/
rsync -u -r --delete dir_a dir_b
rsync -u -r --delete dir_b dir_a
rsync --recursive emptydir/ destination/newdir
rsync -rcn --out-format=%n old/ new/
rsync -Prt --size-only original_dir copy_dir
rsync -rvc --delete --size-only --dry-run source dir target dir
scp -r prod:/path/foo /home/user/Desktop
scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/
rsync -rvv *.txt user@remote.machine:/tmp/newdir/
rsync --recursive --exclude 'foo' * $other
scp -Bpqr /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/*ela*L1*TE* dalvarado@localhost:/var/www/html/sbo/2010/teacher/ela/level1
rsync -r --verbose --exclude 'exclude_pattern' ./* /to/where/
rsync -zvr --exclude=* --include=*.sh --include=*/ $from root@$host:/home/tmp/
rsync --recursive --prune-empty-dirs --include=*.txt --filter=-! */ dir_1 copy_of_dir_1
scp -r A D anotherhost:/path/to/target/directory
rsync -rvv /path/to/data/myappdata user@host:/remote/path/to/data/myappdata
rsync -rvv --recursive /path/to/data/myappdata user@host:/remote/path/to/data/newdirname
scp -r myServer:/something
cp -Rvn /source/path/* /destination/path/
scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path
rsync -auv -e ssh --progress sourcedir/ user@dest.com:/dest/dir/
cat searches.txt| xargs -I {} -d, -n 1 grep  -r {}
grep -rnw pattern
fgrep --include='STATUS.txt' -rl 'OPEN' | xargs -L 1 dirname
grep -r OPEN * | awk '{split($1, path, :); print path1}' | xargs -I{} dirname {}
sudo find . \( -name *.log -o -name *.trc \) -mtime -1 | sudo xargs ls -ltr --color | less -R
grep -inr Text folder/to/be/searched/
grep -rnw `pwd` -e pattern
grep class foo **/*.c
grep -r --include *.txt texthere .
egrep -R word-1|word-2” directory-path
egrep -w -R word-1|word-2” directory-path
grep -r -H text string to search” directory-path
grep option text string to search” directory-path
grep -insr pattern *
grep --include=*.xxx -nRHI my Text to grep *
tree -F coreutils-8.9 | sed -r 's|── (.*)/$|── DIR: \1|'
mount -v | grep smbfs | awk '{print $3}' | xargs ls -lsR
diff -rq /dir1 /dir2 | grep -E ^Only in /dir1.* | sed -n 's/://p' | awk '{print $3/$4}'
tree
ls **/*.py **/*.html
stat --printf=%y %n\n $(ls -tr find * -type f))
ls -ldt find .)
ls -ld find .)
mount --make-rprivate /
rsync -rvz --progress --remove-sent-files ./dir user@host:/path
rsync -rvz -e 'ssh -p 2222' --progress --remove-sent-files ./dir user@host:/path
tree -d
tree .
tree -a .
tree $absolute/path/of/your/dir
grep -RIl  .
yes n | rm -r *.txt
yes | rm -r *.txt
rm -r $TMPDIR
rm -r classes
rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*
rm **/*.pyc
rm `find . -name \*.pyc`
rm `find ./ -name '.DS_Store'` -rf
rm /var/www/html/**/_* /var/www/html/**/.DS_Store
grep -r string here * | tee >(wc -l)
grep -r -l 'searchtext' . | sort | uniq | xargs perl -e s/matchtext/replacetext/ -pi
grep -Ri pattern * | awk '{if($1 != Binary) print $0}'
chmod -R 777 ../tools
chmod -R 755 /directory
chmod 755 /folder -R
sudo chmod 755 -R /opt/lampp/htdocs
sudo chmod 755 -R /whatever/your/directory/is
sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs
zcat -r /some/dir/here | grep blah
xxx |& tee /dev/null
exec > >(tee -a $HOME/logfile) 2>&1
bunzip2 -c compressedfile.bz2 | yourfilterprogram
{ time find / &>/dev/null; } 2>&1 | grep real
{ time ls -l >/dev/null; } |& grep real
{ time find / 2>/dev/null; } 2>time.txt
date -j -f %a %b %d %H:%M:%S %Y %z Sat Aug 09 13:37:14 2014 +1100
mount / -o remount,rw
mount -n -o remount /
mount -o remount,rw -t yaffs2 /dev/block/mtdblock3 /system
mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system
sudo mount -o remount -o exec /dev/sda7
mount -o remount,size=40G /dev/shm
mount -o rw,remount /dev/stl12 /system
mount -o ro,remount /dev/stl12 /system
sudo mount -i -o remount,suid /home/evgeny
mount /media/Working/ -oremount,umask=000
mount /mnt/mountpoint -oremount,ro
mount /mnt/mountpoint -oremount,rw
mount -o remount,ro /path/to/chroot/jail/usr/bin
mount -o remount,ro /system
mount -o remount,rw /system
mount -o rw,remount /system
mount -o remount,ro /system
mount -n -o remount -t extX /dev/hdaX /
mount --bind point mnt
mount -o rw,remount -t rfs /dev/stl12 /system
mount -o rw,remount -t yaffs2 /dev/block/mtdblk4 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk4 /system
mount --bind olddir newdir
mount -oremount /
mount /outside /inside -o bind
mount --bind /usr/bin /path/to/chroot/jail/usr/bin
mount -o rw,remount -t rootfs /
comment=$(cat /proc/sys/kernel/random/uuid | sed 's/\-//g')
echo -e test1\ntest2\ntest3 |tr -d '\n' |grep test1.*test3
cat infile | sed 's/\r$//' | od -c
rename _dbg.txt .txt **/*dbg*
bind -r '\e'
machnum=$(hostname | sed 's/^machine//')
rev input | uniq -f1 | rev
rm `find tmp -maxdepth 1 -name '*.mp3'`
cat data.csv | rev | cut -d, -f-5 | rev
tr -cd ;0-9
yes | /bin/rm -i *
/usr/bin/find /home/user/Series/ -iname *sample* -exec rm {} \;
tr -d ' '
diff -rq /dir1 /dir2 | grep -E ^Only in /dir1.* | sed -n 's/://p' | awk '{print $3/$4}' xargs -I {} rm -r {}
cat infile.txt | tr -d :space: | fold -80
sed '/^$/d;s/ /\//g' struct.txt | xargs mkdir -p
finger | colrm 34 39
basename /home/jsmith/base.wiki .wiki
path=$(basename $path)
awk '{print(NR\t$0)}' file_name | sort -t$'\t' -k2,2 | uniq --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'
awk '{print(NR\t$0)}' file_name | sort -t$'\t' -k2,2 | uniq -u --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'
nl -w 8 $infile | sort -k2 -u | sort -n | cut -f2
variable=$(echo $variable | tr ' ' '\n' | nl | sort -u -k2 | sort -n | cut -f2-)
sort | uniq -u | xargs -r rm
rmdir --ignore-fail-on-non-empty newBaseDir/Data/NewDataCopy
rm -ri *
rm -rf *
echo '1/2 3 (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/^0-9/ /g' | column -t
echo $filename | rev | cut -f 2- -d '.' | rev
ssh-keygen -f /root/.ssh/known_hosts -R gitlab.site.org
compaudit | xargs chmod g-w
echo t1_t2_t3_tn1_tn2.sh | rev | cut -d_ -f3- | rev
awk '{gsub(/^ \t+| \t+$/,); print;}' in.txt | hexdump -C | less
var=$(hg st -R $path | sed s/\(^ *\| *\$\)//g)
echo    wordA wordB wordC    | sed -e 's/^ \t*//' | sed -e 's/ \t*$//'
echo $string | sed -e 's/^ \t*//' | sed -e 's/ \t*$//'
grep -v 'kpt#' data.txt | nl -nln
paste -sd  file.txt
tr -d '\n' < yourfile.txt
./series.bc | tr -d '\n' | sed 's.\\..g'
echo aa | wc -l | tr -d ' '
DIR_PATH=`readlink -f ${the_stuff_you_test}`
rename 's/^123_//' *.txt
sudo rm -rf bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node
rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1
history | cut -c 8-
cat $filename | rev | cut -c 3- | rev
echo 987654321 | rev | cut -c 4- | rev
echo filename.gz     | sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-
sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-
tail -n 1 $file | wc -c | xargs -I {} truncate $file -s -{}
echo mpc-1.0.1.tar.gz | sed -r 's/\.:alnum:+\.:alnum:+$//'
echo $path | rev | cut -d'/' -f4- | rev
sed '/pattern to match/d' ./infile
echo | ssh-keygen -P ''
ssh-keygen -f ~/.ssh/id_rsa -P 
PATH=$(echo $PATH | tr : \n | grep -v $1 | tr \n :)
var=`hg st -R $path | sed -e 's/  *$//'`
perl -pe 's/((:\S*){3}):\S*/$1/g' file | column -t
sed -r 's/((:^: \t*){3}):^ \t*/\1/g' file | column -t
sudo rm /var/lib/mongodb/mongod.lock
rm -rf folderName
rm foo
rmdir latest
yum remove subversion
ls -t *.log | tail -$tailCount | xargs rm -f
nl -nrz -w10 -s\; input | sed -r 's/55//; s/(0-9{2})-(0-9{2})-(0-9{4})/\3\2\1/'
nl -nrz -w10 -s\; input | sed -E 's/55//; s/(0-9{2})-(0-9{2})-(0-9{4})/\3\2\1/'
unalias sudo
sudo yum clean all
ls -tp | grep -v '/' | tail -n +$1 | xargs -I {} rm -- {}
ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --
ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {}
ls -tQ | tail -n+4 | xargs rm
ls -tp | grep -v '/$' | tail -n +6 | xargs -d '\n' rm --
ls -C1 -t| awk 'NR>5'|xargs rm
ls -tr | head -n -5 | xargs rm
rm `ls -t | awk 'NR>5'`
rm -v *.bak
rm -f A*.pdf
sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules
rm -f *.pdf
ls | xargs rmdir
rmdir ed*
rmdir edi edw
rm -d symlink
rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy
ls -1|grep -v -e ddl -e docs| xargs rm -rf
rm junk1 junk2 junk3
rm $(<xaa)
rm -f ~/.android/adbkey ~/.android/adbkey.pub
finalName=$(basename -- $(dirname -- $path))
finalName=$(dirname ${path#*/})
echo 'test/90_2a5/Windows' | xargs dirname | xargs basename
unalias python
grep -v pattern filename > filename2; mv filename2 filename
brew unlink bash-completion
head -n -2 myfile.txt
tac file | sed -e '/./,$!d' | tac | sed -e '/./,$!d'
sudo mv /usr/bin/php /usr/bin/~php
mv Tux.png .Tux.png
mv blah1 blah1-new
mv blah2 blah2-new
mv fghfilea jklfilea
rename -v 's#/file##' v_{1,2,3}/file.txt
mv file0001.txt 1.txt
mv file001abc.txt abc1.txt
mv new old -b -S .old
mv new old -b
mv old tmp
mv original.filename new.original.filename
mv {,new.}original.filename
mv svnlog.py svnlog
mv -T www_new www
mv $file $(echo $file | rev | cut -f2- -d- | rev).pkg
mv $(readlink -f dirln) dir2
for f in `find -name '*company*'` ; do mv $f `echo $f | sed s/company/nemcompany/` ; done
rename 's/\.html$/\.txt/' *.html
for file in *.html; do mv $file ${file%.html}.txt; done
rename 's/_h.png/_half.png/' *.png
rename -f 'y/A-Z/a-z/' *
rename 'y/A-Z/a-z/' *
rename s/0000/000/ F0000*
rename 's/^fgh/jkl/' fgh*
for f in fgh*; do mv $f $(echo $f | sed 's/^fgh/jkl/g'); done
md5sum * | sed -e 's/\(^ *\) \(.*\(\..*\)\)$/mv -v \2 \1\3/e'
sudo mv edited_blah.tmp /etc/blah
mv file.txt.123456 $(ls file.txt.123456 | rev | cut -c8- | rev)
mv $1 `echo $1 | tr ':upper:' ':lower:'`
ls folder/*.html | xargs -I {} sh -c 'mv $1 folder/`basename $1 .html`.txt' - {}
ls *.html | xargs -I {} sh -c 'mv $1 `basename $1 .html`.txt' - {}
tmux movew -r
echo $(yes image.png | head -n10)
yes image.png | head -n10 | xargs echo
history | sed s/  / $UID /
echo a,b|sed 's/,/\r\n/'
cat $file | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
sed 's/,,/, ,/g;s/,,/, ,/g' data.csv | column -s, -t
awk '{gsub(/-/,0,$4);gsub(/-/,0,$5)}1' test.in | column -t
echo -e Testing\r\nTested_Hello_World | awk -v RS=_ '{ print $0; }' | od -a
echo -e Testing\r_Tested | awk -v RS=_ '{ print $0; }' | od -a
sed -i s/'dummyvalue'/$(hostname -I | head -n1 | awk '{print $1;}')/g filename
sort inputfile | uniq | sort -o inputfile
ln -f -s -T `readlink SomeLibrary | sed 's/version.old/version.new/'` SomeLibrary
tr  ' ' '-'
sudo find . -type f -exec sed -i 's/置換前/置換後/g' {} \;
sed -i.bak s#https.*\.com#$pub_url#g MyHTMLFile.html
removestr=$(echo $list | tr : \n | grep -m 1 ^$removepat\$)
sed s/,/\t/g filename.csv | less
echo bla@some.com;john@home.com | sed -e 's/;/\n/g'
sed -ibak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html
sed -i 's/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g' index.html
sed s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html | tee index.html
sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html
sed -i bak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html
cat input.txt | sed 's/string/longer_string/g' | column -t
awk -F, 'BEGIN {OFS = ,} {gsub(-(0-9.+), ( substr($3, 2) ), $3); print}' inputfile
sed -i ':a;N;$!ba;s/\n/,/g' test.txt
sed ':a;N;$!ba;s/\n/ /g'
sed 'x;G;1!h;s/\n/ /g;$!d'
sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g'
sed ':a;N;$!ba;s/\n/ /g' file
sed -z 's/\n/ /'g
sed -e '{:q;N;s/\n/ /g;t q}' file
tr -sc ':punct:' '\n'
cat log | tr -s :blank: |cut -d' ' -f 3-
ARGS=--ignore `echo ${TO_IGNORE@} | tr ' ' ','`
tr ':blank:' \\t
cat text.txt | tr -s ' ' | cut -d ' ' -f 4
echo $MOUNT_OPTS | tr , \\\n | grep '^acl$' -q
paste -sd: INPUT.txt
echo 1\n2\n3\n4\n5 | paste -s -d, /dev/stdin
grep -v '^$' YOURFILE | nl -s= -w99 | tr -s ' ' p
grep -o _foo_ <(paste -sd_ file) | tr -d '_'
tr -s '\t' < thefile.txt | tr '\t' ' ' > the_modified_copy.txt
sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`
history | sed 's/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//'
history | sed 's/^\( *0-9*\) */\1../'
df -k /tmp | tail -1 | awk '{print $4}'
df -k /tmp | tail -1 | tr -s ' ' | cut -d' ' -f4
df | grep /dev/disk0s2
df -k /example
df -k /tmp
df -h /dir/inner_dir/
df -k /dir/inner_dir/
df -k /some/dir
df -h .
df -k .
df -i $PWD
df -h path-to-file
df .
df -k .
df -h
df -ih
df $path_in_question | grep  $path_in_question$
df -Ph | column -t
df -Ph | perl -ne 'chomp; printf \n%-40s %8s %8s %8s %8s %-20s, split / +/, $_, 6 ; '
df -kt<type>
df -Ph
df -BG
df -k
df -P
df --total
df -i
df -i
df --total -BT | tail -n 1 | sed -E 's/total *(^ *).*/\1/'
df -m | awk '{ SUM += $2} END { print SUM/1024/1024TB }'
df -h /
df -H --total /
df --total -BT | tail -n 1
df --total -BT | tail -n 1
df --total | tail -n 1
df -H --total /
echo -e length(FOO_NO_EXTERNAL_SPACE)==$(echo -ne ${FOO_NO_EXTERNAL_SPACE} | wc -m)
echo -e length(FOO_NO_LEAD_SPACE)==$(echo -ne ${FOO_NO_LEAD_SPACE} | wc -m)
echo -e length(FOO_NO_TRAIL_SPACE)==$(echo -ne ${FOO_NO_TRAIL_SPACE} | wc -m)
echo -e length(FOO_NO_WHITESPACE)==$(echo -ne ${FOO_NO_WHITESPACE} | wc -m)
echo -e length(FOO)==$(echo -ne ${FOO} | wc -m)
grep ^core id /proc/cpuinfo | sort -u | wc -l
grep '^core id' /proc/cpuinfo |sort -u|wc -l
{ time sleep 1 ; } 2> time.txt
{ time sleep 1 2> sleep.stderr ; } 2> time.txt
time sleep 1
timestamp=`date --rfc-3339=seconds`
t1=$(date -u -d 1970.01.01-$string1 +%s)
TODAY=$(date  -d $(date +%F) +%s)
MOD_DATE1=$(date -d $MOD_DATE +%s)
dig @$ns $d A | grep $d | grep -v DiG
dig +trace +additional dragon-architect.com | awk 'NR==3' RS=\n\n
dig +short -f - | uniq
dig +short myip.opendns.com @resolver1.opendns.com
dig mx example.com | grep -v '^;' | grep example.com
dig NS +aaonly com.
ssh -f user@host echo foo; sleep 5; echo bar
dig @ns1.hosangit.com djzah.com +noall +authority +comments | awk -f script.awk
ssh-keygen -pf private.key
ssh -O exit officefirewall
ssh -O exit otherHosttunnel
source ~/.profile
readlink -f $(which firefox)
cd `pwd -P`
readlink -e /foo/bar/baz
readlink -m FILE
readlink $(which python2.7)
head -1 table | tr -s ' ' '\n' | nl -nln |  grep Target | cut -f1
uname -v | grep -o '#0-9\+'
df /full/path | grep -q /full/path
somecommand | true
groups $1 | grep -q \b$2\b
a=$(false)
a=$(false)
false
false | echo ${PIPESTATUS0}
foo=$(false)$(true)
MYVAR=`git ls-files -m|wc -l|tr -d ' '`
ls -ltq  <path>  | head -n 1
ls -t | head -n1
cat dax-weekly.csv | awk '1 { last = NR; linelast = $0; } END { print line1; for (i = last; i > 1; i--) { print linei; } }'
tail -r myfile.txt
echo 35 53 102 342|tr ' ' '\n'|tac|tr '\n' ' '
echo aaaa eeee bbbb ffff cccc|tr ' ' '\n'|tac|tr '\n' ' '
output=$(echo $input | fold -w4 | tac | tr -d \\n)
cat ${TMP}/${SCRIPT_NAME}.kb|sort -rh;
cat ${TMP}/${SCRIPT_NAME}.name|sort -r;
cat ${TMP}/${SCRIPT_NAME}.pid|sort -rh;
echo $string | rev | cut -d ' ' -f -20
uniq temp.txt | perl -e 'undef $/; $_ = <>; open(OUT,>temp.txt); print OUT;'
pushd -2
CC=$(which cc) ./configure
CC=$(which gcc) ./configure
echo command | ssh user@host
./myprogram | more
myprogram|more
ssh example.com ps -elfc; ls
command | more
join -t $'\t' file1 file2
join <(sort -n file1) <(sort -n file2)
HOSTNAME=$(hostname) make -e
make K_VERSION=`uname -r`
env `cat xxxx` otherscript.sh
env -u FOO somecommand
top -b -d 1 | grep myprocess.exe | tee output.log
setarch `uname -m` -R ./yourProgram
env -i ./makeall.sh
/bin/sh -c /bin/true $(seq 1 100000)
/bin/sh -c /bin/true $(seq 1 99999)
seq 10 | xargs -i --max-procs=4 bash -c echo start {}; sleep 3; echo done {}
nohup rm -rf cache &
screen -dmS title executable
screen -x title
env - `cat ~/cronenv` /bin/sh
for i in `find . -exec echo {} \;`; do cmd1 $i; cmd2 $i; done
/usr/bin/sudo -u `whoami` `which program`
echo su whoami |ssh remotehost
arr=$( $line | tr   \n)
echo df -k;uname -a | ssh 192.168.79.134
( cd /tmp; mycommand )
env -i perl -V
rsync $OPTS $FIND $BACKUPDIR
cat $2 | grep -v # | ssh -t $1 $INTERPRETER
sed -i s#\(export\ PATH=\\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2# ~/.zshrc
nohup java -jar program.jar &
nohup php newEmptyPHP.php &
nohup php -f 'yourscript'.php
doFirst= true
doFirst= true
`which find` $@ -print0;
nohup xterm -e java -jar start.jar &
node -pe 'JSON.parse(process.argv1).foo' $(cat foobar.json)
nohup sh -c 'for i in mydir/*.fasta; do ./myscript.sh $i; done >output.txt' &
git -c color.status=always status | less -REX
nohup cmd1 | cmd2 &
vi find . -type f -name 'btree*.c')
cd `script`
cd `/path/to/my/script`
cd $(node app)
mpv --no-audio \`ls ~/Down/other/*.{mp4,flv} --color=never\`
true | echo `tty | sed 's:/dev/::'`
\time -f %E real,%U user,%s sys ls -Fs
command time -f %E real,%U user,%s sys ls -Fs
ssh -x user@server
ssh -o StrictHostKeyChecking no -i ${KEYDIR}/${KEY}.pem ${USERNAME}@$NAME ${COMMANDS}
ssh -T tunneluser@111.222.333.444 <<'EOI'
ssh tunneluser@111.222.333.444 <<\EOI
ssh -l myName -p 22 hostname
ssh -p 22 myName@hostname
REL_DIR=$(ssh -t localhost $heredoc)
ssh -o ServerAliveInterval=60 myname@myhost.com
ssh user@server /bin/bash <<'EOT'
ssh $1 -l pete
ssh -t SERVER 'command; bash -l'
ssh -i /path/to/ssh/secret/key $1 $2
ssh user@server
ssh -t me@machine ./executeMyScript '&&' bash -i
ssh app1
ssh remote_user@server.com
ssh user@server ${SSH_COMMAND}
ssh -i ./device_id.pem deviceuser@middle.example.org:2222
ssh -o ControlPath=$MASTERSOCK -MNf $@
ssh -i ~/.ssh/gitkey_rsa $@
ssh -XY -t user@remote_IP 'ssh -XY -t user@remoteToRemote_IP'
myvar=`seq 1 $N | sed 's/.*/./' | tr -d '\n'`
read -a arr <<< 1 4 6 9 11 17 22
tempfile=XXX-$(od -N4 -tu /dev/random | awk 'NR==1 {print $2} {}')
echo something | read param
history -s $line
history -s 'echo whatever you want your command to be'
echo foo | read bar
WORKSTATION=`who -m|awk '{print $5}'|sed 's/()//g'`
ip=$(hostname -I | awk '{print $1}')
ip=$(hostname -I)
JAVA_HOME=$( readlink -f $( which java ) | sed s:bin/.*$:: )
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\|Downloading:' | tr -d ' \n' | sed -E 's/\.*\//g')
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\|Downloading:' | tr -d ' \n')
FOLDERS=`ls -dm $MY_DIRECTORY/*/ | tr -d ' '`
FOLDERS=find . -type d -print0 | tr '\0' ',')
foo=$(cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1)
files=find $dir -perm 755)
path=http://$(whoami).$(hostname -f)/path/to/file
RAND=`od -t uI -N 4 /dev/urandom | awk '{print $2}'`
bgxjobs= $(jobs -pr | tr '\n' ' ')
line=$(who | cut -d' ' -f1 | sort -u)
abspath=$(readlink -m $path)
abspath=$(readlink -e $path)
abspath=$(readlink -f $path)
absolute_path=$(readlink -m /home/nohsib/dvc/../bop)
export JAVA_HOME=$(readlink -f /usr/bin/java | sed s:bin/java::)
MY_PATH=$(readlink -f $0)
SCRIPT=$(readlink --canonicalize-existing $0)
SCRIPT=$( readlink -m $( type -p $0 ))
target_PWD=$(readlink -f .)
FOLDERS=find $PWD -type d | paste -d, -s)
FOLDERS=find . -type d | paste -d, -s)
var=`egrep -o '\.*\' FILENAME | tr -d `
totalLineCnt=$(cat $file | grep $filter | grep -v $nfilter | wc -l | grep -o '^0-9\+');
libdir=$(dirname $(dirname $(which gcc)))/lib
address=$(dig +short google.com | grep -E '^0-9.+$' | head -n 1)
CURRENT_PID_FROM_LOCKFILE=`cat $LOCKFILE | cut -f 1 -d  `
CAT=`which cat`
MKTEMP=`which mktemp`
RM=`which rm`
TR=`which tr`
day=$(od -t x1 --skip-bytes=9 --read-bytes=1 file.moi | head -1 | awk '{print $2}')
month=$(od -t x1 --skip-bytes=8 --read-bytes=1 file.moi | head -1 | awk '{print $2}')
year=$(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk '{print $2}')
thisHOSTNAME=`hostname`
QUEUE_PIDS=$(comm -23 <(echo $NEW_PIDS | sort -u) <(echo $LIMITED_PIDS | sort -u) | grep -v '^$')
results=$(groups $line | tr ' ' '\n' | egrep -v _unknown|sciences|everyone|netaccounts)
listing=$(ls -l $(cat filenames.txt))
cnt=`ps -ef| tee log | grep cntps|grep -v grep | wc -l`
LINES=$(cat /some/big/file | wc -l)
nbLines=$(cat -n file.txt | tail -n 1 | cut -f1 | xargs)
MERGE=$(cat $COMMIT_EDITMSG|grep -i 'merge'|wc -l)
NP=`cat /proc/cpuinfo | grep processor | wc -l`
big_lines=`cat foo.txt | grep -c $expression`
number=$(echo $filename | tr -cd ':digit:')
DayOfWeek=`date +%a |tr A-Z a-z`
myVar=$(tee)
read -d $(echo -e '\004') stdin
filename=$(uname -a)$(date)
pushd /home/`whoami`/Pictures
local pingResults=$(LANG=C ping -q -c10 $gateway)
fhost=`hostname -f`
hnd=$(hostname -f)
FinalDate=$(date -u -d $string2 +%s)
full_path=`readlink -fn -- $path`
fullpath=`readlink -f $path`
SELF=$(readlink /proc/$$/fd/255)
SELF=`readlink /proc/$$/fd/255`
actual_path=$(readlink -f ${BASH_SOURCE0})
script=`readlink -f ${BASH_SOURCE0}`
DIR=$(dirname $(readlink -f \$0\))
me=$(readlink --canonicalize --no-newline $BASH_SOURCE)
me=$(readlink --canonicalize --no-newline $0)
path=`readlink --canonicalize $dir/$file`
JAVA_HOME=$(readlink -f /usr/bin/java | sed s:/bin/java::)
cat file | xclip
cat file | xclip -selection clipboard
f=$(cat numbers.txt)
cat ~/.bashrc | pbcopy
DATE=$(echo `date`)
subj=$(date) - $(hostname) - $(echo $changes | sed s/$/,/ | tr \n  )
CDATE=$(date +%Y-%m-%d %H:%M:%S)
var=( $(whoami && stat -c %i /home) )
myvariable=$(whoami)
DIR=`pwd`/`dirname $0`
CURRENT=`pwd`
real1=$(pwd -P)
date_222days_before_TodayDay=$(date --date=222 days ago +%d)
DATECOMING=$(echo `date -d 20131220 +%j`)
MY_DIR=$(dirname $(readlink -f $0))
path=$( dirname $( which $0 ) )
dir=$(dirname $(readlink -m $BASH_SOURCE))
dir=$(dirname $(readlink /proc/$$/fd/255))
md5=($(md5sum file))
HOSTZ=$( hostname | cut -d. -f1 )
yes | awk 'FNR<4 {print >>file; close(file)}  1' | more
echo $j | read k
bar=$(cat foo.txt | { read bat;echo $bat;})
local=$(hostname -I | awk '{print $2}' | cut -f1,2,3 -d.)
subnet=$(hostname -i | cut -d. -f1,2,3)
DC=`hostname | cut -b1,2`
extract_dir=$(diff .dir_list_1 .dir_list_2 | grep '>' | head -1 | cut -d' ' -f2)
full_f=$(which f)
path=`which oracle`
foo=`which ~/f`
THIS=`readlink -f ${BASH_SOURCE0} 2>/dev/null||echo $0`
ver=`echo -ne $1\n$2 |sort -Vr |head -n1`
STAMP=`date -r file_name`
timestamp=find ./$dir -type f -printf %T@ %t\\n | sort -nr -k 1,2 | head -n 1)
line_to_be_replaced=`cat itemlist.json | nl |  sed -n '/item_1/,/item_2/p' | grep -in } | awk '{print $2}'`
basedir=$(pwd -L)
md5=$(md5sum $my_iso_file | cut -d ' ' -f 1)
md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`
twofish=`echo -n $twofish | md5sum | tr -d   -`
filename=$(uname -n)-$(date +%F).txt
size=$(zcat $file | wc -c)
candidates=$(which -a $cmd | wc -l)
MYVAR=`git ls-files -m|wc -l|tr -d ' '`
server_id=`hostname | tr 'A-Za-z-.' ' ' | tr -d ':space:' | awk '{print NR}'`
gv=$(echo -e $kf'\n'$mp | sort -t'.' -g | tail -n 1)
packet_loss=$(ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)')
END_ABS=`pwd -P`
WORKSTATION_IP=`dig +short $WORKSTATION`
DBPREFIX=$(hostname -s).mysqldb
hostname=`hostname -s`
HOSTNAME=`hostname`
HOSTNAME=$(hostname)
HOST=$(hostname)
myHostName=`hostname`
proc_load_average=$(w | head -1 | cut -d  -f12 | cut -d, -f1-2 | tr ',' '.')
v=$(whoami | awk '{print toupper($0)}')
v=$(whoami | perl -e 'print uc <>')
v=$(whoami | tr 'a-z' 'A-Z')
v=$(whoami | tr :lower: :upper:)
me=$(whoami)
me=$(whoami)
whoami=$(whoami)
x=$(whoami)
perl -e '@T=localtime(time-86400);printf(%02d/%02d/%04d,$T3,$T4+1,$T5+1900)' | read dt
(time ls) > ls_results 2> time_results
{ time ls; } 2>&1 |  cat > time.txt
tmux_version=$(tmux -V | cut -c 6-)
var2=$(echo $myvar | wc -c)
uiTotalSize=$(ls -l -R $1 | grep -v ^d | awk '{total+=$5;} END {print total;}')
a=$(echo $each | wc -c)
cal=$(echo $(cal $month $year))
(time ls) > outfile 2>&1
do=$(cal -m $mo $yo|awk 'NR>2&&!/^  /{print$1;exit}')
true | true | false | true | false
true | false | true
false | true
size=`cat script.sh | wc -c`
base=$(dirname $(readlink $file))
host=$(dig +short -x ${ip_address} | sed 's/\.$//g')
result=$(groups $line | sed 's/ /\n/g' | egrep -v _unknown|sciences|everyone|netaccounts)
inode=`ls -i ./script.sh | cut -d  -f1`
check_script_call=$(history |tail -1|grep myscript.sh )
userlist=$(w|awk 'BEGIN{ORS=,}NR>2{print $1}'|sed 's/,$//' )
a=`w|cut -d' ' -f1`;
b=`w|cut -d' ' -f1`;
OUTPUT=$(ls -1)
var=$(ls -l)
dir=$(dirname -- $1)
dir_context=$(dirname -- $1)
tmp=$(w | awk '{print $1}')
n_max=`ls . | wc -l`
set SCRIPTPATH=`dirname $SCRIPT`
set `cal $month $year`
set -- $(cal 2 1900)
DIR=$(dirname $(readlink -f \$0\))
FILES=`cat $RAW_LOG_DIR | xargs -r`
local old_nullglob=$(shopt -p nullglob)
false | tee /dev/null
grep -f file2 file1 | sort -u
grep -f file2 file1 | sort | uniq
grep -of ignore.txt input.txt | sort | uniq -c
cat inputfile | grep ^t\: | split -l 200
gunzip -c mygzfile.gz | grep string to be searched
history | grep -A 4 -B 3 whatyousearchfor
MYUSERS=`grep $MYGROUP /etc/group | cut -d : -f4| tr , \n`
which -a rename | xargs file -L
which -a rename | xargs readlink -f | xargs file
env | grep NAME
read -t 3 variable < <( tail -f logfile.log | grep something )
tail -f logfile.log | grep --line-buffered something | read -t 3
grep -ioh facebook\|xing\|linkedin\|googleplus access-log.txt | sort | uniq -c | sort -n
cd find . -name config -type d | sed 1q)
zcat filename.gz | grep -i user-user
od file-with-nulls | grep ' 000'
history | grep  840
zcat /proc/config.gz | grep CONFIG_64BIT
grep YOURSTRING `find .`
grep -ioh facebook\|xing\|linkedin\|googleplus access-log.txt | sort | uniq -c | sort -n
grep foo * | nl
history | grep -C 5 ifconfig
history | grep ifconfig -A5 -B5
ps -u `whoami` | grep largecalculation
pgrep -u `whoami` mpirun
cat file | grep pattern | paste -sd' '
cat file | grep pattern | paste -sd'~' | sed -e 's/~/ /g'
zcat `find /my_home -name '*log.20140226*'`|grep 'vid=123'
grep ^$GROUP /etc/group | grep -o '^:*$' | tr ',' '\n'
( find . -iname dl-aster-full-20131102* -exec grep Processed Files {} \;) | cut -d: -f2
grep pattern file | tr '\n' ' '
grep ERROR find . -type f -name 'btree*.c')
cd find . -name Subscription.java -printf '%h\n')
zcat log.tar.gz | grep -a -i string
set | grep HIST
ls | grep android | nl
tar -cvf file.tar `find var/log/ -iname anaconda.*`
nl -ba  -nln  active_record.rb  | grep -C 2 '^111 '
nl -ba  -nln  active_record.rb  | grep '^111 '
grep '^:space:*http://' | sort -u | nl
grep -o +\S\+ in.txt | tr '\n' ','
( find . -name '*.txt' -exec cat {} ';' ) | sed 's/ /\n/g' | grep '^aaa$' | wc -l
man find | grep ...
grep foo `find /usr/src/linux -name *.html`
more /etc/hosts | grep `hostname` | awk '{print $1}'
file $(which foo)
zegrep xception `find . -name '*auth*application*'` | wc -l
history | grep 'part_of_the_command_i_still_remember_here'
$ find . \( -name D -prune \) -o -name hi.dat
shopt -s extglob find !(D) -name hi.dat
history 300 | grep scp | grep important$
for f in `find -name \*.jsp` ; do echo ==> $f >> out.txt ; grep TODO $f >> out.txt ; done
yum search zsh
yum search mysql | grep client
grep -n 'something' HUGEFILE | head -n 1
apropos postscript | grep -i png
apropos
apropos disk
apropos -s 3 . | grep ^a-z
apropos -s 3 .
fg `jobs | iselect -a | grep -o 0-9*`
fg `jobs | tr '' ' \n' | zenity  --list --column '' --column ''`
{ yes yes | sed 4q; yes no | sed 1q; } | ./script
ping -s www.google.com 2 4
ping -c 4 -q google.comz
ping -c 5 -q 12.34.56.78 | tail -n 2
ping -c 5 -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }' | sort | uniq
ping -c 5 -b 10.11.255.255 | sed -n 's/.* \(0-9\+\.0-9\+\.0-9\+\.0-9\+\).*/\1/p' | sort | uniq
kill -HUP $(ps -A -ostat,ppid | grep -e 'zZ'| awk '{ print $2 }')
kill -HUP $( cat /var/run/nginx.pid )
kill -HUP $(lsof -t -c sshd)
kill -9 `pgrep -f cps_build`
kill -9 $(lsof -t -i:8080)
kill -9 16085
kill -9 18581 18582 18583
kill -9 $(lsof -t -u daniel)
ps -o uid,pid,cmd|awk '{if($1==username && $3==your_command) print $2}'|xargs kill -15
sudo kill -15 $( sudo lsof -i:6000 -t )
kill -15 $( lsof -i:6000 -t )
kill `pidof firefox`
kill $(lsof -t -i:8080)
kill $(pgrep 'python csp_build.py')
kill $(ps aux | grep 'python csp_build.py' | awk '{print $2}')
kill `ps ax | grep 'python csp_build.py' | awk '{print $1}'`
ps aux | awk '$11 $12 == python csp_build.py { system(kill  $2) }'
kill `pstree -p 24901 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n  `
kill $(ps -o pid= -s $(ps -o sess --no-heading --pid 21709))
kill $(ps -o pid= -s $(ps -o sess --no-heading --pid $(pgrep rsync )))
kill %1
kill $!
ps aux | grep 'python csp_build.py' | head -1 | cut -d   -f 2 | xargs kill
kill -s WINCH $$
kill `cat /var/run/DataBaseSynchronizerClient.pid`
watch --interval 0.1 nc remote.machine CLOSED_PORT
ping -c 1 -t 1 192.168.1.1
ping -a 10.100.3.104
ping 8.8.8.8 -I eth9 -c 3 -w 3
screen -x $PROCESS -p 0 -X stuff `printf stop\r`
screen -S SessionName -X at .# stuff date 
zcat input.txt.gz | command -
fold -1 /home/cscape/Desktop/file  | awk -f x.awk
fold -1 /home/cscape/Desktop/table.sql  | awk '{print $0}'
cat mail.tmp | mail -r noreply@$(hostname) -s Config done! ${MAIL}
cat message.txt | mail -s Backup -a mysqldbbackup.sql backup@email.com
fold -w130 file | ...
ping ${ip} -I eth9 -c 1
ping -c 1 $remote_machine
ping -W 1 -c 1 10.0.0.$i | grep 'from' &
ping -c 1 192.168.1.$COUNTER | grep 'ms'
ping -c 1 127.0.0.1 #ping your adress once
ping youhostname.local
ping -w 1 $c
cat my_ips | xargs -i dig -x {} +short
screen -r user -X stuff spawn daemon$(printf \\r)
ps -o pid,bsdtime --no-header -p $(pgrep renoise) | awk 'function mmss2s(s) {if (s !~ /^0-90-90-9:0-90-9$/) return -1; return ((60*substr(s,1,2))+substr(s,4,2))} { if (mmss2s($2) > 100) { print $1; }}'
cat file | clipboard
ping -c 2 www.google.com
zcat input.gz | ./myscript.pl
zcat large_file.gz | largesplitter
bg
bg %
while true ; do nc -l -p 1500 -c 'echo -e HTTP/1.1 200 OK\n\n $(date)'; done
chmod 644 `find /home/my/special/folder -type f`
chmod 644 `find -type f`
chmod 644 `find . -type f`
IFS= read -r line
LANG=en_US cal
screen -X title new title
screen -S SessionName -p 0 -X title remote_0
env $(cat .env | xargs) rails
chmod 600 file
chmod 644 img/* js/* html/*
chmod 755 find /path/to/base/dir -type d)
sudo chmod 755 $(which node)
PS1=`hostname`:\!>
sudo find foldername -exec chmod a+rwx {} ;
shopt -s checkwinsize
shopt -s dotglob
shopt -s histverify
bash -c test -h /proc/4129/ns/pid && test '$(readlink /proc/4129/ns/pid)' != '$(readlink /proc/1/ns/pid)'
set -o pipefail
set -o verbose
set -v
set -o xtrace
set -x
set -x
PROMPT_COMMAND='LAST=`cat /tmp/x`; exec >/dev/tty; exec > >(tee /tmp/x)'
PS1=`whoami`@`hostname | sed 's/\..*//'`
DISPLAY=`hostname`:0 skype
env DISPLAY=`hostname`:0 skype
true
HISTTIMEFORMAT=%s  history 2
hostname myServersHostname
hostname $(cat /etc/hostname)
touch -m --date=Wed Jun 12 14:00:00 IDT 2013 filename
export PS1='\\e0;`hostname`\a\${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
ssh -o ConnectTimeout=10  <hostName>
ssh -o ConnectTimeout=3 user@ip
set -e
PS1=`hostname`':\W> '
sudo date --set=Sat May 11 06:00:00 IDT 2013
touch -r A B
echo $1| read -a to_sort
me=`basename -- $0`
me=`basename $0`
touch -d$(date --date=@$old_time) B
touch -d '30 August 2013' *.php
touch -t 200510071138 old_file.dat
PS4='+$(date +%s:%N) %N:%i> '
PS4='+ $(date +%s.%N)\011 '
ssh -fNT -L8888:proxyhost:8888 -R22222:localhost:22 officefirewall
ssh $USERNAME@localhost -L 80:localhost:3000 -N
sudo ssh $USERNAME@localhost -L 80:localhost:3000 -N
ssh -R 10022:localhost:22 device@server
ssh -fNT -L4431:www1:443 -L4432:www2:443 colocatedserver
set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
architecture=$(uname -m)
b=`echo $a | awk '{ print tolower($1) }'`
b=`echo $a | awk '{ print toupper($1) }'`
extract_dir=$(tar -tf $FILE | cut -d/ -f1 | uniq)
filename=`basename http://pics.sitename.com/images/191211/pic.jpg`
finalName=$(basename -- $(dirname -- $path))
fname=`basename $f`
file=$( basename $1 )
file=`basename $1`
path=$(basename $(pwd) | awk '{print tolower($0)}')
path=$(basename $(pwd) | tr 'A-Z' 'a-z' )
path=$(basename $(pwd))
rav=$(echo $var | rev)
source <(echo vara=3)
BZIP2_CMD=`which bzip2`
GZIP=$(which gzip)
export MYPROGRAMNAME_KERNEL_VERSION=$(uname -r)
OS=$(uname -s)
OS=`uname -s`
PING=$(ping ADDRESS -c 1 | grep -E -o '0-9+ received' | cut -f1 -d' ')
PacketLoss=$(ping $TestIP -c 2 | grep -Eo 0-9+% packet loss | grep -Eo ^0-9)
export value=$(uname -r)
value=$(uname -r)
shopt -s extglob
shopt -s extglob
shopt -s globstar
export PS1=\\0330;\u $(host $(hostname))\007\\u@\h:\w\$ 
shopt -s dotglob
shopt -s extglob
shopt -s globstar
shopt -s -o nounset
shopt -s nullglob
shopt -s nullglob extglob
shopt -s globstar nullglob
shopt -s globstar nullglob dotglob
set prompt=\`id -nu`@`hostname -s`\\#\
ssh -L 1234:remote2:22 -p 45678 user1@remote1
shift $(($#-1))
shift `expr $# - 1`
shift
shift n
ipcs -a | grep `whoami`
ls -lrt | tail -n1
set -ex
awk '{print $1}' file2 | comm -1 -3 file1 - | join file2 -
history | more
ps x -o  %p %r %y %x %c 
ps -ef | grep postgres
ps aux | grep postgres
myVariable=$(env  | grep VARIABLE_NAME | grep -oe '^=*$');
set | grep VARIABLE_NAME | sed 's/^.*=//'
env | uniq | sort -r | grep PATH
date +%Y-%m-%d
du -sk find . -type d) | sort -n -k 1
file */*.php | grep UTF
file *.php | grep UTF
less `find -maxdepth 1 -type f -daystart -mtime -1`
tmux show-options -g
file /mnt/c/BOOT.INI
w | tr -s   | cut -d  -f1,5 | tail -n+3
ls -lt | tr -d 0-9
man find
man find
man find
man find
man find
man find
pstree -a -p 20238
uname -a
date -u '+%Y-%m-%dT%k:%M:%S%z'
date -d tomorrow+2days-10minutes
date -ud@0
echo $list | uniq -c
ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(%13.2f Mb ,hr) } { for ( x=4 ; x<=NF ; x++ ) { printf(%s ,$x) } print  }' | awk '{total=total + $1} END {print total}'
who
ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\  -f2
/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}'
pstree user
bunzip2 -c bigFile.bz2 | wc -c
shopt -o extglob
shopt globstar
shopt extglob
shopt compat31
shopt dotglob
shopt nullglob
echo ${line} | egrep --invert-match '^($|\s*#|\s*:alnum:_+=)'
awk 'BEGIN{srand();} {printf %06d %s\n, rand()*1000000, $0;}' | sort -n | cut -c8-
sudo chown -Rf www-data *
ruby -e $(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)
read -u 4 -N $char -r -s line
read -rsp $'Press enter to continue...\n'
read -s -p Enter your password:  passwd
read -rsp $'Press any key or wait 5 seconds to continue...\n' -n 1 -t 5
read -rsp $'Press any key to continue...\n' -n 1 key
read -n1 -s
read -s -N 1 SELECT
read -rsp $'Press escape to continue...\n' -d $'\e'
su -
sleep $(($(date -f - +%s- <<< $'tomorrow 21:30\nnow')0))
sort -o $file $file
sort -u -t, -k1,1 file
sort -u -t : -k 1,1 -k 3,3 test.txt
sort -S 50% file
sort -o file1.txt file1.txt
sort -k1,1 -k2,2 -t';' --stable some_data
sort -k1,1 -k2,2 -t';' --stable --unique some_data
sort -u -o file !#$
cd find . -maxdepth 1 -type d -name folder_* | sort -t_ -k2 -n -r | head -1)
diff <(sort $def.out) <(sort $def-new.out)
cat myfile.txt| sort| uniq
finger | sort -u
ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10
cat file1 file2 |sort -t. -k 2.1
tac a.csv | sort -u -t, -r -k1,1 |tac
sort file -o !#^
sort foo.txt
rev $filename | sort | uniq -f=N | rev
sort file.txt | rev | uniq -f 10 | rev
diff <(sort file1 -u) <(sort file2 -u)
sort -u FILE
sort -u set1 set2
diff <(sort -n ruby.test) <(sort -n sort.test)
sort
sort temp.txt > temp.txt.sort && mv temp.txt.sort temp.txt
rev   test.txt | sort  -k2 | rev
sort -t$'\t' -k6V -k7n file
sort ips.txt | uniq -c
sort inputfile | uniq | sort -o inputfile
sort temp.txt -o temp.txt
sort temp.txt -otemp.txt
sort $tmp | grep -v ':0'  #... handle as required
source $( dirname $( which $0 ) )/lib/B
source `which virtualenvwrapper.sh`
source `brew --prefix`/etc/grc.bashrc
source $( dirname ${BASH_SOURCE0} )/incl.sh
source $(dirname $0)/incl.sh
screen -d -m sh -c while :; do ./myCommand; done;
split -l ${2:-10000} -d -a 6 $1
split -l ${2:-10000} -d -a 6 $1 ${tdir}/x
split -l 20 $FILENAME xyz
split -d -l $SPLITLIMT $INFILE x_
split -l $MAX_LINES_PER_CHUNK $ORIGINAL_FILE $CHUNK_FILE_PREFIX
split -l 100 $SOURCE_FILE
split -a 5 $file
awk '{if (NR!=1) {print}}' $in_file | split -d -a 5 -l 100000 - $in_file_
split --number=l/6 ${fspec} xyzzy.
split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas
split --lines=50000 /path/to/large/file /path/to/output/file/prefix
split /tmp/files
split -n 10000 /usr/bin/cat
split -n 1000 /usr/bin/firefox
split -n 100000 /usr/bin/gcc
split -l 50000000 --filter=./filter.sh 2011.psv
split -b 1024k <file_name>
split -b 1024m <file_name>
split -l20 ADDRESSS_FILE temp_file_
split -b 500M -d -a 4 INPUT_FILE_NAME input.part.
split --bytes=1500000000 abc.txt abc
split bigfile /lots/of/little/files/here
zcat biglogfile.gz | split -l500000 --filter='gzip > $FILE.gz'
split --lines $lines_per_file complete.out
split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_
split -C 100m -d data.tsv data.tsv.
split -l5000000 data.tsv '_tmp';
split -l 100000 database.sql database-
split -l 100 date.csv
split -a 4 -d -l 50000 domains.xml domains_
split -n l/10 file
split -b 1024m file.tar.gz
split -b 1024m file.tar.gz file.tar.gz.part-
tail -n +2 file.txt | split -l 4 - split_
tail -n +2 file.txt | split -l 20 - split_
split -b 1M -d  file.txt file
split -b 1M -d  file.txt file --additional-suffix=.txt
split -l 20 file.txt new
split -l 200000 filename
split --suffix-length=5 --lines=1 foo.txt
split -a4 -d -l100000 hugefile.txt part.
split -n2 infile
split -b 10 input.txt /tmp/split-file
split -b 10 input.txt xxx/split-file
split --lines=1 --suffix-length=5 input.txt output.
split -l 100 input_file output_file
split -l 600 list.txt
split -l 200000 mybigfile.txt
split -l5000000 randn20M.csv '_tmp';
split -b 10M -d  system.log system_split.log
split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t
split -l9 your_file
split -b 1024m file.tar.gz file.tar.gz.part-
split -b 1024m file.tar.gz
split -l20 ADDRESSS_FILE temp_file_
cat afile | split -l 2 --filter='bzip2 > $FILE.bz2'
split
split -l 3400000
split --lines=75
cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix
cat *.txt | tail -n +1001 | split --lines=1000
sed 100q datafile | split -C 1700 -
ls | split -l 500 - outputXYZ.
my_program | split -d -b 100000 -
tar your params |split -b 500m - output_prefix
sort --unique emails_*.txt | split --numeric-suffixes --lines=200 --suffix-length=4 --verbose
ssh user@server 'DISPLAY=:0 nohup xeyes < /dev/null > std.out 2> std.err &'
top
matlab -nodisplay
nohup vlc -I dummy --quiet ~/mp3_directory/* &
env -i bash --norc
env - scriptname
(chromium --user-data-dir=$(mktemp -d) &)
tmux new-session -s vims -n vim0 -d vim foo
tmux new -d bash -c '$CMD'
tmux new -d bash -c \$CMD\
tmux -2
tmux new-window -t vims -d -n win0 vim foo
tmux -2 new-session -s name another_script.sh $1
read -N $BUFSIZE buffer
reads=$(zcat $file.fastq)
a=$( df -H )
set lastdaymonth=`cal $month $year  |tr -s   \n|tail -1`
proc_load_average=$(w | head -1 | cut -d  -f13 | cut -d, -f1-2 | tr ',' '.')
proc_load_average=`w | head -1 | cut -d  -f13 | cut -d, -f1-2 | tr ',' '.'`
output=$(echo $output | tr -d '\' | tr -d '\n')
echo $(basename $(dirname $pathname))
echo $(basename $(dirname $(dirname $pathname)))
awk 'FNR==NR { for(i=2;i<=NF;i++) a$1i=$i; next } { for(j=2;j<=NF;j++) $j-=a$1j }1' File2 File1 | rev | column -t | rev
awk 'FNR==NR { for(i=2;i<=NF;i++) a$1i=$i; next } { for(j=2;j<=NF;j++) $j-=a$1j }1' File2 File1 | rev | column -t | rev
ls | xargs -I {} mv {} {}_SUF
tar tzvf archive.tar.gz | sed 's/ \+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc
mv new old -b && mv old~ new
brew link bash-completion
brew link --overwrite python
rsync -av /home/user1/ wobgalaxy02:/home/user1/
rsync -rtuv /path/to/dir_b/* /path/to/dir_a
rsync -rtuv /path/to/dir_a/* /path/to/dir_b
rsync -ur dir_a dir_b && rsync -ur dir_b dir_a
rsync -urv --progress dir_a dir_b && rsync -urv  --progress dir_b dir_a
rsync -pogtEtvr --progress --bwlimit=2000 xxx-files different-stuff
rsync -avz -e ssh --progress user@source-server:/somedirA/ somedirB/
xargs -I '{}' rm '{}'
xargs -i rm '{}'
cut -d' ' -f1 file.txt | xargs dig +short
NAME=`basename $FILE`
NAME=`basename $FILE | cut -d'.' -f-1`
awk '{print $1}' file.txt | xargs dig +short
basedir=$(cygpath -am $(dirname $0))
basedir=$(cygpath -m $(dirname $0))
basedir=$(dirname $(echo $0 | sed -e 's,\\,/,g'))
mkdir -p `dirname /path/to/copy/file/to/is/very/deep/there` \
cut -d / -f 4- .exportfiles.text | xargs -n 1 dirname
kill -9 $(pgrep amarok)
echo $(false; echo foo)
gunzip -t file.tar.gz
 ! -z `find 'Dir/' -name 'something'`  && echo found || echo not found
 ! -z `find 'YOUR_DIR/' -name 'something'`  && echo found || echo not found
gunzip -c file.tar.gz | tar t > /dev/null
touch `cat files_to_find.txt`
ping -D -n -O -i1 -W1 8.8.8.8
set -g mouse on
column list-of-entries.txt
set -o nounset
var=`echo $var | awk '{gsub(/^ +| +$/,)}1'`
tail -n 1 $file | tee >(wc -c | xargs -I {} truncate $file -s -{})
tail -n 1 $file | wc -c | xargs -I {} truncate $file -s -{}
file ~/myfile
ssh -X -C -L 5900:localhost:5900 remotehost x11vnc -localhost -display :0
ifconfig eth0 up
crontab -l | sed '/# *\(^ ^ *  *\)\{5\}^ *test\.sh/s/^# *//' | crontab -
gzip -dc archive.tar.gz | tar -xf - -C /destination
zcat $(cat list.txt) | ./a.out
gzip -dc data.tar.gz | tar -xvf -
cat dbdump.sql.gz | gzip -cd | mysql
cat www-backup.tar.*|gunzip -c |tar xvf -
brew reinstall git
unset `env | awk -F= '/^\w/ {print $1}' | xargs`
IFS= read -t 0.01 -d '' -n1 keypress
IFS= read -s -n 1 SELECT
IFS= read -d $'\0' -r file
tmux set-environment -u RBENV_VERSION
tmux set-environment -gu RBENV_VERSION
tmux set-environment -t sessname -u RBENV_VERSION
unset DISPLAY
shopt -u -o history
unset DUALCASE
unset GIT_DIR
unset GNUPLOT_DRIVER_DIR
unset $(printenv |grep G4 |awk 'BEGIN{FS==;}{print $1;}')
unset `printenv |grep G4 |awk 'BEGIN{FS==;}{printf(%s ,$1);}'`
unset $(/usr/bin/env | /usr/bin/cut -d = -f 1 | /usr/bin/xargs)
unset `env | awk -F= '/^\w/ {print $1}' | xargs`
unset $(locale|cut -d= -f1)
unset array2
unset z
unset $(echo $a | /usr/bin/cut -d = -f 1)
unset array`shuf -i 0-4 -n1`;
unset array$RANDOM%4
unset array`shuf -i 0-3 -n1`
unset -f z
unset -f ls /bin/ls
shopt -u extglob
unset -v latest
unset -v penultimate
gunzip -c -d $ip | pax -r
zcat archive.tgz | tar -x --wildcards apri/fls/filename
gunzip -c bigfile.txt.gz | grep -f patterns.txt | sort | uniq -c
zcat daily_backup.sql.gz| grep -E 'x'|/x/
zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz'
zcat a.csv.gz | gawk '$2>5' FPAT='^|+'
zcat file.gz | awk -F'|' '$5>5'
gzip -d --stdout file.gz | bash -s -- -n wordpress localhost
gzip -d --stdout file.gz | bash /dev/stdin arguments
zcat file.gz
zcat file.gz | cut -f1 -d, | sort | uniq -c | sort -n
zcat file.gz | grep -o 'searchstring:^*'| sort | uniq -c | sort -n
gzcat large.csv.gz | split -l 1000 - xxx
gzip -cd myDB.sql.gz | pg_restore ...
gzip -cd path/to/test/file.gz | awk 'BEGIN{global=1}/my regex/{count+=1;print $0 >partglobal.txt;if (count==1000000){count=0;global+=1}}'
gunzip < some.file.gz
ls /homes/ndeklein/mzml/*.gz | xargs -I {} gunzip {}
gunzip test1/*/*.gz
zcat compressFileName | tar xvf -
zcat input.gz | sed -n 's/.*\(userAgent=^=*\) ^ =^ =*=.*/\1/p'
zcat input.gz | sed -n 's/.*\(userAgent=^=*\) ^ =\+=.*/\1/p'
zcat input.gz | grep -o 'userAgent=^=*' | sed 's/ ^ *$//'
zcat small-*.gz | split -d -l2000000 -a 3 - large_
gunzip -c 4.56_release.tar.gz | tar xvf -
zcat file.tar.gz |tar x
gunzip -c myarchive.tar.gz | tar -tvf -
gunzip -c openssl-fips-2.0.1.tar.gz | tar xf ­-
zcat tarball.tar.gz | tar x
cat backup.img.gz | gunzip | dd of=/dev/sdb
gunzip *.gz
gunzip $empty_variable
command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)
sudo yum --releasever=2013.09 update openssl
history -w
touch -t `date +%m%d0000` /tmp/$$
touch filename
sudo yum update openssl --skip-broken
sudo yum --disablerepo epel update openssl
yum update
yum -y update
find-repos-of-install | grep rpmfusion | xargs yum update
yum update find-repos-of-install | grep rpmfusion)
sudo yum update --skip-broken
yum update | tee mylogfile
sudo yum update openssl
yum --enablerepo=remi upgrade php-mbstring
cat <(yes | tr \\n x | head -c $BYTES) <(sleep $SECONDS) | grep n
yes | tr \\n x | head -c $BYTES | pv | grep n
yes | tr \\n x | head -c $BYTES | grep n
who --ips /var/log/wtmp | grep '^msw.*127.0.0.1'
ssh -F vagrant-ssh default
grep -b -o $'\x0c' filename | less
echo 'Hello World!' | sed $'s/World/\e1m&\e0m/'
gzip -dc input1.vcf.gz input2.vcf.gz | awk 'FNR==NR { array$1,$2=$8; next } ($1,$2) in array { print $0 ; array$1,$2 }'
awk '{ ... }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz)
source <(metaflac --show-tag ARTIST myfile.flac)
nohup php -r 'while (true) { echo a;}' &
command $(zcat input1.txt.gz) $(zcat input2.txt)
set -o pipefail
tail -n 100 file1 | bar | wc -l
tail -n 100 file1 | pv | wc -l
ping google.com | awk -f packet_loss.awk
cat blah.gz | gunzip | some_command
gunzip -c blah.gz | some_command
pv data.gz | gunzip -c | ./complicated-perl-script-that-reads-stdin
yes | tr \\n x | head -c $((1024*1024*1024)) | pv -L $((1024*1024)) | grep n
\time -o time.log command
/usr/bin/time -f%e ls >/dev/null
kill -0 $PID
kill $PID
chown -v root $file
bzip2 -kv */*/*/*/*/*
bzip2 -kv */*/*/*/*
bzip2 -kv */*
bzip2 -kv */*/*/*/*/*/*/*
bzip2 -kv */*/*/*/*/*/*
bzip2 -kv */*/*
bzip2 -kv */*/*/*
zcat /usr/share/doc/mysql-server-5.0/changelog*.gz | less
gzip --help | less
history | less
history | more
history | vim -
vim <(history)
history | vim -R -
zcat bigfile.z | sed -ne '500,1000 p'
zcat bigfile.z | tail -n +500 | head -501
history | head -n 120 | tail -n 5
man find
man find
man bash | less -p BASH_SOURCE
cat -n file.txt | less
man find
tar -xOf TarFile FileB.gz | zless
tmux set-option -g renumber-windows on
fold file | wc -l
fold -w 76 -s file.txt | pr -T --indent=4
cat file.txt | fold
fold -w 80 file.txt
fold -w30 longline
fold -w30 -s longline
fold -w79 yourfile | sed -e :a -e 's/^.\{0,78\}$/& /;ta'
fold -w 10
echo 127.0.0.1 ad.doubleclick.net | sudo tee -a /etc/hosts
echo '2-1' |sudo tee /sys/bus/usb/drivers/usb/unbind
echo '2-1.1.1'|sudo tee /sys/bus/usb/drivers/usb/unbind
echo Australia/Adelaide | sudo tee /etc/timezone
echo Hello, world | tee /tmp/outfile
echo Some console and log file message | tee /dev/fd/3
echo some repository | sudo tee -a /etc/apt/sources.list
echo -e \n/usr/local/boost_1_54_0/stage/lib | sudo tee -a /etc/ld.so.conf
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list
sudo echo deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen | sudo tee -a /etc/apt/sources.list.d/10gen.list
echo 'ee' | tee /dev/stderr | foo
echo 'ee' | tee /dev/tty | foo
echo 'ee' | tee >(foo)
t=$(tty) echo ee | tee $t | foo
echo ee | tee /dev/pty/2 | foo
echo error | tee -a log 1>&2
echo error 1>&2 | tee -a log
echo error | tee
echo fifo forever | cat - fifo | tee fifo
echo foo | readlink /proc/self/fd/1
echo foo | readlink /proc/self/fd/0
echo hello world | tee >(wc)
echo hey hey, we're the monkees | tee >(gzip --stdout > my_log.gz)
echo hey hey, we're the monkees | tee /dev/tty | gzip --stdout > my_log.gz
echo hey hey, we're the monkees | (exec 1>&3 && tee /proc/self/fd/3 | gzip --stdout > my_log.gz)
echo some output | sudo -u some_user tee /some/path/some_file
echo suspend | sudo tee /sys/bus/usb/devices/usb3/power/level
echo myname=\Test\ | sudo tee --append $CONFIG
yes | head -n10 > 10lines.txt
yes this is the text I want to add to a file|head -200>myFile.txt
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') **...**
sudo cat /sys/kernel/debug/tracing/trace_pipe | tee tracelog.txt
ls |& tee files.txt
diff -a --suppress-common-lines -y a.txt b.txt > c.txt
diff -u file1 file2 > file3
cat infile | paste -sd ',\n'
cat infile | paste -sd '  \n'
head -16482 < file.in | tail -259 > file.out
diff -r dir1 dir2 | grep 'Only in' | grep dir1 | awk '{print $4}' > difference1.txt
svn status | grep '\!' | cut -d' ' -f2- > removedProjs
ant 2>&1|tee build.log
bash myscript.sh 2>&1 | tee output.log
command 2>&1 | tee /path/to/logfile
update-client 2>&1 | tee my.log
command | tee -a /path/to/logfile
command | tee /path/to/logfile
command_that_writes_to_stdout | tee >(command_that_reads_from_stdin)
foo | tee output.file
ls -a | tee output.file
ls -hal /root/ | sudo tee /root/test.out
ls -lR / | tee -a output.file
ls -lR / | tee output.file
sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null
whatever | tee logfile.txt
yourcommand | tee output.txt
tee /tmp/arjhaiX4
tee foobar.txt
./a.out 2>&1 | tee output
./a.out |& tee output
./aaa.sh 2>&1 | tee -a log
./aaa.sh |& tee -a log
command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)
diff -r dir1 dir2 | grep dir1 | awk '{print $4}' > difference1.txt
comm -12 <(cut -d   -f 3 file1.sorted | uniq) <(cut -d   -f 3 file2.sorted | uniq) > common_values.field
echo $(date) 0 | tee -a log.csv
echo $(date) 1 | tee -a log.csv
tail -n 1 $file | tee >(wc -c | xargs -I {} truncate $file -s -{})
tail -F xxxx | tee -a yyyy &
./program | tee a.txt
false | tee /dev/null
input_prog 2>&1 | tee /dev/tty | my_editor
proc1 | tee >(proc2) ... >(procN-1) | procN
someCommand | tee someFile
mongo | tee somefile
set -v
ls 2>&1 | tee /tmp/ls.txt
ls 2>&1 | tee --append /tmp/ls.txt
ls 2>&1 | tee -a /tmp/ls.txt
progam.sh 2>&1 | tee -a log
someCommand 2>&1 | tee someFile
someCommand 2>&1 | tee -a someFile
set -x
python -u client.py | tee logfile
tar czvf mytarfile.tgz `find . -mtime -30`
sudo find / -name file.txt
tac error.log | awk '{if(/2012/)print;else exit}'
tail -n `tac biglogfile | grep -vnm1 2012 | sed 's/:.*//' | xargs expr -1 +` biglogfile
bind '\C-i:complete'
bind $'\x61':self-insert
bind '\e24~:foobar'
bind '\e24~:pwd\n'
chown -R :daemon /tmp/php_session
chown -R :lighttpd /var/lib/php/session
chown :friends myfile
chown -R andrewr:andrewr *
chown $(stat -f%u:%g $srcdir) $dstdir
chown -v root:root /path/to/yourapp
chown user:group file ...
chown root:specialusers dir1
chown root:root it
chown root:root script.sh
sudo chown root:root uid_demo
chown user_name file
sudo chown root /home/bob
chown user destination_dir
$sudo chown root file.sh
sudo chown el my_test_expect.exp     //make el the owner.
sudo chown root process
chmod 751 `find ./ -type d -print`
(cd A && find .) > tmp.txt
cd B && find . >> ../tmp.txt
cd /some/dir && find . -type f
cd `find a |sed '$!d'`
sudo find . -type d -exec chmod 755 {} +
chmod 640 `find ./ -type f -print`
chmod 751 `find ./ -type d -print`
sudo find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755
chmod 640 `find ./ -type f -print`
sudo find . -type f -exec chmod 644 {} +
sudo find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644
cd /nfs//office/ && find . -name '.user.log'
sudo chown root:dockerroot /var/run/docker.sock
chown amzadm.root  /usr/bin/aws
sudo chown root:wheel bin
chown owner:nobody public_html
screen -list | awk '{print $1}' | grep -q $1$
screen -list | grep -q myscreen
bind -p | grep $'\x61'
alias | grep my_previous_alias
head -n99999999 file1.txt file2.txt file3.txt
date -d @1278999698 +'%Y-%m-%d %H:%M:%S'
cp `find -perm -111 -type f` /usr/local/bin
jobs | wc -l
timex find /tmp -print|backup -ivqf/dev/null
tar -zcvf compressFileName.tar.gz folderToCompress
tar -cvzf filename.tar.gz folder
tar -czf backup.tar.gz --exclude=PATTERN1 --exclude=PATTERN2 ... /path/to/backup
tar -czf backup.tar.gz --exclude-tag-all=exclude.tag /path/to/backup
tar -C my_dir -zcvf my_dir.tar.gz .^.* ..?* *
tar cfvz --exclude='<dir1>' --exclude='<dir2>' target.tgz target_dir
tar -N '2014-02-01 18:00:00' -jcvf archive.tar.bz2 files
gzip `find . \! -name '*.gz' -print`
sudo  ln  -d  existing_dir  new_hard_link
sh -c find / -name myfile -type f -print 2> /dev/null
ln -s ../config/environments
ln /media/public/xampp/mysql/data/my_db -s
sudo ln -s /usr/include/oracle/11.2/client $ORACLE_HOME/include
ln -s -- ./local--pdf-kundendienst -pdf-kundendienst
ln -s /usr/share/my-ditor/my-editor-executable /usr/bin/my-editor
ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java
ln -s `canonical.bash foo` bar
ln -s `cd \`dirname $2\`; pwd`/`basename $2` $1/link
ln -s .bashrc test
ln -s www1 www
ln -s /cygdrive/c/Program Files /cygdrive/c/ProgramFiles
ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' /cygdrive/c/Users/Mic/mypics
tar cvf - `find . -print` > backup.tar
tar cvf - `find . -print` > backup.tar
alias subs=du -sch `find ./ -maxdepth 1 -type d`
tar -c --checkpoint=.1000 /var
tar -c --checkpoint=1000 --checkpoint-action=dot /var
tar --exclude={*.png,*.mp3,*.wav,.git,node_modules} -Jcf ${target_tarball}  ${source_dirname}
tar -czf backup.tar.gz -X /path/to/exclude.txt /path/to/backup
tar -c --use-compress-program=pigz -f tar.file dir_to_zip
tar -I 7zhelper.sh -cf OUTPUT_FILE.tar.7z paths_to_archive
tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 /DIR_TO_ZIP/
tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 paths_to_archive
tar cf - $PWD|tar tvf -
tar cf - $PWD|tar tvf -|awk '{print $6}'|grep -v /$
tar czfP backup.tar.gz /path/to/catalog
mkdir a b c d e
mkdir bravo_dir alpha_dir
mkdir foo bar
mkdir mnt point
mkdir .hiddendir
mkdir /cpuset
sudo mkdir /data/db
mkdir /etc/cron.15sec
mkdir /etc/cron.5minute
mkdir /etc/cron.minute
mkdir /path/to/destination
mkdir /tmp/foo
mkdir /tmp/new
sudo mkdir /var/svn
mkdir TestProject
mkdir aaa
mkdir aaa/bbb
mkdir backup
mkdir certs/
mkdir destdir
mkdir -p dir
mkdir dir1
mkdir -m 777 dirname
mkdir -p es/LC_MESSAGES
mkdir -p foo
mkdir foo
mkdir ~/log
mkdir new_dir
mkdir ~/practice
mkdir ~/public_html
mkdir saxon_docs
mkdir subdirectory
mkdir tata
mkdir ~/temp
mkdir testExpress
cd bar1 find . -maxdepth 1 -name '*foo*' -not -name '*.cc'  -exec echo ln -s $PWD/{} ../bar2
ln -s $(echo /original/*.processme) .
(IFS=$'\n'; for t in `find -type f -name *txt* | sed 's|.*/||'`; do ln -s $t ../folder2/$t; done)
Prints what month it was 222 days ago
ln -sf $(readlink -f $link) $link
bind '\e24~:\C-k \C-upwd\n'
(find /boot | sed s'/^/STDOUT:/' ) 3>&1 1>&2 2>&3 | sed 's/^/STDERR:/'
sudo find . -print0
cat find src/js -type f -name *.js -printf %d\t%p\n | sort -n | sed -e s|0-9*\t||)>min.js
cat `find . -type f` > out.txt
man find
1 down vote wc -cl `find . -name *.php -type f`
curl -L -C - -b oraclelicense=accept-securebackup-cookie -O http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip
curl http://127.0.0.1:8000 -o index.html
curl http://example.com/textfile.txt -o textfile.txt
curl -s http://page.that.serves.json.com/json/ | json_xs
curl -s http://search.twitter.com/search.json?q=node.js | json
curl -x http://proxy_server:proxy_port --proxy-user username:password -L http://url
curl --socks5 125.119.175.48:8909 http://example.com/
curl http://www.example.com --proxy http://125.119.175.48:8909
curl https://raw.github.com/creationix/nvm/master/install.sh | sh
curl https://www.npmjs.com/install.sh | sh
curl --data-urlencode paramName=param www.example.com
curl http://example.com/
curl -L https://get.scoop.sh
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash
shopt -s extglob; cd bar2; ln -s ../bar1/foo!(*.cc) .
true | sleep 10
bind -x '\eW:who'
tar -xzvf backup.tar.gz
$ tar xvfJ filename.tar.xz
tar -xvzf passwd.tar.gz
sudo tar xvf phantomjs-1.9.0-linux-x86_64.tar.bz2
gzip -dc archive.tar.gz | tar -xf - -C /destination
tar xzf archive.tar.gz -C /destination
tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract
tar --strip-components 1 -xvf my_directory.tar.gz
tar -zxvf $1
zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz'
gzcat large.csv.gz | split -l 1000 - xxx
tac infile | sed -ne '/pattern2/,/pattern1/ p' | tac -
join -t, file1 file2 | awk -F, 'BEGIN{OFS=,} {if ($3==$8 && $6==$9 && $7==$10) print $1,$2,$3,$4,$6,$7}'
join file{1,2}.txt | awk '$2 != $3 { print Age of  $1  is different }'
bind -p | grep -a forward
diff <(curl -s http://tldp.org/LDP/abs/html/) <(curl -s http://www.redhat.com/mirrors/LDP/LDP/abs/html/)
(find $DIR/tmp/daily/ -name *.tar.gz | sort -n | head -2
cp `find -perm -111 -type f` /usr/local/bin
perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.html`
cat `find src/js -type f -name *.js -print0 | xargs -0 stat -f %z  %N | sort -n | sed -e s|0-9*\ \ ||` > public/js/myCleverScript.js
files = `find '$dirs' -type f |& grep -v '^find: '`
files2 = `find '$dirs' -type f`
ionice -c 3 find  . -type f -amin -1440 -mmin +1441 -not -path custom/ -print0
sudo find / -name mysql -print
echo 'string to be hashed' | md5
md5 -s 'string to be hashed'
yosemite$ echo -n 401 | md5
printf 'password' | md5
printf '%s' $pass | md5
echo -n '' | md5
curl -s www.google.com | md5
echo -n hi | md5
md5sum file*.txt
groups user
OUTPUT=`find . -name foo.txt`
ln -f $GIT_DIR/../apresentacao/apresentacao.pdf $GIT_DIR/../capa/apresentacao.pdf
ln -fs /etc/configuration/file.conf /etc/file.conf
ln -sfvn source target
ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
sudo chown -Rf www-data *
ln -sf new_destination linkname
jobs -x echo %1
jobs -l | grep 'test.sh &' | grep -v grep | awk '{print $2}'
tar --help | grep lbzip2\|plzip\|pigz
md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`
cat file.txt | rev | cut -d ',' -f 2 | rev
su git
sudo su - jenkins
jobs -l | fgrep $! | perl -ne 'print $1\n if /\(\d+)\/'
sudo su
sudo su -
sudo su
date +%Y-%m-%d
date +%Y-%m-%d:%H:%M:%S
head -5 tst.txt | tail -1 |cut -c 5-8
tac a | grep -m1 -oP '(?<=tag>).*(?=</tag>)'
tac your.log | grep stuff
bind 'e:self-insert'
jobs -p | tail -n number of jobs | xargs kill
jobs -p | xargs kill -9
jobs -p | xargs kill
kill -INT $(jobs -p)
kill $(jobs -p)
kill `jobs -lp`
ps aux | grep 'python csp_build.py' | head -1 | cut -d   -f 2 | xargs kill
cat -n text.txt | join -o2.2 lines.txt -
jobs -lp
jobs -l
alias
alias | grep xlogs
alias | awk '/^alias /{print substr($2,1,index($2,=)-1)}'
jobs -l
jobs
strace -o /tmp/output.txt ln -s -f .bash_aliases test
jobs -l
bind -l | grep /
su - YOUR_USER
su - postgres
sudo su -l oracle
su -l
su - username
su - jetty cp file1 file2
mkdir /etc/cron.15sec
md5 -q file
fg `jobs | iselect -a | grep -o 0-9*`
curl url | tac | tac | grep -qs foo
jobs -sl | awk '{print $2}'
bind -P | grep --fixed-strings ' can be found on ' | perl -pe 's/((?<!\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1Esc,/g'
tac infile | sed '/string match/,$d' | tac
bind -P
du -B1 --apparent-size /tmp/foo.txt
bind -p|grep -i 'pE'
nice -10 `alias list | sed s/^\(alias \)\?^=\+='//; s/'$//;`
echo $(( ( $(date -ud '2003-08-02 17:24:33' +'%s') - $(date -ud '2003-04-21 22:55:02' +'%s') )/60/60/24 )) days
du -sh *
echo $(pwd)/$filename
tac INPUTFILE | sed '/^Statistics |/q' | tac
alias -p | cut -d= -f1 | cut -d' ' -f2
n_jobs=$( jobs -p | awk '{print NR}' )
n_jobs=`expr $(jobs | wc -l)`
bind -P | grep '\\e\\C-k'
tac a.txt | awk 'NF{print $NF; exit}'
tail -n +$(grep -n 'TERMINATE' file | head -n 1 | cut -d : -f 1) file
du -a . | sort -nr | head
su -l kenneth -c 'echo $PROJ_PATH'
tac | sed -n '/PATTERN/,+19{h;d};x;/^$/!{p;s/.*//};x' | tac
echo $filename | egrep -o ':digit:{5}' | head -n1
echo $(cd $(dirname $1) && pwd -P)/$(basename $1)
head -n1 $bigfile
echo $(cd $(dirname $1) && pwd -P)/$(basename $1)
tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac
tac $FILE | grep -m 1 '.'
tac FILE |egrep -m 1 .
tac file | sed -n '0,/<tag>\(.*\)<\/tag>/s//\1/p'
mvn help:evaluate -Dexpression=project.version | tail -8 | head -1
git status | head -1 | cut -d ' ' -f 3
history | awk '{print $2}' | awk 'BEGIN {FS=|}{print $1}' | sort | uniq -c | sort -nr | head
ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10
history -n
bind '\eY: \e2\e.'
SRC_DIR=$(cd ..; pwd)
chown -R antoniod:antoniod /opt/antoniod/
sudo chown -R ec2-user:apache /vol/html
chown nginx:nginx /your/directory/to/fuel/ -R
chown -R user:www-data yourprojectfoldername
chown -R root:root /var/lib/jenkins
chown dev_user.dev_user -R ~/.ssh/
sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates
sudo chown -R $USER ~/tmp
sudo chown -R $(whoami) /usr/lib/node_modules/
sudo chown -R `whoami` /usr/local
sudo chown -R `whoami` /usr/local/lib
sudo chown -R $USER /usr/local/lib/node_modules
chown -R nobody upload_directory
chown ftpuser testproject/ -R
sudo chown -R $(whoami) ~/.npm
sudo chown -R test /home/test
chown -R owner:owner public_html
screen /bin/bash -c 'java Foo > foo.txt'
/bin/find -name core — exec rm {} \;
rev urllist.txt | cut -d. -f 2- | rev
head -$(gcalctool -s $(cat file | wc -l)-N) file.txt
head --lines=-N file.txt
tac filename | sed 4,6d | tac
tac infile.txt | sed s/a/c/; ta ; b ; :a ; N ; ba | tac
tac | sed '0,/a/ s/a/c/' | tac
tac file | awk '/a/ && !seen {sub(/a/, c); seen=1} 1' | tac
tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac
tac file | sed '2 s/,$//' | tac
head -c 100 file
tac -s , parse.txt > newparse.txt
tac filename | awk '{for (i=NF; i>1; i--) printf(%s ,$i); printf(%s\n,$1)}'
tac filename | perl -lane 'print join( , reverse(@F))'
echo a,b,c | tr '\n' ',' | tac -s , | sed 's/,$/\n/'
tac a.txt > b.txt
su $username -c tar xzvf ..
your_command | less
su -c dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName qualidade -sysPassword password -systemPassword password -scriptDest /u01/app/oracle/oradata/qualidade -characterSet WE8ISO8859P1 -s /bin/sh oracle
./hw | sleep 1000
su - jenkins -s /bin/bash
screen bash --rcfile yourfile.rc
su -c 'bash --rcfile myfile'
su $USER -c $WEB --quiet &
su --session-command=${OBJECTDB_HOME}/bin/objectdb.sh start $JAVA_USER
su - joe -c /path/to/my_daemon & echo \$! > /tmp/su.joe.$$
su - joe -c /path/to/my_daemon 3>&- & echo \$! 1>&3 3>/tmp/su.joe.$$
su - joe -c /path/to/my_daemon > /some/output/file &
su - postgres -c /usr/bin/psql database -c \SELECT 'DROP TABLE ' || .... 
sudo su - -c R -e \install.packages('shiny', repos='http://cran.rstudio.com/')\
su -c cd /home/$USERNAME/$PROJECT ; svn update -m $USERNAME
sudo -u username2 -H sh -c cd /home/$USERNAME/$PROJECT; svn update
echo password | su user1 -c 'command'
su - username command
su --login postgres --command createdb $DBNAME
su -c dnf install glibc.i686
su -l $USR -s /bin/bash -c exec > >( logger -t $PRG ) 2>&1 ; cd $WKD; { $BIN $ARG & }; echo \$! > $PID 
su -s /bin/bash -c set -a; \                     . /path/to/nullmailer-vars; \                     set +a; \                     /usr/sbin/logcheck logcheck
su - jetty -c sh runProgram.sh
su user1 -c ssh user1@192.168.1.2 \awk '\\\$5==1{print \\\$3}' filename.log\ | uniq -c
sudo su elasticsearch -c './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch'
su -s /bin/bash -c 'bash --rcfile <(echo source ~/.bashrc; source myfile)'
su -c 'bash --rcfile myfile'
sudo su -c 'ls -hal /root/ > /root/test.out'
su -c 'source myfile; bash'
su apache -s /bin/ksh
su oracle -c /home/oracle/database/runInstaller &
su - jetty sh ./runprogram.sh
su - jetty ./runprogram.sh
su - USER_FOOBAR -c /PATH/TO/MY_APP &
su -cp filename.sh
oldalias=$(alias my_command|sed s/^^'*'//; s/'$//);
files=`find .`
grep ^malloc `find src/ -name '*.ch'`
DIR='find $HOME -type d -name $1 | head 1'
xargs rm -f <<< find . -name .txt)
script.py find /stuff/* -type d)
dirs=(find . -type d))
founddata=`find . -name filename including space -print0`
var=find . -name 'gen*.bt2')
$ find . -name *mp3 -print0 | xargs -0 mid3iconv -e EUR-KR -d
$ find . -name *mp3 -print0 | xargs -0 mid3iconv -e <source-encoding> -d
I'm assuming you only want to zip files that match names in $Namese. In your script, try replacing the find command with:  export Namese  find /var/tmp/ -type f -name '*.xml'
cd `find . -name config`
cd find . -name config -type d | sed 1q)
cd /nfs//office/ && find . -name '.user.log' | xargs -I{} dirname {} | xargs -I{} dirname {}
cd /nfs/office/ &&  find . -name 'file.txt' | sed -r 's|(\./(^/*/)?).*|\1|'
grep -iH foo `find . -name *.js`
sudo find / ( -name firefox -o -name thunderbird -o -name seamonkey \) -type f 2>/dev/null|grep -v '(10_Recommended|repo)'
curl -X GET -H Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53 http://testsite/api/ | python -mjson.tool
curl -v --get --data-urlencode access_token=$(cat .fb_access_token) https://graph.facebook.com/me/feed
myVariable=$(env  | grep VARIABLE_NAME | grep -oe '^=*$');
echo * * * * * touch $(pwd)/washere1 | crontab
echo 30 * * * * touch $(pwd)/washere2 | crontab
alias ..='cd ..'
alias :='xargs -I{}'
alias -g X=| cut -d' ' -f2
alias -g X2=| cut -d' ' -f2
alias c1=awk '{print \$1}'
alias cats='konqueror http:'//icanhazcheezburger.com''
alias cd-='cd $(history -p !!:1)'
alias cd-='cd ${${(z)$(fc -l -1)}3}'
alias cdl='cd -- $(ls -t | head -n 1)'
alias clean='rm -rf #* .*~ *~ *.bak *.dvi *.aux *.log'
alias cleanup='rm -Rf -- foo bar baz'
alias cleanup='rm -Rf `pwd`/{foo,bar,baz}'
alias current='cd $(cur -g)'
alias devn='cat > /dev/null'
alias dosetit='eval `setit-sh`'
alias ff=find . -name $1
alias foo=$'echo A \'*\' is born at $(date)'
alias foo=BAR=baz
alias foo=printf
alias foo='BAR=baz'
alias git-root='if  `git rev-parse --show-cdup` !=  ; then cd `git rev-parse --show-cdup`; fi'
alias git-root='cd $(git rev-parse --show-cdup)'
alias go='GOPATH=$(infer-gopath.sh) go'
alias go='ssh $(pbpaste) -l pete'
alias h='history'
alias histgrep=history | grep
alias iTMSTransporter='`xcode-select --print-path`/../Applications/Application\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter'
alias j7='JAVA_HOME=`/usr/libexec/java_home -v 1.7`'
alias killaf=kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`
alias logspace=find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; | awk '{print $5, $9 }'
alias logspace='find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''
alias ls='ls -lrta'
alias la='ls -a -l'
alias lvim=vim -c \normal '0\
alias m=mplayer -novideo -loop 0
alias memu=ps -u $(whoami) -o pid,rss,command | awk '{print \$0}{sum+=\$2} END {print \Total\, sum/1024, \MB\}'
alias mkcd='_(){ mkdir -pv $1; cd $1; }; _'
alias mkcd='_(){ mkdir $1; cd $1; }; _'
alias mkdir=¨mkdir -p¨
alias my_command=$oldalias --fail-if-command-contains=$bad_string
alias my_command=$oldalias -option 3
alias mycd=cd `echo $1`
alias no=ls -f
alias prettify_json=php -E '$o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);'
alias prettyjson='python -m json.tool'
alias -s ps='screen -d -m okular'
alias psgrep=ps -ef | grep
alias pwd='echo -n $(/bin/pwd) | pbcopy'
alias pwd='echo -n `pwd` | pbcopy'
alias pwd='/bin/pwd | pbcopy'
alias py='python2.5 -O'
alias restart_rails='kill -9 `cat tmp/pids/server.pid`; rails server -d'
alias s='it=$($(history | tail -2 | head -1 | cut -d  -f4-))'
alias te='tail -f /var/log/apache2/error_log | perl -ne '\''...'\'''
alias unix=date +%s
alias unix='echo $(date +%s)'
alias unsetvar='source /your/path/to/the/script/unsetvar'
alias vimrc='$EDITOR ~/.vimrc'
alias -g vv=$(date)
alias webshare='python -m SimpleHTTPServer'
alias your_env='source ~/scripts/your_env.sh'
alias jump=cd $(myscript.sh)
alias 12np='ssh mydomain\\stephencheng@userxyz@host.com'
alias -s py=$EDITOR
cmdstr=$(alias $aliascmd | cut -d' -f2 | xargs)
uname_m=`uname -m`
r=$(uname -r)
ps aux
su -l builder
su -
sleep 1
sleep 10
sleep `10`
sleep 5
sleep 500
sleep $(expr `date -d 03/21/2014 12:30 +%s` - `date +%s`)
split -l 100 $SOURCE_FILE
split -l 600 list.txt
tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz
tar czf - www|split -b 1073741824 - www-backup.tar.
cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix
tail -n +2 file.txt | split -l 4 - split_
cat inputfile | grep ^t\: | split -l 200
cat *.txt | tail -n +1001 | split --lines=1000
split -a 5 $file
split --number=l/6 ${fspec} xyzzy.
split -l9 your_file
split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas
split -n 1000 /usr/bin/firefox
split -n 100000 /usr/bin/gcc
split --bytes=1500000000 abc.txt abc
split -l 100 date.csv
split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_
split --lines=1 --suffix-length=5 input.txt output.
split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t
ls | split -l 500 - outputXYZ.
sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-
sed 's/3d3d/\n&/2g' temp | split -dl1 - temp
tar your params |split -b 500m - output_prefix
split --lines=50000 /path/to/large/file /path/to/output/file/prefix
split -n2 infile
split -l 50000000 --filter=./filter.sh 2011.psv
split -C 100m -d data.tsv data.tsv.
split -a4 -d -l100000 hugefile.txt part.
sed 100q datafile | split -C 1700 -
ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
zcat biglogfile.gz | split -l500000 --filter='gzip > $FILE.gz'
ssh -l buck hostname
ssh buck@hostname
ssh myusername@ssh.myhost.net mkdir -p $2
ssh $(vagrant ssh-config | awk 'NR>1 {print  -o $1=$2}') localhost
ssh `vagrant ssh-config | tail -8 | perl -pe 's/^\s+/-o@/; s/\s/\=/;s/@/ /;s/\n/ /'` vagrant@localhost
vagrant ssh-config --host default | ssh -F /dev/stdin default
ssh vagrant@127.0.0.1 -p 2222 -o Compression=yes -o DSAAuthentication=yes -o LogLevel=FATAL -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ~/.vagrant.d/less_insecure_private_key -o ForwardAgent=yes
ssh $(vagrant ssh-config HOST | sed '/^:space:*$/d' |  awk 'NR>1 {print  -o $1=$2}') localhost
ssh -p 10022 localhost
ssh -p 4444 localhost
sleep 100 | sleep 200 &
screen -Rd
ABSOLUTE_PATH=$(cd $(dirname ${BASH_SOURCE0}) && pwd)/$(basename ${BASH_SOURCE0})
DIR=$( cd $( dirname ${BASH_SOURCE0} ) && pwd )
su username
su - jenkins
diff --brief <(awk '{print $2}' A) <(tac B | awk '{print $2}')
mkdir -pv /tmp/boostinst
man find
echo hello `sleep 2 &`
inotifywait -e attrib target-directory
bind -m vi-insert '{ \C-v{}\ei'
bind -m vi-insert '} \C-v}\ei'
bind -m vi-insert '[ \C-v[\ei'
bind -m vi-insert '] \C-v]\ei'
bind -m vi-insert ': \C-v:\ei'
bind -m vi-insert '; \C-v;\ei'
bind -m vi-insert '" \C-v"\ei'
bind -m vi-insert '' \C-v'\ei''
bind -m emacs "\e[D" backward-char
bind -m emacs "\e[B" down-history
bind -m emacs "\e[A" up-history
bind -m emacs "\e[C" forward-char
bind -m emacs "\eOD" backward-word
bind -m emacs "\eOC" forward-word
bind -m emacs "\eOH" beginning-of-line
bind -m emacs "\eOF" end-of-line
bind -m emacs "\e[3~" delete_char
bind -m emacs "\e[1~" beginning_of_line
bind -m emacs "\e[4~" end_of_line
top -n1 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n5 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -b -n1 | head -12 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -p $(pgrep -d ',' java)
ps -ef | grep java
ps -p 1234 -o pid,ppid,user,%cpu,%mem,vsz,rss,tty,stat,start,time,command
ps -A -o pid,ppid,user,%cpu,%mem,vsz,rss,tty,stat,start,time,command
ps -eo pid,ppid,user,%cpu,%mem,vsz,rss,tty,stat,start,time,command --sort=-%mem
rename 's/(.*)$/new.$1/' original.filename
rename 's/(.*)$/old.$1/' original.filename
rename 's/(.*)$/OLD.$1/' original.filename
rename 's/(.*)$/New.$1/' original.filename
nl -s prefix file.txt | cut -c7-
nl -s suffix file.txt | cut -c7-
paste -d join_string file.txt
cut -d' ' -fNF file.txt
cut -d' ' -f1 file.txt
nl -s prefix_ a.txt | cut -c7-
nl -s suffix_ a.txt | cut -c7-
nl -s prefix_suffix_ a.txt | cut -c7-
sed 's/foo/bar/g' a.txt
sed -i 's/foo/bar/g' *
grep -v foo a.txt
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping 8.8.8.8 | xargs -L 1 -I '{}' date '+%c: {}'
ping www.google.com | xargs -L 1 -I '{}' date '+%c: {}'
pushd $HOME/Documents
pushd $HOME/Downloads
pushd $HOME/Music
alias ll='ls -l'
alias gi='grep -i'
alias cpi='cp -i'
alias mvi='mv -i'
alias rmi='rm -i'
alias mkdirp='mkdir -p'
alias lessr='less -R'
alias chmodx='chmod +x'
alias duh='du -h'
alias dfh='df -h'
alias freem='free -m'
alias psauxf='ps auxf'
sed 's/.*/& Bytes/' $TEMPFILE | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -n | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -nr | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -f | column -t
history -n
history -r
history -w
history -c
history -d offset
history -p arg [arg ...]
history -s arg [arg ...]
alias rm100m=find / -type f -name *.tar -size +100M -exec rm -i {} \;
alias rm50m=find / -type f -name *.tar -size +50M -exec rm -i {} \;
alias rm25m=find / -type f -name *.tar -size +25M -exec rm -i {} \;
alias rm2g=find / -type f -name *.tar -size +2G -exec rm -i {} \;
alias rm3g=find / -type f -name *.tar -size +3G -exec rm -i {} \;
alias rm4g=find / -type f -name *.tar -size +4G -exec rm -i {} \;
alias rmc=find . -iname core -exec rm {} \;
alias rmd=find . -type d -exec rm -r {} \;
screen -xr 14314
screen -xr 14315
screen -xr 14316
screen -xr 14317
screen -xr 14318
mount --bind /original/path /new/path
umount /original/path
mount /dev/sda1 /mnt
mount /dev/cdrom /mnt
md5sum <file>
ls *.java
ls -a
ls -l
sha1sum $ecriv
sha256sum $ecriv
sha512sum $ecriv
crc32 $ecriv
stat -c%s $ecriv
stat -c%s/1024 $ecriv
stat -c%s/1048576 $ecriv
stat -c%s/1073741824 $ecriv
ls
ls -a
ls -al
ls -lt
sha1=$(sha1sum ${my_iso_file})
sha256=$(sha256sum ${my_iso_file})
lines=$(wc -l ${my_iso_file})
head -n 10 ${my_iso_file} > head.txt
tail -n 10 ${my_iso_file} > tail.txt
tail -n +10 ${my_iso_file} > tail.txt
head -n -10 ${my_iso_file} > head.txt
uniq ${my_iso_file}
uniq ${my_iso_file} > uniq.txt
dupes ${my_iso_file}
ls -l
cp file1.txt file2.txt
mv file1.txt file2.txt
ls
cp *.txt /tmp
mv *.html /tmp
md5sum $(which g++)
md5sum $(which ls)
md5sum $(which cat)
md5sum $(which rm)
md5sum $(which mv)
md5sum $(which cp)
md5sum $(which mkdir)
md5sum $(which rmdir)
md5sum $(which touch)
md5sum $(which grep)
md5sum $(which find)
md5sum $(which chmod)
md5sum $(which sort)
md5sum $(which uniq)
md5sum $(which wc)
md5sum $(which head)
md5sum `which gcc`
md5sum `which g++`
md5sum `which make`
md5sum `which cmake`
crontab -l | sed '/bnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/cnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/dnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/enm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/fnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/gnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/inm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/jnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/knm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/lnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/mnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/bnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/cnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/dnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/enm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/fnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/gnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/inm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/10,' | crontab -
cd $(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d = | tr \ \n)
pwd
ls
ls -a
ls -al
pwd
ls
ls -a
ls -l
ls -al
cd ..
mkdir dir
rmdir dir
rm -r dir
mv file1 dir
cp file1 dir
mv file1 file2
cat file
head file
chown amzadm.root  /usr/local/bin/aws
chown amzadm.root  /usr/sbin/aws
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
ps aux
pstree
uname -a
uname -r
uname -n
uname -m
comm -23 <(sort -n f1.txt) <(sort -n f2.txt)
comm -13 <(sort -n f1.txt) <(sort -n f2.txt)
comm -23 <(sort f1.txt) <(sort f2.txt)
comm -13 <(sort f1.txt) <(sort f2.txt)
tar -czvf etc.tar.gz /etc/
gzip foo
bzip2 foo
xz foo
zip foo
paste -s -d' \n' input.txt
paste -d, input.txt
paste -d'\t' input.txt
cut -f1 input.txt
cut -f2 input.txt
cut -f1,3 input.txt
grep foo input.txt
grep -v foo input.txt
yes '1111111111111111' | tr -d '\n' > /dev/to/overwrite
yes '2222222222222222' | tr -d '\n' > /dev/to/overwrite
yes '3333333333333333' | tr -d '\n' > /dev/to/overwrite
yes '4444444444444444' | tr -d '\n' > /dev/to/overwrite
yes '5555555555555555' | tr -d '\n' > /dev/to/overwrite
yes '6666666666666666' | tr -d '\n' > /dev/to/overwrite
yes '7777777777777777' | tr -d '\n' > /dev/to/overwrite
yes '8888888888888888' | tr -d '\n' > /dev/to/overwrite
cal -h 03 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 04 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 02 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
head -c1024 /dev/urandom | xxd -p | tr -d $'\n'
head -c2048 /dev/urandom | xxd -p | tr -d $'\n'
head -c4096 /dev/urandom | xxd -p | tr -d $'\n'
mkdir ${DIR}
cd ${DIR}
ls
pwd
rm -r ${DIR}
cat ${FILE}
less ${FILE}
grep ${PATTERN} ${FILE}
touch ${FILE}
ls -l
pwd
cd ~
mkdir temp
ls
ls -a
ls -l
ls -t
ls
ls -a
ls -al
cp --remove-destination `readlink bar.pdf` bar.pdf
cp --remove-destination `readlink foo.pdf` foo.pdf
cp --remove-destination `readlink baz.pdf` baz.pdf
ls
ls -a
ls -al
ls -r
ls
mv foo /tmp/
chmod 600 foo
chmod 777 foo
cat foo
grep -r main `find . -type f \( -name *.cpp -o -name *.c -o -name *.h \) -print`
grep -v main `find . -type f \( -name *.cpp -o -name *.c -o -name *.h \) -print`
wc -l *.php
wc -l *.js
wc -l *.css
wc -l $(git ls-files | grep '.*\.java')
wc -l $(git ls-files | grep '.*\.rb')
wc -l $(git ls-files | grep '.*\.py')
wc -l $(git ls-files | grep '.*\.js')
pwd
echo ~
cat [filename]
less [filename]
cp [filename] [new filename]
mv [filename] [new filename]
rm [filename]
mkdir [directory name]
cd [directory name]
git grep error
git grep warning
screen
screen -d
screen
screen -d
ssh-keygen -f ~/.ssh/id_rsa
export FOO_BACKWARDS=$(echo 'foo' | rev)
export BAR_BACKWARDS=$(echo 'bar' | rev)
export BAZ_BACKWARDS=$(echo 'baz' | rev)
export QUX_BACKWARDS=$(echo 'qux' | rev)
export QUUX_BACKWARDS=$(echo 'quux' | rev)
export CORGE_BACKWARDS=$(echo 'corge' | rev)
export GRAULT_BACKWARDS=$(echo 'grault' | rev)
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_
tar cz my_large_file_3 my_large_file_4 | split -b 1024MiB - myfiles_split.tgz_
rand_str=$(mktemp --dry-run ${str// /X})
tempfile=$(mktemp)
$ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template)
$ my_temp=$(mktemp --tmpdir=$temp_dir -t $template)
$ my_temp_dir=$(mktemp -d -t $template)
sed -i '/pattern/d' filename
sed -i '/pattern/!d' filename
sed -i '/^$/d' filename
sed -i 's/pattern/substitution/' filename
sed -i 's/pattern/substitution/g' filename
sed -i '/pattern/c\substitution' filename
sed -i '/^pattern/s//substitution/' filename
var=`hg st -R $path | tr -d '\n'`
rm -r *
rm -r foo/*
rm foo/*.txt
rm -r !(*.txt)
find . -type d -empty -delete
tail
head
cut
uname -m
getconf LONG_BIT
shopt -u compat32
shopt -u compat40
shopt -u compat41
shopt -u compat42
shopt -s compat31
shopt -s compat32
shopt -s compat40
shopt -s compat41
shopt -u nounset
shopt -u pipefail
column -x -c 30 /tmp/file
column -x -c 40 /tmp/file
column -x -c 50 /tmp/file
column -x -c 60 /tmp/file
column -x -c 70 /tmp/file
uname -n
uname -o
uname -v
uname -r
diff -y -C3 one.txt two.txt
diff -c one.txt two.txt
diff -u one.txt two.txt
awk '{printf %s , $0} END {printf \n}' inputfile
head -10 inputfile
tail -10 inputfile
tail -n+10 inputfile
head -n-10 inputfile
grep pattern inputfile
grep -v pattern inputfile
awk '{printf %s , $0}' inputfile
head -10 inputfile
tail -10 inputfile
tail -n+10 inputfile
head -n-10 inputfile
awk '{printf %s|, $0} END {printf \n}' inputfile
awk '{printf %s, $0} END {printf \n}' inputfile
awk '{printf %s\t$0} END {printf \n}' inputfile
free -m
ls -l
mkdir <directory name>
rmdir <directory name>
mv <file name> <destination>
cp <file name> <destination>
df '/some/directory' | awk '{print $1, $6}'
df -h '/some/directory'
df -h
mount
od -c;
od -o;
od -d;
od -x;
od -lx;
od -Lx;
od -b;
zcat sample_0002.gz | sed -e 's/lk=1&//g'
zcat sample_0003.gz | sed -e 's/lk=1&//g'
zcat sample_0004.gz | sed -e 's/lk=1&//g'
zcat sample_0005.gz | sed -e 's/lk=1&//g'
zcat sample_0006.gz | sed -e 's/lk=1&//g'
zcat sample_0007.gz | sed -e 's/lk=1&//g'
zcat sample_0008.gz | sed -e 's/lk=1&//g'
zcat sample_0009.gz | sed -e 's/lk=1&//g'
zcat sample_0010.gz | sed -e 's/lk=1&//g'
zcat sample_0011.gz | sed -e 's/lk=1&//g'
zcat sample_0012.gz | sed -e 's/lk=1&//g'
zcat sample_0013.gz | sed -e 's/lk=1&//g'
zcat sample_0014.gz | sed -e 's/lk=1&//g'
zcat sample_0015.gz | sed -e 's/lk=1&//g'
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_rsa_key.pub
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_dsa_key.pub
ssh-keygen -l -E sha1 -f /etc/ssh/ssh_host_ecdsa_key.pub
ssh-keygen -l -E sha1 -f /etc/ssh/ssh_host_rsa_key.pub
ssh-keygen -l -E sha1 -f /etc/ssh/ssh_host_dsa_key.pub
ssh-keygen -l -E sha256 -f /etc/ssh/ssh_host_ecdsa_key.pub
ssh-keygen -l -E sha256 -f /etc/ssh/ssh_host_rsa_key.pub
grep <pattern> <filename>
grep -v <pattern> <filename>
grep -e <pattern1> -e <pattern2> <filename>
grep -e <pattern1> -e <pattern2> <filename>
head -n 10 <filename>
tail -n 10 <filename>
set -o noclobber
set -o protected_variables
set -o nounset
set -u
set -o nonempty
set -o no_unset_vars
set -o strict_variables
set -o unused_vars
set -o ignore_undefined_variables
printf a | od -tx1
printf b | od -tx1
printf 0 | od -tx1
printf 1 | od -tx1
printf 2 | od -tx1
printf 3 | od -tx1
printf 4 | od -tx1
printf 5 | od -tx1
printf 6 | od -tx1
set -o history=1000
set -o histignoredups
set -o histappend
set -o noclobber
set -o errexit
set -o nounset
HISTSIZE=1000
set -a
set -o noclobber
set -o ignoredups
set -o igncr
set -o xtrace
set -o notify
set -o histexpand
set -o histreedit
echo $SHELL
export SHELL=/bin/bash
echo $HOME
export HOME=/home/user
echo $PATH
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s completion_ignore_case
shopt -s complete_fullquote
shopt -s direxpand
shopt -s dirspell
shopt -s dotglob
shopt -s execfail
shopt -s expand_aliases
shopt -s extdebug
shopt -s extglob
shopt -s extquote
shopt -s failglob
shopt -s force_fignore
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s compat31
shopt -s compat32
shopt -s compat40
shopt -s compat41
shopt -s compat42
shopt -s complete_fullquote
grep -w hello world.txt
grep -i hello world.txt
grep -w -i hello world.txt
grep -i -n hello world.txt
grep -w -n hello world.txt
grep -r hello .
grep -i -r hello .
echo $HOME
echo $PATH
echo $SHELL
echo $USER
echo $TERM
echo $HOSTNAME
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s compat31
shopt -s compat32
shopt -s compat40
shopt -s compat41
shopt -s compat42
shopt -s complete_fullquote
shopt -s complete_overrides
shopt -s direxpand
shopt -s dirspell
shopt -s dotglob
shopt -s execfail
echo $RANDOM
FOO=bar
echo $PATH
PATH=$PATH:/foo/bar
echo $HOME
FOO=${FOO:-bar}
echo $USER
FOO=${FOO:=bar}
grep -w Linux system-info
grep -iw Linux system-info
grep -w '^Linux' system-info
grep -w 'Linux$' system-info
exec 2 | tee ${LOG_FILE}
exec 3 | tee ${LOG_FILE}
exec 4 | tee ${LOG_FILE}
exec 5 | tee ${LOG_FILE}
exec 6 | tee ${LOG_FILE}
exec 7 | tee ${LOG_FILE}
exec 8 | tee ${LOG_FILE}
watch -n10 cat /tmp/iostat.running
watch -n300 cat /tmp/disk_usage.log
watch -n 1 pwd
watch -n 1 date
watch -n 1 cal
watch -n 1 whoami
watch -n 1  mysqladmin -u root -pXXXXX processlist  | tee -a /root/plist.log
watch -n 1  ps aux | grep tablename  | tee -a /root/plist.log
watch -n 5 -c 'tail -f -n 50 mylogfile.txt | ccze'
watch -n 10 -c 'tail -f -n 100 mylogfile.txt | ccze'
watch -n 15 -c 'tail -f -n 200 mylogfile.txt | ccze'
watch --color 'tput setaf 2; echo bar'
watch --color 'tput setaf 3; echo baz'
watch --color 'tput setaf 4; echo qux'
watch --color 'tput setaf 5; echo quux'
watch --color 'tput setaf 6; echo corge'
watch --color 'tput setaf 7; echo grault'
watch --color 'tput setaf 8; echo garply'
watch --color 'tput setaf 9; echo waldo'
watch --color 'tput setaf 10; echo fred'
watch --color 'tput setaf 11; echo plugh'
watch --color 'tput setaf 12; echo xyzzy'
awk -f `which script.awk` arg1
awk -f script.awk arg1
awk -f script.awk arg1 | less
set -o errexit
set -o pipefail
set -o nounset
set -o noclobber
set -o ignoreeof
set -o noclobber
set -o pipefail
set -o nounset
set -o errtrace
exit 0
pushd /home/`whoami`/Documents
cd ~`whoami`
export PS1='$(whoami)@$(hostname):'
export PS2='>'
export PS3='#'
export PS4='+'
set `od -j $o -N 8 -t u1 $pkg`
set `od -j $o -N 16 -t u1 $pkg`
set `od -j $o -N 32 -t u1 $pkg`
set `od -j $o -N 64 -t u1 $pkg`
set `od -j $o -N 128 -t u1 $pkg`
set `od -j $o -N 8 -t u1 $rpm`
set `od -j $o -N 16 -t u1 $rpm`
set `od -j $o -N 32 -t u1 $rpm`
set `od -j $o -N 64 -t u1 $rpm`
set `od -j $o -N 128 -t u1 $rpm`
comm -23 <(sort file1.txt) <(grep -o '^^;*' file2.txt | sort)
comm -23 <(sort file1.txt) <(grep -o ';.*;' file2.txt | sort -t ';' -k 2)
comm -23 <(sort file1.txt) <(grep -o ';.*;.*;' file2.txt | sort -t ';' -k 3)
comm -23 <(sort file1.txt) <(grep -o ';.*;.*;.*;' file2.txt | sort -t ';' -k 4)
ls my*
ls *.html
tar xvf $myarchive && cd ${myarchive%.tar.gz}
tar xzf $myarchive && cd ${myarchive%.tar.gz}
tar xjf $myarchive && cd ${myarchive%.tar.gz}
bunzip2 file.bz2
gunzip file.gz
tar -xvf file.tar
awk -f script.awk file
grep pattern file
grep -o pattern file
grep -v pattern file
grep -r pattern .
crontab -u $user -l 2>/dev/null | grep -v '^$'
crontab -u $user -l 2>/dev/null | grep -v 'cron'
dig www.google.com ANY
dig google.com MX
dig google.com TXT
comm -12 <(find . -maxdepth 2 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 6 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 7 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 1)
find . -name '*my key phrase*'
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -n)
find . -name "*.txt"
find ~ -name "*.txt"
{ time sleep 2; } 2>&1 | grep real
{ time sleep 3; } 2>&1 | grep real
{ time sleep 4; } 2>&1 | grep real
awk '{print result =,$0}' <(rev file)
rev file
head -n 10 file
tail -n 10 file
grep pattern file
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +) ^ +/\1 7/' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) (^ +)/\130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) (^ +)/\11 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) (^ +[A-Z][a-z]{2}) /\11 /' | crontab -
mkdir dir
rmdir dir
cd dir
pwd
ln --force --target-directory=~/staging ~/mirror/*
ln -s /path/to/file file
ln -s /path/to/file dir/file
cut -f1 file
cut -f2 file
cut -f3 file
cut -f4 file
ls
ls -a
ls -latr
ls -a | sort
ls -a
ls -lt
ls -lS
df file
du -sh
which grep
which awk
which sed
which curl
which tar
which gzip
which gunzip
which bzip2
ifconfig en1 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ifconfig wlp2s0 | sed -n '/inet addr/s/.*addr.\(^ *\) .*/\1/p'
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}'
ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ifconfig | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'
ifconfig en1 | grep -Eo ..\(\:..\){5}
ifconfig en2 | grep -Eo ..\(\:..\){5}
ifconfig en3 | grep -Eo ..\(\:..\){5}
ifconfig en4 | grep -Eo ..\(\:..\){5}
ifconfig fw0 | grep -Eo ..\(\:..\){5}
ifconfig fw1 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo ..\(\:..\){5}
ifconfig fw3 | grep -Eo ..\(\:..\){5}
ifconfig fw4 | grep -Eo ..\(\:..\){5}
ifconfig mfib0 | grep -Eo ..\(\:..\){5}
ifconfig mfib1 | grep -Eo ..\(\:..\){5}
ifconfig mfib2 | grep -Eo ..\(\:..\){5}
ifconfig lo0 | grep -Eo ..\(\:..\){5}
ifconfig gif0 | grep -Eo ..\(\:..\){5}
ifconfig -a | awk '/^a-z/ { iface=$1; mac=$NF; next } /inet6 addr:/ { print mac }' | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
fg 2
fg 3
fg 4
fg 5
fg 6
fg 7
fg 8
source <(grep = file.ini | sed 's/ *= */=/g')
grep -w "word" file.txt
grep -i "word" file.txt
grep -v "word" file.txt
grep -c "word" file.txt
awk '/word/ {print}' file.txt
awk '!/word/ {print}' file.txt
tac file.txt | awk '/word/ {print}'
rename 's/\.txt$/\.bak/' file*.txt
cp file*.txt backup
mv file*.txt backup
lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3001 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3002 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3003 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3004 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3005 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3006 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3007 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3008 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
grep -w "bash" filename
grep -vw "bash" filename
grep -w "Bash" filename
grep -vw "Bash" filename
grep -i "bash" filename
grep -vi "bash" filename
grep -i "Bash" filename
head -n 10 filename
tail -n 10 filename
cut -c 1-10 filename
cut -c -10 filename
sed -n '1,10p' filename
sed -n '11,20p' filename
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'
fold -w30 longline | tr '\n' '_' | sed 's/_$/\n/'
fold -w30 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w30 longline | tr '\n' '+' | sed 's/+$/\n/'
fold -w30 longline | tr '\n' '=' | sed 's/=$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
sed -i 15i `date` test.html
sed -i 15i `time` test.html
sed -i 15i `whoami` test.html
sed -i 15i `pwd` test.html
cat file2 >> file1
cp file1 file2
touch file1
rm file1
head -n 10 file1
tail -n 10 file1
sort -r file1
ls -a
ls
cd ..
cd ~
mkdir [directory name]
rmdir [directory name]
cp [source file] [destination file]
mv [source file] [destination file]
env | awk -F= '/a-zA-Z_a-zA-Z_0-9*=/ { if (!system( -n \${ $1 +y}\ )) print $1 }' | sort | uniq
ls -a
ls -lS
pwd | cut -b2- | tr '/' '\n'
ls -a
ls
grep -r bash *
ls *.sh
cat ~/.bashrc
wc -l ~/.bashrc
ls | grep -P 'X'
ls | grep -P -v 'X'
ls -l | grep -P '^-..x'
ls -a
ls -lS
ls -lt
ls
ls -a
ls -latr
ls | grep x
ls | grep x$
ls | grep ^x
grep -r bash *
ls *.sh
cat ~/.bashrc
wc -l ~/.bashrc
tail ~/.bash_history
grep -l bash *
ls -l | grep "^-" | grep -v "^l"
ls -l | grep "^-" | grep "\."
cut -f1 infile
cut -f2 infile
cut -f3 infile
cut -f4 infile
ls a*
mv temp.txt test/
cp temp.txt test/
cat temp.txt
more temp.txt
cut -d: -f1 /etc/passwd
cut -d: -f1 /etc/group
who
ps -u www-data
join -j 2 file1 file2
split -l 100 file
uniq file
shuf file
tac file
sort file
head -n 10 file
sed -i 's/foo/bar/2' file
sed -i 's/foo/bar/3' file
sed -i 's/foo/bar/g' file
sed -i '/baz/!s/foo/bar/' file
sed -i '/baz/!s/foo/bar/2' file
sed -i '/baz/!s/foo/bar/3' file
mkdir /cpuset/newset
cset proc -t /cpuset/newset 1234
cset set -o 0-1 /cpuset/newset
mount -t ntfs-3g /dev/mapper/myvolume /media/volume
mount -t ntfs-3g /dev/sda1 /media/volume
mount -t ntfs-3g /dev/sdb2 /media/volume
mount -t ntfs-3g /dev/sdc3 /media/volume
mount -t ntfs-3g /dev/sdd4 /media/volume
mount -t ntfs-3g /dev/sde5 /media/volume
mount -t ntfs-3g /dev/sdf6 /media/volume
mount -t ntfs-3g /dev/sdg7 /media/volume
mount -t proc none /var/snmp4/proc
mount -t proc none /var/snmp5/proc
mount -t proc none /var/snmp6/proc
mount -t proc none /var/snmp7/proc
mount -t proc none /var/snmp8/proc
mount -t proc none /var/snmp9/proc
mount -t proc none /var/snmp10/proc
mount -t proc none /var/snmp11/proc
mount -t proc none /var/snmp12/proc
mount -t proc none /var/snmp13/proc
mount -t proc none /var/snmp14/proc
mount -t proc none /var/snmp15/proc
mount -t proc none /var/snmp16/proc
nl -nrz -w9 foobar
nl -nlz -w9 foobar
nl -nrsp -w9 foobar
nl -nls -w9 foobar
sort -b -n -k2.4 table
sort -b -n -k2.5 table
sort -b -n -k2.6 table
sort -b -n -k2.7 table
sort -b -n -k2.8 table
sort -b -n -k2.9 table
awk 'NR==16224, NR==16482-1; NR==16482 {print; exit}' file
head -n 10 file
tail -n 10 file
head -n -10 file
tail -n +10 file
grep bash file
grep -v bash file
grep bash[0-9] file
awk 'NR==16224, NR==16482' file
awk 'NR>=16224' file
awk 'NR<=16482' file
head -n 16224 file | tail -n +16224
less <(make 2>&1)
ping google.com | xargs -L 1 -I '{}' date '+%+: {}'
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping google.com | xargs -I '{}' date '+%+: {}'
ping www.google.fr | while read pong; do echo $(date): $pong; done
ping www.google.fr | while read pong; do echo $(time): $pong; done
ping www.google.fr | while read pong; do echo $pong: $(date); done
ping www.google.fr | while read pong; do echo $pong: $(time); done
ping www.google.fr | while read pong; do echo $(date); done
printf operator: `finger ${USER} | grep Name: | cut -f3 -d:` \n
pwd
ls
cd ~
mkdir foo
head -c 2000 /dev/zero | tr '\0' '*'
head -c 3000 /dev/zero | tr '\0' '*'
head -c 4000 /dev/zero | tr '\0' '*'
head -c 5000 /dev/zero | tr '\0' '*'
head -c 6000 /dev/zero | tr '\0' '*'
head -c 7000 /dev/zero | tr '\0' '*'
head -c 8000 /dev/zero | tr '\0' '*'
head -c 9000 /dev/zero | tr '\0' '*'
head -1 123456789
tail -1 123456789
head -2 123456789
tail -2 123456789
head -3 123456789
tail -3 123456789
head -4 123456789
tail -4 123456789
head -5 123456789
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $5}'
hostname -I | awk '{print $6}'
hostname -I | awk '{print $7}'
hostname -I | awk '{print $8}'
hostname -I | cut -d' ' -f2
hostname -I | cut -d' ' -f3
hostname -I | cut -d' ' -f4
dig @some.other.ip.address domain. a
dig @8.8.8.8 domain. a
dig @8.8.8.8 domain. mx
printf '%0.s-' $(seq 1 $variable)
printf '%0.s=' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s+' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\' $(seq 1 $variable)
printf '%0.s,' $(seq 1 $variable)
printf '%0.s.' $(seq 1 $variable)
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 100 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 1000 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print -----------------------------------------------------------------------;}'
column -t -s $'\t' table.txt
sed -e 's/,/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print -----------------------------------------------------------------------;}'
df . | awk '$3 ~ /0-9+/ { print $4 }'
df ~ | awk '$3 ~ /0-9+/ { print $4 }'
df / | awk '$3 ~ /0-9+/ { print $4 }'
df /usr | awk '$3 ~ /0-9+/ { print $4 }'
df /var | awk '$3 ~ /0-9+/ { print $4 }'
ping -c 50 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 75 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
$ cat 2
$ cat 3
$ cat 4
$ cat 5
$ cat 6
$ cat 7
$ cat 8
$ cat 9
od -t x1 -An file |tr -d '\n '
od -t o1 -An file |tr -d '\n '
od -t d1 -An file |tr -d '\n '
od -tu1 -An file |tr -d '\n '
od -td1 -An file |tr -d '\n '
od -t a1 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -tu2 -An file |tr -d '\n '
xxd -p file | tr -d '\n'
xxd -p file | tr -d '\n' | sed 's/ /,/g'
xxd -p file | tr -d '\n' | sed 's/ /:/g'
xxd -p file | tr -d '\n' | sed 's/ /;/g'
cut -d, -f1 file.csv
cut -d, -f$(($(head -n 1 file.csv | tr -cd ,)+1)) file.csv
grep foo file
grep bar file
fold -w1 file | pr -4t | sed 's/\s*-\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*_\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*\*\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*+\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*^\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t_ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t= ' | sed '$a\'
finger -l | grep Name: | cut -d : -f 3 | cut -c 2- | sort | uniq
finger -l 1000 | grep Name: | cut -d : -f 3 | cut -c 2-
finger -l 1001 | grep Name: | cut -d : -f 3 | cut -c 2-
finger -l 1002 | grep Name: | cut -d : -f 3 | cut -c 2-
finger -l 1003 | grep Name: | cut -d : -f 3 | cut -c 2-
finger -l 1004 | grep Name: | cut -d : -f 3 | cut -c 2-
fold -b16 | sed 's/../& /g'
fold -b8 | sed 's/../& /g'
fold -b4 | sed 's/../& /g'
history 20
history 30
history 40
wc -l `find`
wc -w `find`
comm -23 <(sort a.txt) <(sort b.txt)
comm -12 <(sort a.txt) <(sort b.txt)
comm -12 <(sort a.txt) <(sort b.txt)
comm -23 file1 file2
comm -13 file1 file2
gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/^/.^/*/\.\./,/,;t 1;s,:^=*=,:;,;s,;,;  ,g' | tr \; \\012
whoami
logname
id
groups
pwd
cd
ls
cp
mv
seq 10 | parallel -j4  echo '{}'
seq 20 | parallel -j4  echo '{}'
seq 30 | parallel -j4  echo '{}'
seq 40 | parallel -j4  echo '{}'
seq 50 | parallel -j4  echo '{}'
seq 60 | parallel -j4  echo '{}'
seq 70 | parallel -j4  echo '{}'
seq 80 | parallel -j4  echo '{}'
seq 90 | parallel -j4  echo '{}'
seq 10 | xargs -P4 -I'{}' echo '{}'
seq 20 | xargs -P4 -I'{}' echo '{}'
seq 30 | xargs -P4 -I'{}' echo '{}'
seq 40 | xargs -P4 -I'{}' echo '{}'
seq 10 | awk 'NR%2{printf("%s ", $0); next}1'
seq 20 | awk 'NR%5{printf("%s ", $0); next}1'
seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 10 | sed 'N;s/\n/ /'
seq 20 | sed 'N;s/\n/ /'
seq 1 100
seq 1 1000
seq 1 10000
seq 100 200
seq 1000 2000
dig MX example.com
dig TXT example.com
dig NS example.com
dig SOA example.com
dig A example.com
seq 1 10
seq 11 20
seq 21 30
seq 31 40
seq 41 50
seq -s' ' $start $end
seq -s',' $start $end
seq -s'\n' $start $end
seq 10 | xargs echo
seq 100 | xargs echo
seq 1000 | xargs echo
seq 10000 | xargs echo
seq 5 | perl -ne 'chomp; print $_ ; END{print \n}'
seq 5 | perl -ne 'chomp; print "$_\n" ; END{print \n}'
seq 5 | perl -ne 'chomp; print "$_," ; END{print \n}'
seq 5 | perl -ne 'chomp; print "$_\t" ; END{print \n}'
host -t ns mydomain.com
host -t a mydomain.com
host -t mx mydomain.com
hostname  -I | awk -F  '{print $1}'
hostname
dnsdomainname
hostname -f
hostname -i
hostname -I | awk '{print $1}'
hostname -f
hostname -i
hostname -A
sha1sum /path/to/destination/file
sha256sum /path/to/destination/file
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $6}' file1 | sort -u) <(awk '{print $6}' file2 | sort -u)
comm -12 <(awk '{print $7}' file1 | sort -u) <(awk '{print $7}' file2 | sort -u)
comm -12 <(awk '{print $8}' file1 | sort -u) <(awk '{print $8}' file2 | sort -u)
comm -12 <(awk '{print $9}' file1 | sort -u) <(awk '{print $9}' file2 | sort -u)
tail -n +3 $FILE
tail -n +4 $FILE
tail -n +5 $FILE
tail -n +6 $FILE
tail -n +7 $FILE
tail -n +8 $FILE
tail -n +9 $FILE
pwd
ls
cd ~
mkdir [directory name]
rmdir [directory name]
mv [source] [destination]
cp [source] [destination]
rm [file name]
cat [file name]
pwd
ls
cd ~
mkdir
rmdir
mv
cp
date --date='2 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='10 days ago' '+%a'
date --date='11 days ago' '+%a'
date --date='12 days ago' '+%a'
cut -d' ' -f1 input
rev input | cut -d' ' -f1 | rev
cut -d' ' -f2 input
cut -d' ' -f3 input
cut -d' ' -f4 input
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'
git log -10
git log --author="<author>"
git log --committer="<committer>"
git log --since="<date>" --until="<date>"
git log <file>
pwd
ls
cd ~
mkdir
rmdir
cp
mv
rm
cat
tail
head
wc -m file.txt | cut -f1 -d
wc -w file.txt | cut -f1 -d
wc -c file.txt | cut -f1 -d
wc -f file.txt | cut -f1 -d
tac
shuf
sort -r
sort
head -$opt $OPTARG
tail -$opt $OPTARG
head -n -$opt $OPTARG
tail -n +$opt $OPTARG
sed -n ${opt},${OPTARG}p $file
sed -n ${opt},\$p $file
tac $OPTARG
sort $OPTARG
sort -r $OPTARG
grep -w daemon /etc/passwd
grep -vw ssh /etc/services
grep 'd$' /etc/group
grep '!' /etc/shadow
date '+%Y' --date='1 day ago'
date '+%Y' --date='10 days ago'
date '+%Y' --date='100 days ago'
pwd | tr '/' '\n'
rev <<< "$(pwd)"
pwd | tr '[a-zA-Z]' '[n-za-mN-ZA-M]'
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n ,
pstree
cal 6 2009
\time -f%e sleep 2
\time -f%e sleep 3
\time -f%e sleep 4
\time -f%e sleep 5
\time -f%e sleep 6
\time -f%e sleep 7
\time -f%e sleep 8
$(readlink -f $(dirname $0))
pwd
cat filename
less filename
head filename
tail filename
cp source destination
mv source destination
echo $HOME
echo $PATH
echo $SHELL
echo $USER
echo $LOGNAME
echo $HOSTNAME
uptime
date
pwd
ls
pushd $(dirname `which $@`)
pushd $(dirname `which $@`)
pushd $(dirname `which $@`)
pushd $(dirname `which $@`)
pushd $(dirname `which $@`)
pushd $(dirname `which $@`)
pushd .
pushd .
pushd .
pushd .
pushd ${line/#\~/$HOME};
pushd .;
pushd -;
head -c 10 $0 | tr '\000-\377' '#'
head -c 20 $0 | tr '\000-\377' '#'
head -c 30 $0 | tr '\000-\377' '#'
head -c 40 $0 | tr '\000-\377' '#'
IFS=$'\n' read -d '' -ra files < <(find /foo -name *.txt)
IFS=$'\n' read -d '' -ra files < <(find /foo -type f)
IFS=$'\n' read -d '' -ra dirs < <(find /foo -type d)
find /foo -name *.txt
find /foo -type f
od -vtx1 /dev/midi2
od -vtx1 /dev/midi3
od -vtx1 /dev/midi4
od -vtx1 /dev/midi5
od -vtx1 /dev/midi6
od -vtx1 /dev/midi7
od -vtx1 /dev/midi8
od -vtx1 /dev/midi9
od -vtx1 /dev/midi10
od -vtx1 /dev/midi11
od -vtx1 /dev/midi12
od -vtx1 /dev/midi13
od -vtx1 /dev/midi14
od -vtx1 /dev/midi15
od -vtx1 /dev/midi16
mount --rbind /sys /var/snmp3/sys
mount --rbind /proc /var/snmp3/proc
mount --rbind /run /var/snmp3/run
mount --rbind /dev/pts /var/snmp3/dev/pts
mount /dev/sdb1 /media/usb0
mount --rbind /dev /var/snmp3/dev
mount --rbind /proc /var/snmp3/proc
mount --rbind /run /var/snmp3/run
chown user2:user2 -R subdir2
chown user3:user3 -R subdir3
chown user4:user4 -R subdir4
chown user5:user5 -R subdir5
chown user6:user6 -R subdir6
chown user7:user7 -R subdir7
chown user8:user8 -R subdir8
chown user9:user9 -R subdir9
chgrp -R project_dev /home/user2/project/dev
chgrp -R project_dev /home/user3/project/dev
chgrp -R project_dev /home/user4/project/dev
chgrp -R project_dev /home/user5/project/dev
chgrp -R project_dev /home/user6/project/dev
chgrp -R project_dev /home/user7/project/dev
chgrp -R project_dev /home/user8/project/dev
chgrp -R project_dev /home/user9/project/dev
head -n 10 filename
tail -n 10 filename
ls -a
ls -l
cat filename
cp source destination
mv source destination
ps -ef | awk '{print $1}'
ps -ef | awk '{print $2}'
ps -ef | awk '{print $3}'
ps -ef | awk '{print $4}'
ps -ef | awk '{print $5}'
ps -ef | awk '{print $6}'
ps -ef | awk '{print $7}'
ps -ef | awk '{print $8}'
mount / -o remount,rw
mount /dev/sda1 /mnt
mount /dev/sda2 /mnt
mount /dev/sda3 /mnt
mount /dev/fd0 /mnt
mkdir /mnt/cdrom
ls -l /etc/
cd /etc/
mkdir /etc/test
rmdir /etc/test
cp ./foo /etc/
mv ./foo /etc/
mount -o remount,ro /system
mount -o remount,ro /boot
mount -o remount,ro /home
mount -o remount,ro /
mount -o remount,ro /proc
mount -o remount,rw /system
mount -o rw /system
mount -o ro /system
mount -o rw,user /system
mount -o rw,remount -t rfs /dev/stl13 /system
mount -o rw,remount -t rfs /dev/stl14 /system
mount -o rw,remount -t rfs /dev/stl15 /system
mount -o rw,remount -t rfs /dev/stl16 /system
mount -o rw,remount -t rfs /dev/stl17 /system
mount -o rw,remount -t rfs /dev/stl18 /system
mount -o rw,remount -t rfs /dev/stl19 /system
mount -o rw,remount -t rfs /dev/stl20 /system
mount -o rw,remount -t rfs /dev/stl21 /system
mount -o rw,remount -t rfs /dev/stl22 /system
mount -o rw,remount -t rfs /dev/stl23 /system
mount -o rw,remount -t rfs /dev/stl24 /system
mount -o rw,remount -t rfs /dev/stl25 /system
mount -o rw,remount -t rfs /dev/stl26 /system
mount -o rw,remount -t rfs /dev/stl27 /system
mount -o rw,remount -t rfs /dev/stl28 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk5 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk6 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk7 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk8 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk9 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk10 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk11 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk12 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk13 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk14 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk15 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk16 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk17 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk18 /system
mount -o ro,remount -t yaffs2 /dev/block/mtdblk19 /system
mount
mount /mnt/cdrom
mount /mnt/floppy
mount --bind /usr/sbin /path/to/chroot/jail/usr/sbin
mount --bind /usr/lib /path/to/chroot/jail/usr/lib
mount --bind /usr/local/bin /path/to/chroot/jail/usr/local/bin
mount --bind /usr/local/sbin /path/to/chroot/jail/usr/local/sbin
ls -l
ls -a
ls -la
cd ~
rm !(*.txt)
rm !(*.jpg)
rm !(*.png)
rm !(*.gif)
rename 's/^456_//' *.txt
rename 's/^789_//' *.txt
rename 's/^012_//' *.txt
rename 's/^345_//' *.txt
PATH=$(echo $PATH | tr : \n | grep -v $1 | tr \n :)
PATH=$1:$PATH
echo $PATH | tr : '\n'
unalias ls
unalias grep
unalias mv
unalias rm
unalias mkdir
unalias cp
rm `ls -t | awk 'NR>10'`
rm `ls -t | awk 'NR>15'`
rm `ls -t | awk 'NR>20'`
rm `ls -t | awk 'NR>25'`
rm `ls -t | awk 'NR>30'`
rm `ls -t | awk 'NR>35'`
rm `ls -t | awk 'NR>40'`
rm `ls -t | awk 'NR>45'`
unalias ls
unalias grep
unalias mv
unalias cp
unalias rm
unalias mkdir
unalias rmdir
unalias cat
unalias more
unalias less
unalias vi
unalias vim
mv blah2 blah2-new
mv blah3 blah3-new
mv blah4 blah4-new
mv blah5 blah5-new
mv blah6 blah6-new
mv blah7 blah7-new
mv blah8 blah8-new
mv blah9 blah9-new
mv blah10 blah10-new
mv file1 file1-new
mv file2 file2-new
mv file3 file3-new
mv file4 file4-new
mv file5 file5-new
mv dir1 dir1-new
mv dir2 dir2-new
mv dir3 dir3-new
mv dir4 dir4-new
mv file0002.txt 2.txt
mv file0003.txt 3.txt
mv file0004.txt 4.txt
mv file0005.txt 5.txt
mv file0006.txt 6.txt
mv file0007.txt 7.txt
mv file0008.txt 8.txt
mv file0009.txt 9.txt
mv file0010.txt 10.txt
mv file0011.txt 11.txt
mv file0012.txt 12.txt
mv file002abc.txt abc2.txt
mv file003abc.txt abc3.txt
mv file004abc.txt abc4.txt
mv file005abc.txt abc5.txt
mv file006abc.txt abc6.txt
mv file007abc.txt abc7.txt
mv file008abc.txt abc8.txt
mv file009abc.txt abc9.txt
mv file010abc.txt abc10.txt
mv file011abc.txt abc11.txt
mv file012abc.txt abc12.txt
rename 's/\.html$/\.txt/' *.html
rename 's/\.htm$/\.txt/' *.htm
rename 's/\.xml$/\.txt/' *.xml
rename 's/\.csv$/\.txt/' *.csv
rename 's/\.js$/\.txt/' *.js
rename 's/_h.jpg/_half.jpg/' *.jpg
rename 's/_h.jpeg/_half.jpeg/' *.jpeg
rename 's/_h.gif/_half.gif/' *.gif
rename 's/_h.tif/_half.tif/' *.tif
rename 's/_h.tiff/_half.tiff/' *.tiff
head -n10 image.png
tail -n10 image.png
sed -n '6,15p' image.png
tail -n+11 image.png
head -n-10 image.png
sed -n '2~2p' image.png
sed -n '1~2p' image.png
sed ':a;N;$!ba;s/\n/ /g'
sed 's/^[ \t]*//'
sed 's/[ \t]*$//'
sed 's/\s\+/ /g'
grep -E '[a-zA-Z]'
grep -E '[^a-zA-Z]'
grep -E '[0-9]'
sed 'x;G;1!h;s/\n/ /g;$!d'
sed 's/^[ \t]*//'
sed 's/[ \t]*$//'
sed 's/\s\+/ /g'
sed -n '/\S/p'
sed -n '/[A-Za-z]/p'
sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g'
sed 's/^[ \t]*//'
sed 's/[ \t]*$//'
sed 's/\s\+/ /g'
grep -E '[a-zA-Z]'
grep -E '[0-9]'
grep -E '[a-zA-Z0-9]'
sed -e '{:q;N;s/\n/ /g;t q}' file
sed -i 's/foo/bar/g' file
sed -i 's/foo/bar/g' $(find . -type f)
echo "text" >> file
echo "text" | cat - file
head -n 10 file
tail -n 10 file
grep foo file
grep -v foo file
grep -E 'foo|bar' file
grep foo file | grep bar
sort file
sort -n file
tac file
cut -d' ' -f1 file
cut -d' ' -f2 file
cut -d' ' -f3 file
ls -a
ls -lS
ls -lt
df -h .
df -h
df -h $path_in_question | grep  $path_in_question$
ls
ls -a
ls -al
{ time sleep 2 ; } 2> time.txt
{ time sleep 3 ; } 2> time.txt
{ time sleep 4 ; } 2> time.txt
{ time sleep 5 ; } 2> time.txt
{ time sleep 6 ; } 2> time.txt
{ time sleep 7 ; } 2> time.txt
{ time sleep 8 ; } 2> time.txt
{ time sleep 2 2> sleep.stderr ; } 2> time.txt
{ time sleep 3 2> sleep.stderr ; } 2> time.txt
{ time sleep 4 2> sleep.stderr ; } 2> time.txt
time sleep 2
time sleep 3
time sleep 4
time sleep 5
time sleep 6
time sleep 7
time sleep 8
time sleep 9
TODAY=$(date  -d $(date +%F) +%s)
TODAY=$(date +%s)
TODAY=$(date +%s --date="$(date +%F)")
TODAY=$(date +%s --date="$(date +%Y-%m-1)")
dig @$ns $d A | grep $d | grep -v DiG
dig @$ns $d AAAA | grep $d | grep -v DiG
dig @$ns $d CNAME | grep $d | grep -v DiG
dig @$ns $d MX | grep $d | grep -v DiG
dig @$ns $d NS | grep $d | grep -v DiG
dig @$ns $d PTR | grep $d | grep -v DiG
make K_VERSION=`uname -r`
make K_VERSION=`uname -r` > output.txt
make K_VERSION=`uname -r` -v
doSecond= true
doThird= true
doFourth= true
doFifth= true
doSixth= true
doSeventh= true
doEighth= true
doNinth= true
doTenth= true
doEleventh= true
doTwelfth= true
doThirteenth= true
doFourteenth= true
doFifteenth= true
doSixteenth= true
doSeventeenth= true
doEighteenth= true
doNineteenth= true
doSecond= true
doThird= true
doFourth= true
doFifth= true
doSixth= true
doSeventh= true
doEighth= true
doNinth= true
doTenth= true
doEleventh= true
doTwelfth= true
doThirteenth= true
doFourteenth= true
doFifteenth= true
doSixteenth= true
doSeventeenth= true
doEighteenth= true
doNineteenth= true
false | echo `tty | sed 's:/dev/::'`
test | echo `tty | sed 's:/dev/::'`
[ | echo `tty | sed 's:/dev/::'`
[[ | echo `tty | sed 's:/dev/::'`
getopts | echo `tty | sed 's:/dev/::'`
hash | echo `tty | sed 's:/dev/::'`
pwd | echo `tty | sed 's:/dev/::'`
readonly | echo `tty | sed 's:/dev/::'`
shift | echo `tty | sed 's:/dev/::'`
times | echo `tty | sed 's:/dev/::'`
trap | echo `tty | sed 's:/dev/::'`
umask | echo `tty | sed 's:/dev/::'`
ip=$(hostname -I | awk '{print $1}')
hostname
domainname
netstat -nr | grep '^0\.0\.0\.0' | awk '{print $2}'
ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 3 | cut -d ' ' -f 1
d=$(date)
u=$(whoami)
h=$(hostname)
cwd=$(pwd)
f=$(<file>)
sysinfo=$(uname -a)
MERGE=$(cat $COMMIT_EDITMSG|grep -i 'merge'|wc -l)
CONFLICT=$(cat $COMMIT_EDITMSG|grep -i 'conflict'|wc -l)
ERROR=$(cat $COMMIT_EDITMSG|grep -i 'error'|wc -l)
Date=`date +%D`
Time=`date +%T`
Year=`date +%Y`
Month=`date +%m`
Day=`date +%d`
DC=`hostname | cut -b1,2`
DCL=`hostname | cut -b1,2,3`
DCLI=`hostname | cut -b1,2,3,4`
DCLIN=`hostname | cut -b1,2,3,4,5`
DCLINT=`hostname | cut -b1,2,3,4,5,6`
DCLINUX=`hostname | cut -b1,2,3,4,5,6,7`
DCLINUXA=`hostname | cut -b1,2,3,4,5,6,7,8`
sha1=`sha1sum ${my_iso_file} | awk '{ print $1 }'`
sha256=`sha256sum ${my_iso_file} | awk '{ print $1 }'`
md5=`md5sum ${my_other_file} | awk '{ print $1 }'`
sha1=`sha1sum ${my_other_file} | awk '{ print $1 }'`
filename=$(uname -n)-$(date +%F).txt
output=$(date)
output=$(uname)
username=$USER
home=$HOME
DBPREFIX=$(hostname -s).mysqldb
DBPREFIX=$(hostname -f).mysqldb
{ time ps; } 2>&1 |  cat > time.txt
{ time df; } 2>&1 |  cat > time.txt
{ time top; } 2>&1 |  cat > time.txt
{ time free; } 2>&1 |  cat > time.txt
{ time uptime; } 2>&1 |  cat > time.txt
set -- $(cal 2 1901)
set -- $(cal 2 1902)
set -- $(cal 2 1903)
set -- $(cal 2 1904)
set -- $(cal 2 1905)
set -- $(cal 2 1906)
set -- $(cal 2 1907)
set -- $(cal 2 1908)
set -- $(cal 2 1909)
set -- $(cal 2 1910)
set -- $(cal 2 1911)
set -- $(cal 2 1912)
set -- $(cal 2 1913)
set -- $(cal 2 1914)
set -- $(cal 2 1915)
set -- $(cal 2 1916)
set -- $(cal 2 1917)
set -- $(cal 2 1918)
set -- $(cal 2 1919)
local old_nocaseglob=$(shopt -p nocaseglob)
local old_nounset=$(shopt -p nounset)
local old_pipefail=$(shopt -p pipefail)
local old_posix=$(shopt -p posix)
local old_privileged=$(shopt -p privileged)
local old_radixsort=$(shopt -p radixsort)
local old_shiftround=$(shopt -p shiftround)
ls
ls -a
ls -al
grep -i 'foo' bar.txt
head -n 10 foo.txt
tail -n 10 foo.txt
less foo.txt
more foo.txt
wc -l foo.txt
wc -w foo.txt
history | grep -C 5 ifconfig
history | grep -C 5 cat
history | grep -C 5 ls
history | grep -C 5 chmod
zcat `find /my_home -name '*log.20140227*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140228*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140229*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140301*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140302*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140303*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140304*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140305*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140306*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140307*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140308*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140309*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140310*'`|grep 'vid=123'
ls -a
ls -l
ls -r
nl -ba  -nln  active_record.rb  | grep -C 2 '^111 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^222 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^333 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^444 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^555 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^666 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^777 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^888 '
ls
cd ~/Desktop
mkdir test
set -o noclobber
set -o errexit
set -o nounset
set -o noclobber
set -o errexit
set -o nounset
hostname myServersHostname
domainname myDomain.com
timedatectl set-timezone America/New_York
timedatectl set-ntp false && date 010100002020.00
hostname $(cat /etc/hostname)
domainname $(cat /etc/domainname)
timedatectl set-timezone $(cat /etc/timezone)
touch -r A B
touch -r A C
touch -r A D
touch -r A E
touch -r A F
touch -r A G
touch -r A H
touch -r A I
file=$( basename $1 )
dir=$( dirname $1 )
ext=$( extname $1 )
file=$( basename $( find $1 -type f -print0 | head -z -n 1 ) )
dir=$( dirname $( find $1 -type f -print0 | head -z -n 1 ) )
file=`basename $1`
dir=`dirname $1`
root=`rootdir $1`
ext=`ext $1`
echo $*
printf "%s\n" "$@"
echo $1
echo $2
echo $3
shift
shift 2
ls -a
ls -lS
ls -lt
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man chmod
man ls
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man cat
man less
man head
man tail
man sort
man uniq
man wc
ls -a
ls -lS
ls -lt
ps -p 20238
ps -A
ps -A -o %mem
ps -A -o %cpu
/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp inet6 | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp ether | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp broadcast | awk '{print $6}'
/usr/bin/ifconfig eth0 | grep --word-regexp netmask | awk '{print $4}'
ls
ls -a
ls -al
ls -r
ls
ls -a
ls -ar
ls -al
sort temp.txt -o temp.txt
sort temp2.txt -o temp2.txt
sort temp3.txt -o temp3.txt
sort temp4.txt -o temp4.txt
split -d -l $SPLITLIMT $INFILE x_
split -d -l $SPLITLIMT $INFILE y_
split -d -l $SPLITLIMT $INFILE z_
split -d -l $SPLITLIMT $INFILE a_
split -d -l $SPLITLIMT $INFILE b_
split -d -l $SPLITLIMT $INFILE c_
split -d -l $SPLITLIMT $INFILE d_
split -d -l $SPLITLIMT $INFILE e_
split -l 50000000 --filter=./filter.sh 2011.psv
tr '[:upper:]' '[:lower:]' < 2011.psv
sed '/delete/d' 2011.psv
grep 'print' 2011.psv
awk '{print $1}' 2011.psv
sort -k2 2011.psv
split -l10 ADDRESSS_FILE temp_file_
split -l5 ADDRESSS_FILE temp_file_
split -l 20 file.txt new
split -l 30 file.txt new
split -l 40 file.txt new
split --lines=1 --suffix-length=5 input.txt output.
split --lines=2 --suffix-length=5 input.txt output.
split --lines=3 --suffix-length=5 input.txt output.
split --lines=4 --suffix-length=5 input.txt output.
split -l 100 input_file output_file
split -l 200 input_file output_file
split -l 300 input_file output_file
split -l 400 input_file output_file
tmux new-session -s vims -n vim0 -d vim foo
tmux new-session -s vims -n vim1 -d vim bar
tmux new -d -s '$CMD'
tmux new -d -n '$CMD'
brew link git
brew link python
brew link ruby
brew link node
xargs -i rm '{}'
rm /path/to/file.txt
cut -d / -f 2- .exportfiles.text | xargs -n 1 dirname
cut -d / -f 3- .exportfiles.text | xargs -n 1 dirname
unset GIT_WORK_TREE
unset GIT_COMMITTER_EMAIL
unset GIT_AUTHOR_EMAIL
unset GIT_COMMITTER_NAME
unset GIT_AUTHOR_NAME
unset GNUPLOT_PS_DIR
unset GNUPLOT_PDF_DIR
unset GNUPLOT_CMD
unset array3
unset array4
unset array5
unset array6
unset array7
unset array8
zcat a.csv.gz | gawk '$2>5' FPAT='^|+'
zcat a.csv.gz | gawk '$3>5' FPAT='^|+'
zcat a.csv.gz | gawk '$4>5' FPAT='^|+'
zcat file.gz | awk -F'|' '$5>10'
zcat file.gz | awk -F'|' '$5>15'
zcat file.gz | awk -F'|' '$5>20'
zcat file.gz | awk -F'|' '$5>25'
zcat file.gz | awk -F'|' '$5>30'
zcat file.gz | awk -F'|' '$5>35'
zcat file.gz | awk -F'|' '$5>40'
zcat file.gz | awk -F'|' '$5>45'
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
source <(metaflac --show-tag ALBUM myfile.flac)
source <(metaflac --show-tag TITLE myfile.flac)
source <(metaflac --show-tag DATE myfile.flac)
source <(metaflac --show-tag TRACKNUMBER myfile.flac)
bzip2 -kv /*
bzip2 -kv /*/*
bzip2 -kv /*/*/*
bzip2 -kv /*/*/*/*
bzip2 -kv /*/*/*/*/*
gzip -l somefile.gz
gzip -d somefile.gz
gzip somefile
clear
cd ..
ls
mkdir
rmdir
cp
mv
clear
cd ~
ls -a
ls
cd ..
mkdir [directory name]
rmdir [directory name]
cp [source] [destination]
mv [source] [destination]
rm [file name]
cat [file name]
more [file name]
clear
cd ~
ls -a
pwd
mkdir [directory]
rmdir [directory]
rm [file]
cp [source] [destination]
mv [source] [destination]
cat [file]
history -c
history -d 3
history 5
history | grep "^s"
!!s*
man grep
man ls
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
ls -a
ls -l
ls -t
ls
ls -a
ls -al
awk '{print substr($0,0,80)}' file.txt
cut -c -80 file.txt
head -c 80 file.txt
sed -e 's/^.\{80\}//' -e '/./!d' file.txt
tail -c +80 file.txt
awk '{print substr($0,0,30)}' longline
awk '{print substr($0,0,30)}' longline
fold -w 11
fold -w 12
fold -w 13
fold -w 14
fold -w 15
fold -w 16
fold -w 17
fold -w 18
fold -w 19
ant
ant > build.log
ant 2>&1
bash myscript.sh
bash myscript.sh | tee output.log
bash myscript.sh 2> error.log
bash myscript.sh > output.txt
bash myscript.sh 2> error.txt
bash myscript.sh &> output_error.txt
./a.out | tee output
./a.out > output
./a.out 2>&1 | tee output
./a.out | tee output
./a.out 2>&1 | tee output
./a.out > output
./aaa.sh 1>&2 | tee -a log
./aaa.sh &>> log
./aaa.sh &> /dev/null
ls -l
ls -la
ls -latr
./aaa.sh | tee -a log
someCommand
someCommand > someFile
someCommand 2>&1
someCommand 2> someFile
someCommand >> someFile
someCommand 2>> someFile
someCommand | tee -a someFile
someCommand 2>&1 1>/dev/null | tee -a someFile
someCommand | tee someFile
bind '\e25~:pwd\n'
bind '\e26~:pwd\n'
bind '\e27~:pwd\n'
bind '\e28~:pwd\n'
bind '\e29~:pwd\n'
bind '\e30~:pwd\n'
bind '\e31~:pwd\n'
bind '\e32~:pwd\n'
bind '\e33~:pwd\n'
bind '\e34~:pwd\n'
bind '\e35~:pwd\n'
bind '\e36~:pwd\n'
bind '\e37~:pwd\n'
bind '\e38~:pwd\n'
chown -v root /path/to/yourapp
chown root it
chgrp root it
chmod u=r it
chmod g=r it
chmod o=r it
chmod u+w it
chmod g+w it
chmod o+w it
chmod u+x it
chmod g+x it
chgrp group_name file
chown user_name:group_name file
chmod mode file
chmod -R mode dir
chown -R user_name dir
chgrp -R group_name dir
bind -p | grep $'\x61'
bind -p | grep $'\x62'
bind -p | grep $'\x63'
bind -p | grep $'\x64'
bind -p | grep $'\x65'
bind -p | grep $'\x66'
bind -p | grep $'\x67'
bind -p | grep $'\x68'
bind -p | grep $'\x69'
bind -p | grep $'\x6A'
bind -p | grep $'\x6B'
man grep
man chmod
man ls
man cp
man mv
man rm
man mkdir
man rmdir
man touch
find . -name "*.ext"
ls
ls -a
ls -al
find . -name "*.txt"
ls
bind '\e[D':backward-char
bind '\e[C':forward-char
bind '\e[1~':beginning-of-line
bind '\e[4~':end-of-line
bind '\e[A':previous-line
cd /etc
ls -l
mkdir new_directory
rmdir old_directory
mv file1 file2
curl -O url
curl -o filename url
curl --http1.1 url
curl --port port url
bind -p|grep -i 'pE'
bind -p|grep -i 'cS'
bind -p|grep -i 'vM'
bind -p|grep -i 'tR'
bind -p|grep -i 'gH'
bind -p|grep -i 'bN'
bind -P | grep '\\e\\C-k'
bind -P | grep '\\e\\C-j'
bind -P | grep '\\e\\C-l'
bind -P | grep '\\e\\C-m'
bind -P | grep '\\e\\C-n'
bind -P | grep '\\e\\C-o'
tac a.txt | awk 'NF{print $NF; exit}'
tac b.txt | awk 'NF{print $NF; exit}'
tac c.txt | awk 'NF{print $NF; exit}'
tac d.txt | awk 'NF{print $NF; exit}'
tac e.txt | awk 'NF{print $NF; exit}'
tac f.txt | awk 'NF{print $NF; exit}'
tac g.txt | awk 'NF{print $NF; exit}'
tac h.txt | awk 'NF{print $NF; exit}'
tac i.txt | awk 'NF{print $NF; exit}'
head -n 10 parse.txt > newparse.txt
tail -n 10 parse.txt > newparse.txt
grep -w "word" parse.txt > newparse.txt
grep -v "word" parse.txt > newparse.txt
sort parse.txt > newparse.txt
sort -r parse.txt > newparse.txt
head -n 10 filename
tail -n 10 filename
sed '11,$!d' filename
sed '1,$!d' filename
sed -i.bak '1,10d' filename
sed -i.bak '$d' filename
sed -i.bak '11,$d' filename
su -c 'bash --rcfile myfile'
su -c 'bash --rcfile myfile' bob
su -c 'bash --rcfile myfile' alice
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias ........='cd ../../../../../../..'
alias .........='cd ../../../../../../../..'
alias ..........='cd ../../../../../../../../..'
alias -g X3=| cut -d' ' -f3
alias -g X4=| cut -d' ' -f4
alias -g X5=| cut -d' ' -f5
alias -g X6=| cut -d' ' -f6
alias -g X7=| cut -d' ' -f7
alias -g X8=| cut -d' ' -f8
alias -g X9=| cut -d' ' -f9
alias c2=awk '{print \$2}'
alias c3=awk '{print \$3}'
alias c4=awk '{print \$4}'
alias c5=awk '{print \$5}'
alias c6=awk '{print \$6}'
alias c7=awk '{print \$7}'
alias c8=awk '{print \$8}'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias cd..='cd ../..'
alias cd...='cd ../../..'
alias cd....='cd ../../../..'
alias cd.....='cd ../../../../..'
alias ls-a='ls -a'
alias ls-l='ls -l'
alias update='sudo apt-get update && sudo apt-get upgrade'
alias cls='clear'
alias dir='ls -l'
alias ..='cd ..'
alias home='cd ~'
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias l='ls -l'
alias la='ls -la'
alias ll='ls -ll'
alias ls='ls -a'
alias l='ls -l'
alias la='ls -la'
alias ll='ls -ll'
alias ll='ls -l'
alias la='ls -a'
alias lr='ls -r'
alias lt='ls -t'
alias ld='ls -d'
alias lm='ls -m'
alias lh='ls -h'
alias lx='ls -x'
alias lk='ls -k'
alias lS='ls -S'
alias doresetit='eval `resetit-sh`'
alias dogetit='eval `getit-sh`'
alias ..=cd ..
alias ...=cd ../..
alias bar=$'echo B \'*\' is born at $(date)'
alias baz=$'echo C \'*\' is born at $(date)'
alias qux=$'echo D \'*\' is born at $(date)'
alias quux=$'echo E \'*\' is born at $(date)'
alias corge=$'echo F \'*\' is born at $(date)'
alias grault=$'echo G \'*\' is born at $(date)'
alias garply=$'echo H \'*\' is born at $(date)'
alias waldo=$'echo I \'*\' is born at $(date)'
alias fred=$'echo J \'*\' is born at $(date)'
alias plugh=$'echo K \'*\' is born at $(date)'
alias xyzzy=$'echo L \'*\' is born at $(date)'
alias foo='BAR=baz'
alias foo="BAR=baz"
alias foo='BAR="baz"'
alias foo="BAR='baz'"
alias foo='BAR=`baz`'
alias foo="BAR=`baz`"
alias foo='BAR=$(baz)'
alias bar=pwd
alias baz=ls
alias git-root='cd $(git rev-parse --show-cdup)'
alias git-status='git status'
alias git-add='git add .'
alias git-commit='git commit -m'
alias go='GOPATH=$(infer-gopath.sh) go'
alias godoc='godoc -http=:6060'
alias gocode='gocode -s -a -i -t .'
alias gofmt='gofmt -w .'
alias j8='JAVA_HOME=`/usr/libexec/java_home -v 1.8`'
alias j9='JAVA_HOME=`/usr/libexec/java_home -v 9`'
alias j10='JAVA_HOME=`/usr/libexec/java_home -v 10`'
alias l='ls -l'
alias la='ls -la'
alias ll='ls -l'
alias l='ls'
alias lr='ls -R'
alias lt='ls -lt'
alias ltr='ls -ltr'
alias lf='ls -F'
alias lvim=vim -c \normal '0\'
alias ll=ls -l
alias la=ls -a
alias lli=ls -li
alias lr=ls -r
alias ls=¨ls -l¨
alias rm=¨rm -rf¨
alias cp=¨cp -r¨
alias mycd=cd `echo $1`
alias myls=ls `echo $1`
alias mymv=mv `echo $1`
alias myrm=rm `echo $1`
alias mycat=cat `echo $1`
alias mychmod=chmod `echo $1`
alias mycp=cp `echo $1`
alias myfind=find `echo $1`
alias mygrep=grep `echo $1`
alias mykill=kill `echo $1`
alias mymkdir=mkdir `echo $1`
alias mymore=more `echo $1`
alias mymv=mv `echo $1`
alias myps=ps `echo $1`
alias prettyjson='python -m json.tool'
alias l='ls -l'
alias la='ls -la'
alias ll='ls -ll'
alias ls='ls -a'
alias c='clear'
alias mv='mv -i'
alias cp='cp -i'
alias rm='rm -i'
alias unix=date +%s
alias windows=date /t
alias mac=date +%s
alias now=date +%s
alias tomorrow=date +%s+1d
alias yesterday=date +%s-1d
alias nextweek=date +%s+1w
alias unix='echo $(date +%s)'
alias windows='echo %time%'
alias now='echo $(date)'
alias today='echo $(date +"%A, %B %-d, %Y")'
alias yesterday='echo $(date --date="yesterday")'
alias tomorrow='echo $(date --date="tomorrow")'
alias week='echo $(date +"%V")'
alias month='echo $(date +"%m")'
alias myip='curl ifconfig.me'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
alias autoremove='sudo apt-get autoremove'
alias clean='sudo apt-get clean'
alias mydisk='df -h'
alias myram='free -m'
alias myip='curl ifconfig.me'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
alias autoremove='sudo apt-get autoremove'
alias clean='sudo apt-get clean'
alias edit_hosts='sudo nano /etc/hosts'
man grep
man chmod
man ls
man cp
man mv
man rm
man mkdir
man rmdir
man touch
top -bn1 | grep '^Cpu' | awk '{print $2}'
top -bn1 | grep '^Cpu' | awk '{print $4}'
top -bn1 | grep '^Cpu' | awk '{print $6}'
top -bn1 | grep '^Cpu' | awk '{print $8}'
top -n1 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -d5 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n1 | grep firefox | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -bn1 | sed -n '/Cpu/p' | awk '{print $2}' | sed 's/..,//'
top -bn1 | sed -n '/Cpu/p' | awk '{print $4}' | sed 's/..,//'
top -bn1 | sed -n '/Cpu/p' | awk '{print $6}' | sed 's/..,//'
grep MemTotal /proc/meminfo | awk '{print $2}'
grep MemFree /proc/meminfo | awk '{print $2}'
top -b -n1 | head -12 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 -c  | grep -A 2 '^$'
top -b -n1 -c  | grep -A 4 '^$'
ps aux
ps -aux
ps -ef
ps -eF
top -u abc -d 30 -b -n 10
top -u def -d 30 -b -n 10
top -u ghi -d 30 -b -n 10
top -u jkl -d 30 -b -n 10
top -u mno -d 30 -b -n 10
top -u pqr -d 30 -b -n 10
top -u stu -d 30 -b -n 10
top -u vwx -d 30 -b -n 10
top -p $(pgrep --newest ProgramName)
htop -p $(pgrep --newest ProgramName)
iotop -p $(pgrep --newest ProgramName)
atop -p $(pgrep --newest ProgramName)
top -p $(pgrep --oldest ProgramName)
top -p $(pgrep --oldest-pid ProgramName)
nl -s prefix_ a.txt | cut -c7-
nl -s _suffix a.txt | cut -c7-
nl -s 'prefix_suffix_' a.txt | cut -c7-
sed -n '1~3p' a.txt
sed -n '2~3p' a.txt
nl -ba infile
nl -ba -n 10 infile
nl -ba -n 10 -i 5 infile
nl -bn infile
nl -bn -n 10 infile
pushd $HOME/Documents
pushd $HOME/Downloads
pushd $HOME/Music
chmod +x a.out
chmod u+rw foo.txt
chmod g+rwx bar.txt
chmod o+rx baz.txt
chmod 0 qux.txt
chmod u-w foo.txt
chmod g-r bar.txt
chmod o+x baz.txt
sed 's/.*/& Bytes/' $TEMPFILE | column -t
sed 's/.*/& Kilobytes/' $TEMPFILE | column -t
sed 's/.*/& Megabytes/' $TEMPFILE | column -t
sed 's/.*/& Gigabytes/' $TEMPFILE | column -t
sed 's/.*/& Terabytes/' $TEMPFILE | column -t
screen -xr 15987
screen -xr 16458
screen -xr 17298
screen -xr 18367
screen -xr 19592
screen -xr 20359
screen -xr 21436
sha1sum $ecriv
cksum $ecriv
pwd
df
who
ps
hostname
ls
cp file1.txt file2.txt
mv file1.txt file2.txt
md5sum `which gcc`
md5sum `which g++`
md5sum `which make`
md5sum `which cmake`
octave -q --eval 'printf (%f\n, cos(0:0.1:pi/2))'|nl|tee y.txt
octave -q --eval 'printf (%f\n, tan(0:0.1:pi/2))'|nl|tee y.txt
octave -q --eval 'printf (%f\n, cot(0:0.1:pi/2))'|nl|tee y.txt
octave -q --eval 'printf (%f\n, sec(0:0.1:pi/2))'|nl|tee y.txt
ls -a
ls -lS
ls -lt
ls -ltr
mkdir <directory name>
crontab -l | sed '/bnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/cnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/dnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/enm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/fnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/gnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/inm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/jnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/knm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/lnm\.sh/s#\/5#\/10#' | crontab -
ls -a
ls -l
ls -r
pwd
ls
ls -a
ls -l
ls -la
cd ..
mkdir dir
rmdir dir
rm -r dir
mv file1 dir
cp file1 dir
mv file1 file2
cat file
head file
pwd
ls
ls -a
ls -l
ls -lh
ls -lt
ls -ltr
ls -lS
mkdir [directory]
rmdir [directory]
mv [source] [destination]
cp [source] [destination]
rm [file or directory]
cat [file]
less [file]
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
ps aux
ps -ef
pstree
pwd
mkdir
rmdir
comm -23 <(sort -n f1.txt) <(sort -n f2.txt)
comm -13 <(sort -n f1.txt) <(sort -n f2.txt)
comm -23 <(sort f1.txt) <(sort f2.txt)
comm -13 <(sort f1.txt) <(sort f2.txt)
ls
ls -a
ls -al
ls -r
cat file.txt
mv file.txt ~/.Trash
rm -rf ~/.Trash/*
mkdir new_directory
rmdir directory
touch new_file
tar -czvf etc.tar.gz /etc/
gzip foo
bzip2 bar
xz baz
paste -s -d' \n' input.txt
paste -d, input.txt
cut -f1 input.txt
cut -f2 input.txt
cut -f3 input.txt
cut -f4 input.txt
yes '1111111111111111' | tr -d '\n' > /dev/to/overwrite
yes '2222222222222222' | tr -d '\n' > /dev/to/overwrite
yes '3333333333333333' | tr -d '\n' > /dev/to/overwrite
yes '4444444444444444' | tr -d '\n' > /dev/to/overwrite
yes '5555555555555555' | tr -d '\n' > /dev/to/overwrite
yes '6666666666666666' | tr -d '\n' > /dev/to/overwrite
yes '7777777777777777' | tr -d '\n' > /dev/to/overwrite
yes '8888888888888888' | tr -d '\n' > /dev/to/overwrite
cal -h 03 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 04 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 11 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
ls
ls -a
ls -l
ls -lt
mkdir <directory name>
rmdir <directory name>
ls -l
ls
ls -a
ls -al
diff -U 1 file1 file2 | grep -v ^@ | wc -l
diff -U 2 file1 file2 | grep -v ^@ | wc -l
diff -U 3 file1 file2 | grep -v ^@ | wc -l
diff -U 4 file1 file2 | grep -v ^@ | wc -l
diff -U 5 file1 file2 | grep -v ^@ | wc -l
diff -U 6 file1 file2 | grep -v ^@ | wc -l
diff -U 7 file1 file2 | grep -v ^@ | wc -l
diff -U 8 file1 file2 | grep -v ^@ | wc -l
whoami
pwd
ls
cd
mkdir
rmdir
touch
rm
cp
who -u | sed 1d | wc -l
who -s | sed 1d | wc -l
who -b | sed 1d | wc -l
who -r | sed 1d | wc -l
find /usr/src -name *.html | xargs /usr/bin/grep -l foo
find /usr/src -name *.html | xargs /usr/bin/grep -l foo | xargs -I {} readlink -f {}
find /usr/src -name *.html | xargs /usr/bin/grep -l foo | xargs -I {} wc -l {}
ls -l
ls -a
ls -al
cp file1 file2
ls
ls -a
ls -al
ls -r
wc -l *.php
wc -l *.js
wc -l *.css
awk '{print $1}' filename
awk '{print $2}' filename
awk '{print $3}' filename
awk '{print $4}' filename
awk '{print $5}' filename
awk '{print $6}' filename
awk '{print $7}' filename
awk '{print $8}' filename
awk '{print $9}' filename
screen
screen -d
ssh-keygen -f ~/.ssh/id_rsa
ln -s .bashrc .bash_profile
ln -s .bashrc .inputrc
ln -s .bashrc .profile
ln -s /lib/libc.so.6 /lib/libc.so.1
ln -s /lib/libc.so.6 /lib/libc.so.2
ln -s /lib/libc.so.6 /lib/libc.so.3
ln -s /lib/libc.so.6 /lib/libc.so.4
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_
tar cz my_large_file_3 my_large_file_4 | split -b 1024MiB - myfiles_split.tgz_
rand_str=$(mktemp --dry-run ${str// /X})
rand_str=$(mktemp --dry-run ${str//[aeiou]/X})
rand_str=$(mktemp --dry-run ${str//[0-9]/X})
var=`hg st -R $path | tr -d '\n'`
rm -r *
rm -r foo/*
rm bar.txt
tail -n +2 $FILE > $FILE.tmp && mv $FILE.tmp $FILE
head -n -1 $FILE > $FILE.tmp && mv $FILE.tmp $FILE
head -n 1 $FILE > $FILE.tmp && tail -n +3 $FILE >> $FILE.tmp && mv $FILE.tmp $FILE
head -n 2 $FILE > $FILE.tmp && tail -n +4 $FILE >> $FILE.tmp && mv $FILE.tmp $FILE
head -n 3 $FILE > $FILE.tmp && tail -n +5 $FILE >> $FILE.tmp && mv $FILE.tmp $FILE
head -n 4 $FILE > $FILE.tmp && tail -n +6 $FILE >> $FILE.tmp && mv $FILE.tmp $FILE
sed '/start/,+3d'
sed '/start/,+2d'
sed '/start/,+1d'
tail
head
cut
shopt -u compat32
shopt -u compat40
shopt -u compat41
shopt -u compat42
shopt -s compat31
shopt -s compat32
shopt -s compat40
shopt -s compat41
shopt -u nounset
shopt -u pipefail
column -x -c 30 /tmp/file
column -x -c 40 /tmp/file
column -x -c 50 /tmp/file
column -x -c 60 /tmp/file
column -x -c 70 /tmp/file
column -x -c 80 /tmp/file
column -x -c 90 /tmp/file
uname -n
uname -o
uname -v
uname -r
diff -y -C2 one.txt two.txt
diff -c one.txt two.txt
diff -u one.txt two.txt
diff -a -y a.txt b.txt
diff -u a.txt b.txt
diff <(ls /etc) <(ls /usr/etc)
diff <(ls /home) <(ls /usr/home)
diff <(ls /var) <(ls /usr/var)
diff <(ls /tmp) <(ls /usr/tmp)
diff <(ls /opt) <(ls /usr/opt)
diff <(ls /mnt) <(ls /usr/mnt)
awk '{printf %s , $0} END {printf \n}' inputfile
awk '{printf %s\t , $0} END {printf \n}' inputfile
awk '{printf %s , $0}' inputfile
head -10 inputfile
tail -10 inputfile
sed '1,10d' inputfile
sed '10,$d' inputfile
ls
cd
mkdir
rmdir
cp
mv
df '/some/directory' | awk '{print $1, $6}'
df -h '/some/directory'
df -h
mount
tmux attach -t $(echo $USER)
tmux attach -t $(echo $SESSIONNAME)
echo $SHELL
export SHELL=/bin/bash
echo $HOME
export HOME=/home/user
echo $PATH
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s completion_ignore_case
shopt -s correctall
shopt -s direxpand
shopt -s dirspell
shopt -s dotglob
shopt -s execfail
shopt -s expand_aliases
shopt -s cdable_vars
shopt -s cdspell
shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s compat31
shopt -s compat32
shopt -s compat40
shopt nocaseglob
echo $HOME
echo $PATH
echo $SHELL
echo $USER
echo $TERM
echo $HOSTNAME
echo $RANDOM
FOO=bar
echo $PATH
PATH=$PATH:/foo/bar
echo $HOME
FOO=bar
echo $SHELL
alias
shopt
set -o
export
env
env -i
unset
help
ssh askapache 'nohup sh -c ( ( chown -R ask:ask /www/askapache.com &>/dev/null ) & )' &
ssh root@something 'pwd'
ssh root@something 'date'
ssh root@something 'whoami'
ssh root@something 'df -h'
ssh root@something 'du -sh'
ssh root@something 'free -m'
ssh root@something 'ps aux'
ssh -t genja.org 'ssh raptor.lan hostname'
watch --color 'tput setaf 2; echo foo'
watch --color 'tput setaf 3; echo foo'
watch --color 'tput setaf 4; echo foo'
watch --color 'tput setaf 5; echo foo'
watch --color 'tput setaf 6; echo foo'
watch --color 'tput setaf 7; echo foo'
watch --color 'tput setaf 8; echo foo'
watch --color 'tput setaf 9; echo foo'
watch --color 'tput setaf 10; echo foo'
watch --color 'tput setaf 11; echo foo'
watch --color 'tput setaf 12; echo foo'
watch --color 'tput setaf 13; echo foo'
/usr/bin/grep $*
/usr/bin/awk $*
/usr/bin/sed $*
/usr/bin/sort $*
/usr/bin/uniq $*
/usr/bin/wc $*
/usr/bin/head $*
exit 0
exit 2
exit 3
exit 4
exit 5
exit 6
exit 7
exit 8
pushd /home/`whoami`/Documents
cd ~`whoami`
export PS1='$(whoami)@$(hostname):'
export PS2='>'
export PS3='#'
export PS4='+'
ls my*
ls *.html
awk '{s+=$1} END {printf "%.0f\n", s}' mydatafile
awk '{s+=$1} END {print s}' mydatafile
awk '{s+=$1} END {print int(s)}' mydatafile
awk '{s+=$1} END {printf "%d\n", s}' mydatafile
awk '{s+=$1} END {print s}' mydatafile
awk '{s+=$1} END {print s/NR}' mydatafile
awk 'BEGIN {max = -999999999} {if ($1 > max) max = $1} END {print max}' mydatafile
awk 'BEGIN {min = 999999999} {if ($1 < min) min = $1} END {print min}' mydatafile
cut -f1 mydatafile
cut -f2 mydatafile
cut -f3 mydatafile
cut -f4 mydatafile
crontab -u user2 -l | sed $my_wonderful_sed_script | crontab -u user2 -
crontab -u $user -l 2>/dev/null | grep -v '^$'
crontab -u $user -l 2>/dev/null | grep -v '^#'
crontab -u $user -l 2>/dev/null | grep -v '^ '
dig www.google.com ANY
dig google.com MX
dig google.com TXT
stat -c %h your_file
stat -c %i your_file
stat -c %d your_file
stat -c %s your_file
stat -f %S .
stat -f %b .
comm -12 <(find . -maxdepth 2 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 6 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 7 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 1)
while read line ; do cp $line ~/bar ; done < <(find . | grep foo)
find . -name '*my key phrase*'
for d in /home/*/; do find $d -type d -name etc | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name boot | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name dev | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name lib | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name media | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name mnt | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name opt | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name sbin | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name srv | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name tmp | grep -q . || echo $d; done
for d in /home/*/; do find $d -type d -name usr | grep -q . || echo $d; done
for i in `find . | grep .xml$`; do bzip2 $i&; done
for i in `find /tmp/data | grep .xml$`; do bzip2 $i&; done
for i in `find /tmp/data | grep .xml$`; do gzip $i&; done
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -n)
{ time sleep 2; } 2>&1 | grep real
{ time sleep 3; } 2>&1 | grep real
{ time sleep 4; } 2>&1 | grep real
{ time sleep 5; } 2>&1 | grep real
{ time sleep 1; } 2>&1 | grep user
{ time sleep 2; } 2>&1 | grep user
{ time sleep 3; } 2>&1 | grep user
{ time sleep 4; } 2>&1 | grep user
pwd
ls
cd
history
sudo
mkdir
cp
mv
rm
cat
find
gzip
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +) ^ +/\1 7/' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) (^ +)/\130 \3/' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) (^ +)/\145 \3/' | crontab -
awk '{print $1}' file
awk '{print $2}' file
awk '{print $3}' file
awk '{print $4}' file
ps -A | wc -l
ps -e | wc -l
ps -ef | wc -l
ps -aux | wc -l
ps -Al | wc -l
top -bn1 | sed -n '/Cpu/p' | awk '{print $3}' | sed 's/..,//'
top -bn1 | sed -n '/Cpu/p' | awk '{print $4}' | sed 's/..,//'
top -bn1 | sed -n '/Cpu/p' | awk '{print $5}' | sed 's/..,//'
top -b -n1 | head -12 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -c -p $(pgrep -d',' -f string_to_match_in_cmd_line)
ps aux | grep string_to_match_in_cmd_line
ps -u username | grep string_to_match_in_cmd_line
top -b -p `pidof a.out` -n 100
htop -b -p `pidof a.out` -n 100
ps -b -p `pidof a.out` -n 100
top -p $(pgrep --newest ProgramName)
htop -p $(pgrep --newest ProgramName)
top -p $(pgrep --oldest ProgramName)
top -p $(pgrep --oldest-pid ProgramName)
nl -s prefix file.txt | cut -c7-
nl -s suffix file.txt | cut -c7-
paste -d joinstring file.txt
cut -f1 file.txt
cut -f2 file.txt
cut -f3 file.txt
cut -f4 file.txt
nl -s prefix_ a.txt | cut -c7-
nl -s _suffix a.txt | cut -c7-
nl -s 'prefix_suffix' a.txt | cut -c7-
sed -n 1~3p a.txt
sed -n 2~3p a.txt
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping yahoo.com | xargs -L 1 -I '{}' date '+%c: {}'
ping msn.com | xargs -L 1 -I '{}' date '+%c: {}'
ping amazon.com | xargs -L 1 -I '{}' date '+%c: {}'
ping host | perl -nle 'print scalar(localtime),  , $_'
date
date +%T
date +%D
nl -ba infile
nl -ba -n 10 infile
nl -ba -n 10 -i 5 infile
nl -bn infile
nl -bn -n 10 infile
pushd $HOME/Documents
pushd $HOME/Downloads
pushd $HOME/Music
sed 's/.*/& Bytes/' $TEMPFILE | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -r | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -k2 | column -t
screen -xr 14314
screen -xr 14315
screen -xr 14316
screen -xr 14317
screen -xr 14318
screen -xr 14319
screen -xr 14320
screen -xr 14321
screen -xr 14322
screen -xr 14323
sha1=$(sha1sum ${my_iso_file})
sha256=$(sha256sum ${my_iso_file})
tar -czf $dest_file $dir
tar -xzf $source_file -C $dest_dir
cp $source_file $dest_file
mv $source_file $dest_file
mkdir -p $dir
rm -rf $dir
ls -R $dir
ls $dir
cd $dir
ls
cp *.cpp /tmp
mv *.o /tmp
rm *.out
mkdir project
md5sum `which gcc`
md5sum `which g++`
md5sum `which make`
md5sum `which cmake`
seq 100000 | paste -sd+ | bc -l
seq 99999 | paste -sd+ | bc -l
seq 99998 | paste -sd+ | bc -l
seq 99997 | paste -sd+ | bc -l
seq 99996 | paste -sd+ | bc -l
seq 99995 | paste -sd+ | bc -l
seq 99994 | paste -sd+ | bc -l
crontab -l | sed '/bnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/cnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/dnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/enm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/fnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/gnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/inm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/jnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/knm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/lnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/bnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/cnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/dnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/enm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/fnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/gnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/inm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/10,' | crontab -
ls -l /path/to/pdf
pwd
mkdir /path/to/newdirectory
rmdir /path/to/newdirectory
mv file1.txt /path/to/destination
cp file1.txt /path/to/destination
cd $(basename $1 .tar.gz)
cd $(basename $1 .tgz)
cd $(basename $1 .tar)
cd $(basename $1 .zip)
cd $(basename $1 .rar)
chown root script.sh
chown user_name file
chgrp group_name folder
chgrp group_name file
chmod 755 folder
chmod 644 file
cp file1 file2
mv file1 file2
chown $FUID $FILE2
chgrp $FGID $FILE2
chmod u+r $FILE2
chmod u+w $FILE2
chmod u+x $FILE2
chmod g+r $FILE2
chmod g+w $FILE2
chmod g+x $FILE2
chmod a+r $FILE2
chmod a+w $FILE2
chmod 644 .bash_logout .bashrc .profile
chmod 444 *
chmod 644 *
chmod 444 /etc/*
chown root it
chgrp root it
chown $JBOSS_USER $JBOSS_HOME
chgrp $JBOSS_GROUP $JBOSS_CONSOLE_LOG
chgrp $JBOSS_GROUP $JBOSS_HOME
chmod 775 $JBOSS_CONSOLE_LOG
chgrp group destination_dir
chown user:group destination_dir
chmod mode destination_dir
pwd
cd ..
mkdir foo
rmdir foo
rm foo
cp foo bar
chown amzadm.root  /usr/bin/aws
chown root.root /usr/bin/aws
is_nullglob=$(shopt -s | egrep -i '*nullglob')
is_nounset=$(shopt -s | egrep -i '*nounset')
is_pipefail=$(shopt -s | egrep -i '*pipefail')
is_errexit=$(shopt -s | egrep -i '*errexit')
is_noclobber=$(shopt -s | egrep -i '*noclobber')
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
ps -A
ps -A -o pid
ps -A -o ppid
ps -A -o pid,ppid
ps -A -o cmd
ps aux
comm -23 <(sort -n f1.txt) <(sort -n f2.txt)
comm -13 <(sort -n f1.txt) <(sort -n f2.txt)
comm -23 <(sort f1.txt) <(sort f2.txt)
comm -13 <(sort f1.txt) <(sort f2.txt)
tar -czvf etc.tar /etc/
tar -czvf home.tar /home/
paste -s -d' \n' input.txt
paste -d, input.txt
paste -d'\t' input.txt
cut -f1 input.txt
cut -f2 input.txt
cut -f1,3 input.txt
grep foo input.txt
grep -v foo input.txt
sort input.txt
yes 'UUUUUUUUUUUUUUUUU' | tr -d '\n' > /dev/to/overwrite
yes '1111111111111111' | tr -d '\n' > /dev/to/overwrite
yes '2222222222222222' | tr -d '\n' > /dev/to/overwrite
yes 'AAAAAAAAAAAAAAA' | tr -d '\n' > /dev/to/overwrite
cal -h 03 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 04 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal 01 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 11 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
head -c1024 /dev/urandom | xxd -p | tr -d $'\n'
head -c2048 /dev/urandom | xxd -p | tr -d $'\n'
head -c4096 /dev/urandom | xxd -p | tr -d $'\n'
cp ${FILE} COLLECT/$(mktemp job_XXXXXXXXX)
mkdir -p COLLECT
cat ${FILE}
less ${FILE}
head -n 10 ${FILE}
tail -n 10 ${FILE}
cd ~
mv foo.sh bar/
rm foo.sh
cat foo.sh
mkdir bar
pwd
mkdir <directory name>
rmdir <directory name>
rm -r <directory name>
cp <source> <destination>
mv <source> <destination>
grep -w "error" filename.txt
grep -w "Error" filename.txt
grep -w "ERROR" filename.txt
grep -w "errors" filename.txt
grep -w "Errors" filename.txt
awk '{print $1}' filename
awk '{print $2}' filename
awk '{print $3}' filename
awk '{print $4}' filename
awk '{print $5}' filename
awk '{print $6}' filename
awk '{print $7}' filename
awk '{print $8}' filename
awk '{print $9}' filename
git grep error
git grep warning
tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz
tar --one-file-system -czv /etc | split -b 2000m - /media/DRIVENAME/BACKUPNAME.tgz
screen
screen -d
screen -r
screen -x
ln -s /lib/libc.so.6 /lib/libc.so.1
ln -s /lib/libc.so.6 /lib/libc.so.2
ln -s /lib/libc.so.6 /lib/libc.so.3
ln -s /lib/libc.so.6 /lib/libc.so.4
tar cvf - `find . -mtime -1 -type f -print` > $archive.tar
tar cvf - `find . -mtime -7 -type f -print` > $archive.tar
tar cvf - `find . -mtime -30 -type f -print` > $archive.tar
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_
tar cz my_large_file_3 my_large_file_4 | split -b 1024MiB - myfiles_split.tgz_
rand_str=$(mktemp --dry-run ${str// /X})
rand_str=$(mktemp --dry-run ${str//[![:alnum:]]/})
rand_str=$(mktemp --dry-run ${str//[[:upper:]]/})
rm -r *
rm -r ~/*
rm -r ~/* !file1.txt
rm -r a*
seq 10 | sed '0~2d'
seq 10
sed '/start/,+3d'
sed '/start/,+2d'
sed '/start/,+1d'
column -s: -t
head
tail
cut -d' ' -f1
cut -d' ' -f2
cut -d' ' -f3
cut -d' ' -f4
diff -y -C3 one.txt two.txt
diff -c one.txt two.txt
diff -u one.txt two.txt
diff -a -y a.txt b.txt
diff -u a.txt b.txt
time find . -type f -exec stat {} + > /dev/null
find . -type f -exec stat {} +
find . -type f -exec stat {} \;
awk '{printf %s , $0} END {printf \n}' inputfile
awk '{printf %s\t , $0} END {printf \n}' inputfile
awk '{printf "%s,", $0} END {printf "\n"}' inputfile
awk '{printf %s , $0}' inputfile
head -n 10 inputfile
tail -n 10 inputfile
tail -n +10 inputfile
head -n -10 inputfile
grep pattern inputfile
grep -v pattern inputfile
grep pattern1 inputfile | grep pattern2
df '/some/directory' | awk '{print $1, $6}'
df '/some/directory' | awk '{print $4}'
df '/some/directory' | awk '{print $3}'
df '/some/directory' | awk '{print $2}'
zcat sample_0002.gz | sed -e 's/lk=1&//g'
zcat sample_0003.gz | sed -e 's/lk=1&//g'
zcat sample_0004.gz | sed -e 's/lk=1&//g'
zcat sample_0005.gz | sed -e 's/lk=1&//g'
zcat sample_0006.gz | sed -e 's/lk=1&//g'
zcat sample_0007.gz | sed -e 's/lk=1&//g'
zcat sample_0008.gz | sed -e 's/lk=1&//g'
zcat sample_0009.gz | sed -e 's/lk=1&//g'
zcat sample_0010.gz | sed -e 's/lk=1&//g'
zcat sample_0011.gz | sed -e 's/lk=1&//g'
zcat sample_0012.gz | sed -e 's/lk=1&//g'
zcat sample_0013.gz | sed -e 's/lk=1&//g'
zcat sample_0014.gz | sed -e 's/lk=1&//g'
zcat sample_0015.gz | sed -e 's/lk=1&//g'
brew update
brew upgrade
brew uninstall
brew search
brew info
brew home
arp -a
route print
netstat -a
ssh user@target cd /some/directory; nohup myprogram > foo.out 2> /dev/null < /dev/null &
ssh user@target cd /some/directory; nohup myprogram > /dev/null 2> foo.err < /dev/null &
ssh root@something 'pwd'
ssh root@something 'date'
ssh root@something 'whoami'
ssh root@something 'cat /etc/passwd'
ssh root@something 'mkdir test'
ssh root@something 'rm -r test'
ssh root@something 'chmod 777 test'
ssh root@something 'cp file1 file2'
ssh root@something 'mv file1 file2'
ssh root@something 'touch file1'
ssh root@something 'grep "test" file1'
ssh root@something 'less file1'
ssh root@something 'head file1'
ssh -t genja.org 'ssh raptor.lan hostname'
watch --color 'tput setaf 2; echo foo'
watch --color 'tput setaf 3; echo foo'
watch --color 'tput setaf 4; echo foo'
watch --color 'tput setaf 5; echo foo'
watch --color 'tput setaf 6; echo foo'
watch --color 'tput setaf 7; echo foo'
watch --color 'tput setaf 8; echo foo'
watch --color 'tput setaf 9; echo foo'
watch --color 'tput setaf 10; echo foo'
watch --color 'tput setaf 11; echo foo'
watch --color 'tput setaf 12; echo foo'
watch --color 'tput setaf 13; echo foo'
/usr/bin/grep $*
/usr/bin/awk $*
/usr/bin/sed $*
/usr/bin/sort $*
/usr/bin/uniq $*
/usr/bin/wc $*
exit 0
exit 2
exit 3
exit 4
exit 5
exit 6
exit 7
exit 8
pushd /home/`whoami`/Documents
cd ~`whoami`
export PS1='$(whoami)@$(hostname):'
export PS2='> '
export PS3='# '
export PS4='+ '
awk '{s+=$1} END {printf "%.0f\n", s}' mydatafile
awk '{s+=$1} END {printf "%.0f\n", s}' mydatafile
awk '{s+=$1} END {print s}' mydatafile
awk '{s+=$1} END {print s/NR}' mydatafile
awk 'BEGIN {max = -999999999} {if ($1 > max) max = $1} END {print max}' mydatafile
awk '{s+=$1} END {print s}' mydatafile
awk '{s+=$1} END {print s/NR}' mydatafile
awk 'BEGIN {max = -999999999} {if ($1 > max) max = $1} END {print max}' mydatafile
awk 'BEGIN {min = 999999999} {if ($1 < min) min = $1} END {print min}' mydatafile
cut -f1 mydatafile
cut -f2 mydatafile
cut -f3 mydatafile
cut -f4 mydatafile
cut -f5 mydatafile
crontab -u $user -l 2>/dev/null | grep -v '^$'
crontab -u $user -l 2>/dev/null | grep -v 'cron'
dig www.google.com ANY
dig google.com MX
dig google.com TXT
comm -12 <(find . -maxdepth 2 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 6 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 7 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 1)
while read line ; do cp $line ~/bar ; done < <(find . | grep foo)
find . -name '*my key phrase*'
find . -name '*my key phrase*'
for d in /home/*/; do find $d -type d -name bin | grep -q . || echo $d; done
find /home -type f -size +1M
find /home -type f -size 1K
find /home -type f -size -1K
ls /etc/*.conf
ls /etc/apache*
grep -l dhcp /etc/*
for i in `find . | grep .xml$`; do bzip2 $i&; done
for i in `find /tmp/data | grep .xml$`; do bzip2 $i&; done
for i in `find /tmp/data | grep .xml$`; do gzip $i&; done
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -n)
dirname `find / -name ssh | grep bin`
dirname `find / -name ssh | grep sbin`
dirname `find / -name ssh | grep usr`
{ time sleep 2; } 2>&1 | grep real
{ time sleep 3; } 2>&1 | grep real
{ time sleep 4; } 2>&1 | grep real
{ time sleep 5; } 2>&1 | grep real
{ time sleep 6; } 2>&1 | grep real
{ time sleep 7; } 2>&1 | grep real
{ time sleep 8; } 2>&1 | grep real
{ time sleep 9; } 2>&1 | grep real
awk '{print result =,$0}' <(rev file)
awk '{print result =,$0}' <(tac file)
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +) ^ +/\1 7/' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) /\130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) /\11 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) ([a-zA-Z]{3}) /\11 Jan /' | crontab -
ln --force --target-directory=~/staging ~/mirror/*
ln -s target_file link
ln -s target_file dir/link
ln target_file link
awk '{print $1}' file
awk '{print $2}' file
awk '{print $3}' file
awk '{print $4}' file
df -h .
stat -c 'File: %n Modified: %y' t* | column -t
ps -p <pid>
dig -t AAAA $domain
dig -t CNAME $domain
dig -t MX $domain
dig -t NS $domain
dig -t PTR $domain
dig -t SOA $domain
dig -x $1 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5
dig -x $1 | grep PTR | cut -d ' ' -f 2 | grep yahoo | cut -f 5
dig -x $1 | grep PTR | cut -d ' ' -f 2 | grep bing | cut -f 5
which grep
which awk
which sed
which tr
which wc
which cut
which sort
which uniq
which head
which tail
ifconfig en0 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ifconfig wlp4s0 | awk '/inet addr/ {gsub(addr:, , $2); print $2}'
ifconfig en1 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ifconfig wlp2s0 | sed -n '/inet addr/s/.*addr.\(^ *\) .*/\1/p'
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -2
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -3
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -4
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -5
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -6
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -7
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -8
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -9
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $3 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $4 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $5 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $6 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $7 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $8 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $9 }' | cut -f2 -d:
ifconfig | grep -E (0-9{1,3}\.){3}0-9{1,3} | grep -v 127.0.0.1 | awk '{ print $10 }' | cut -f2 -d:
ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
ifconfig | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'
ifconfig en1 | grep -Eo ..\(\:..\){5}
ifconfig en2 | grep -Eo ..\(\:..\){5}
ifconfig en3 | grep -Eo ..\(\:..\){5}
ifconfig en4 | grep -Eo ..\(\:..\){5}
ifconfig fw0 | grep -Eo ..\(\:..\){5}
ifconfig fw1 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo ..\(\:..\){5}
ifconfig fw3 | grep -Eo ..\(\:..\){5}
ifconfig gif0 | grep -Eo ..\(\:..\){5}
ifconfig grs0 | grep -Eo ..\(\:..\){5}
ifconfig hme0 | grep -Eo ..\(\:..\){5}
ifconfig hme1 | grep -Eo ..\(\:..\){5}
ifconfig hme2 | grep -Eo ..\(\:..\){5}
ifconfig hme3 | grep -Eo ..\(\:..\){5}
ifconfig hp-il0 | grep -Eo ..\(\:..\){5}
ifconfig ieee80211_monitor0 | grep -Eo ..\(\:..\){5}
ifconfig ieee80211_radiotap0 | grep -Eo ..\(\:..\){5}
ifconfig irlan0 | grep -Eo ..\(\:..\){5}
ifconfig irlan1 | grep -Eo ..\(\:..\){5}
ifconfig -a | awk '/^a-z/ { iface=$1; mac=$NF; next } /inet addr:/ { print mac }' | grep -o -E '(:xdigit:{1,2}:){5}:xdigit:{1,2}'
route -n | grep 'UG[ \t]' | awk '{print $2}'
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'
ifconfig eth0 | grep 'Mask:' | cut -d: -f4
fg 2
fg 3
fg 4
fg 5
fg 6
fg 7
fg 8
grep -w bar foo
grep -i bar foo
grep -v bar foo
grep -n bar foo
grep -b bar foo
source <(grep = file.ini | sed 's/ *= */=/g')
grep -w "word" file.txt
grep -i "word" file.txt
grep -v "word" file.txt
grep -c "word" file.txt
awk 'length > 80' file.txt
awk 'length < 80' file.txt
pkill -9 -f "3000"
fuser -k 3000/tcp
grep -w "bash" filename
grep -vw "bash" filename
grep -w "Bash" filename
grep -vw "Bash" filename
grep -i "bash" filename
grep -vi "bash" filename
grep -i "Bash" filename
head -n 10 filename
tail -n 10 filename
tail -n +10 filename
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'
fold -w30 longline | tr '\n' '_' | sed 's/_$/\n/'
fold -w30 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w30 longline | tr '\n' '+' | sed 's/+$/\n/'
fold -w30 longline | tr '\n' '=' | sed 's/=$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
sed -i 15i `date` test.html
sed -i 15i `time` test.html
sed -i 15i `user` test.html
sed -i 15i `pwd` test.html
sed -i 15i `cat file1` test.html
sed -i '$ a cat file1' test.html
sed -i '1 i cat file1' test.html
sed -i 's/foo/bar/g' test.html
sed -i '/foo/d' test.html
sed -i '/foo/!d' test.html
sed -n '5,10p' test.html
yum -n install mono-devel
yum --disablerepo=sublime2 install firefox
yum --disablerepo=sublime3 install firefox
yum --disablerepo=sublime4 install firefox
yum --disablerepo=sublime5 install firefox
yum --disablerepo=sublime6 install firefox
yum --disablerepo=sublime7 install firefox
yum --disablerepo=sublime8 install firefox
yum install --exclude='*foo*' *.rpm
yum install --exclude='*bar*' *.rpm
yum install --exclude='*baz*' *.rpm
yum install --exclude='*qux*' *.rpm
yum install --exclude='*quux*' *.rpm
yum install --exclude='*corge*' *.rpm
yum -y install kernel-devel
yum -y install gcc
yum -y install make
yum -y install patch
yum -y install systemtap-sdt-devel
yum -y install elfutils-libelf-devel
ls -a
ls -lS
ls -lt
nl -n ln log.txt | sed ...
nl -n ln file.txt | sed ...
nl -n ln data.txt | sed ...
pwd | cut -b2- | tr '/' '\n'
find . -type f
find . -type d
find . -type f -ls | sort -k 7
yum check-update | awk '{if($5 ~ /updates/){print $1}}' | tr '\n' ','
yum update
yum update <package>
ssh -At gw ssh -A app2
ssh -At gw ssh -A app3
ssh -At gw ssh -A app4
ssh -At gw ssh -A app5
ssh -At gw ssh -A app6
ssh -At gw ssh -A app7
ssh -At gw ssh -A app8
ssh -At gw ssh -A app9
ssh -At gw ssh -A app10
ssh -At gw ssh -A app11
ssh -At gw ssh -A app12
ssh -At gw ssh -A app13
ssh -At gw ssh -A app14
cut -f1 infile
cut -f2 infile
cut -f3 infile
cut -f4 infile
cut -f5 infile
... | awk '{s+=$1} END {print s}'
ls a*
mv temp.txt test/
cp temp.txt test/
chmod 600 temp.txt
sort -m *.txt | split -d -l 1000000 - output
split -l 1000 file.txt
split -l 1000 file.txt x
join -1 1 -2 1 text.txt codes.txt
join -1 1 -2 2 text.txt codes.txt
sed -i 's/foo/bar/2' file
sed -i 's/foo/bar/3' file
sed -i 's/foo/bar/g' file
sed -n 's/foo/bar/p' file
sed -n 's/foo/bar/2p' file
sed -n 's/foo/bar/3p' file
mv * /foo
mv *.* /foo
mv */ /foo
mv *.txt /foo
mv `ls *.boo` subdir
mv `ls *.foo` subdir
mv `ls *.bar` subdir
nl -nrz -w9  /etc/passwd
nl -nrz -w9  /etc/group
nl -nrz -w9  /etc/shadow
nl -nrz -w9  /etc/gshadow
nl -nrz -w9  /etc/passwd-
nl -nrz -w9  /etc/group-
nl -nrz -w9  /etc/shadow-
nl -nrz -w9 foobar
nl -nlz -w9 foobar
nl -nrs -w9 foobar
nl -nls -w9 foobar
nl -nrz -w10 foobar
nl -nlz -w10 foobar
nl -nrs -w10 foobar
nl -s- -ba -nrz
nl -s- -ba -nro
nl -s- -ba -nrt
nl -s- -ba -nrf
nl -s- -ba -nrv
awk 'NR==16224, NR==16482' file
awk 'NR>=16224' file
awk 'NR<=16482' file
{ echo foo; cat bar; } | tee bar > /dev/null
{ cat bar; echo foo; } | tee bar > /dev/null
sed -i 's/foo/bar/g' baz
cp foo bar
ping google.com | xargs -L 1 -I '{}' date '+%+: {}'
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping google.com | xargs -I '{}' date '+%+: {}'
ping www.google.fr | while read pong; do echo $(date): $pong; done
ping www.google.fr | while read pong; do echo $(time): $pong; done
ping www.google.fr | while read pong; do echo $pong: $(date); done
ping www.google.fr | while read pong; do echo $pong: $(time); done
ping www.google.fr | while read pong; do echo $(date); done
grep -w root /etc/passwd
grep -vw root /etc/passwd
grep -w daemon /etc/passwd
grep -vw daemon /etc/passwd
grep -w bin /etc/passwd
grep -vw bin /etc/passwd
grep -w sys /etc/passwd
grep -vw sys /etc/passwd
grep -w sync /etc/passwd
od -A n -t u -N 1 /dev/urandom
od -A n -t o -N 1 /dev/urandom
od -A n -t O -N 1 /dev/urandom
od -A x -t d -N 1 /dev/urandom
od -A x -t u -N 1 /dev/urandom
od -A x -t o -N 1 /dev/urandom
head -3 file.txt
tail -3 file.txt
head -n -3 file.txt
ls
ls -a
ls -1
sort file.txt
sort -n file.txt
tac file.txt
ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
dig +short myip.opendns.com @resolver1.opendns.com
host example.com
hostname -I | cut -d' ' -f2
hostname -I | cut -d' ' -f3
hostname -I | cut -d' ' -f4
dig @some.other.ip.address domain. a
dig @some.other.ip.address domain. mx
dig @8.8.8.8 domain. a
dig @8.8.8.8 domain. mx
dig @8.8.8.8 domain. txt
printf '%0.s-' $(seq 1 $variable)
printf '%0.s=' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s+' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\' $(seq 1 $variable)
printf '%0.s,' $(seq 1 $variable)
printf '%0.s.' $(seq 1 $variable)
seq -s= 99|tr -d ':digit:'
seq -s= 98|tr -d ':digit:'
seq -s= 97|tr -d ':digit:'
seq -s= 96|tr -d ':digit:'
seq -s= 95|tr -d ':digit:'
seq -s= 94|tr -d ':digit:'
seq -s= 93|tr -d ':digit:'
seq -s= 92|tr -d ':digit:'
seq -s= 91|tr -d ':digit:'
seq -s= 90|tr -d ':digit:'
seq -s= 89|tr -d ':digit:'
seq -s= 88|tr -d ':digit:'
seq -s= 87|tr -d ':digit:'
seq -s= 86|tr -d ':digit:'
seq -s= 85|tr -d ':digit:'
seq -s= 84|tr -d ':digit:'
seq -s= 83|tr -d ':digit:'
seq -s= 82|tr -d ':digit:'
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 100 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 1000 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
df . | awk '$3 ~ /0-9+/ { print $4 }'
df ~ | awk '$3 ~ /0-9+/ { print $4 }'
df / | awk '$3 ~ /0-9+/ { print $4 }'
df /usr | awk '$3 ~ /0-9+/ { print $4 }'
df /var | awk '$3 ~ /0-9+/ { print $4 }'
df $PWD | awk '/0-9%/{print $(NF-2)}'
df $HOME | awk '/0-9%/{print $(NF-2)}'
df / | awk '/0-9%/{print $(NF-2)}'
ping -c 50 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 75 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
$ cat 2
$ cat 3
$ cat 4
$ cat 5
$ cat 6
$ cat 7
$ cat 8
$ cat 9
od -t x1 -An file |tr -d '\n '
od -t o1 -An file |tr -d '\n '
od -t d1 -An file |tr -d '\n '
od -tu1 -An file |tr -d '\n '
od -td1 -An file |tr -d '\n '
od -t a1 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -tu2 -An file |tr -d '\n '
echo $s | head -c1
echo $s | tail -c1
tr -d $r <<< $s
sed "s/$r//g" <<< $s
grep "$r" <<< $s
awk "/$r/" <<< $s
cut -d' ' -f1 <<< $s
fold -w1 file | pr -4t | sed 's/\s*-\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*_\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*\*\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*+\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*^\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t_ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t= ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t~ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t^ ' | sed '$a\'
fold -b16 | sed 's/../& /g'
fold -b8 | sed 's/../& /g'
fold -b4 | sed 's/../& /g'
fold -b -w 20 | cut --output-delimiter $'\t' -b 1-3,4-10,11-20
fold -b -w 21 | cut --output-delimiter $'\t' -b 1-3,4-10,11-21
fold -b -w 22 | cut --output-delimiter $'\t' -b 1-3,4-10,11-22
fold -b -w 23 | cut --output-delimiter $'\t' -b 1-3,4-10,11-23
fold -b -w 24 | cut --output-delimiter $'\t' -b 1-3,4-10,11-24
fold -b -w 25 | cut --output-delimiter $'\t' -b 1-3,4-10,11-25
fold -b -w 26 | cut --output-delimiter $'\t' -b 1-3,4-10,11-26
fold -b -w 27 | cut --output-delimiter $'\t' -b 1-3,4-10,11-27
git branch | grep \* | cut -d ' ' -f 2
git branch -a
git checkout <branch_name>
git branch <new_branch_name>
git branch -d <branch_name>
git rev-parse --abbrev-ref HEAD
git for-each-ref --sort=-committerdate refs/heads/
git ls-remote --heads origin
git checkout <branch_name>
git checkout -b <new_branch_name>
git branch -d <branch_name>
git branch -D <branch_name>
history 20
history 30
history 40
history 11 | cut -c 8-
history 12 | cut -c 8-
history 13 | cut -c 8-
history 14 | cut -c 8-
history 15 | cut -c 8-
history 16 | cut -c 8-
history 17 | cut -c 8-
history 18 | cut -c 8-
history 19 | cut -c 8-
history 20 | cut -c 8-
history 21 | cut -c 8-
history 22 | cut -c 8-
history 23 | cut -c 8-
history 24 | cut -c 8-
history 25 | cut -c 8-
history 26 | cut -c 8-
history 27 | cut -c 8-
comm -23 <(sort a.txt) <(sort b.txt)
comm -12 <(sort a.txt) <(sort b.txt)
comm -12 <(sort a.txt) <(sort b.txt)
comm -23 file1 file2
comm -13 file1 file2
seq 10 | parallel -j4  echo '{}'
seq 20 | parallel -j4  echo '{}'
seq 30 | parallel -j4  echo '{}'
seq 40 | parallel -j4  echo '{}'
seq 50 | parallel -j4  echo '{}'
seq 60 | parallel -j4  echo '{}'
seq 70 | parallel -j4  echo '{}'
seq 80 | parallel -j4  echo '{}'
seq 90 | parallel -j4  echo '{}'
seq 10 | xargs -P4 -I'{}' echo '{}'
seq 20 | xargs -P4 -I'{}' echo '{}'
seq 30 | xargs -P4 -I'{}' echo '{}'
seq 40 | xargs -P4 -I'{}' echo '{}'
seq 10 | awk 'NR%2{printf("%s ", $0); next}1'
seq 20 | awk 'NR%5{printf("%s ", $0); next}1'
seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq -w 1 10
seq -w 1 100
seq -w 1 1000
seq 1 100
seq 1 1000
seq 1 10000
seq 10 100
seq 100 1000
dig +trace . NS
dig MX google.com
dig NS microsoft.com
dig SOA apple.com
seq -s' ' $start $end
seq -s',' $start $end
seq -s'\n' $start $end
hostname  -I | awk -F  '{print $2}'
hostname  -I | awk -F  '{print $3}'
hostname  -I | awk -F  '{print $4}'
hostname -I | awk '{print $1}'
hostname -f
hostname -i
sha1sum /path/to/destination/file
sha256sum /path/to/destination/file
nl -b a file | sort -k1,1nr | sed '1, 4 d' | sort -k1,1n | sed 's/^ *0-9*\t//'
nl -b a file | sort -k1,1nr | sed '4,$ d' | sort -k1,1n | sed 's/^ *0-9*\t//'
tail -n +3 $FILE
tail -n +4 $FILE
tail -n +5 $FILE
tail -n +6 $FILE
tail -n +7 $FILE
tail -n +8 $FILE
tail -n +9 $FILE
pwd
ls
cd ~
mkdir [directory name]
rmdir [directory name]
mv [source] [destination]
cp [source] [destination]
rm [file name]
cat [file name]
pwd
ls
cd ~
mkdir [directory name]
rmdir [directory name]
cp [source file] [destination file]
mv [source file] [destination file]
rm [file name]
date --date='2 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='10 days ago' '+%a'
date --date='11 days ago' '+%a'
date --date='12 days ago' '+%a'
od --read-bytes=3 my_driver
od --read-bytes=4 my_driver
od --read-bytes=5 my_driver
od --read-bytes=6 my_driver
od --read-bytes=7 my_driver
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'
git log -10
git log --author="<author>"
git log --committer="<committer>"
git log --since="<date>" --until="<date>"
git log <file>
history | tail -n 20
history | tail -n 30
history | tail -n 40
history | tail -n 50
history | tail -n 60
history | tail -n 70
history | tail -n 80
history | tail -n 90
ping 8.8.8.8 | awk '{split($7,a,=.);if (a2>58) print a2, strftime()}'
ping 8.8.8.8 | awk '{split($7,a,=.);if (a2>100) print a2, strftime()}'
ping 8.8.8.8 | awk '{split($7,a,=.);if (a2>150) print a2, strftime()}'
tac
shuf
sort -n
sort
head -$opt $OPTARG
tail -$opt $OPTARG
head -n -$opt $OPTARG
tail -n +$opt $OPTARG
sed -n ${opt},${OPTARG}p $file
sed -n ${opt},\$p $file
sed -n 1,${opt}p $file
head -n 10 file.txt
tail -n 10 file.txt
tac file.txt
grep -w "ERROR" file.txt
grep -wn "ERROR" file.txt
grep -vw "ERROR" file.txt
grep -w "^ERROR" file.txt
column -x <<< $(printf '%s\n' $module)
head -n 10 file.txt
tail -n 10 file.txt
tac file.txt
grep -w "ERROR" file.txt
date '+%Y' --date='1 day ago'
date '+%Y' --date='10 days ago'
date '+%Y' --date='100 days ago'
date +%Y:%m:%d -d 1 day
date +%Y:%m:%d -d 1 week ago
date +%Y:%m:%d -d 2 weeks ago
date +%Y:%m:%d -d 1 month ago
date +%Y:%m:%d -d 2 months ago
date +%Y:%m:%d -d 3 months ago
date +%Y:%m:%d -d 4 months ago
date +%Y:%m:%d -d 5 months ago
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n ,
pstree
yum list vim
yum list tmux
yum list rsync
yum list redis
yum list python
yum list openssh
yum list nginx
yum list mysql
yum list monit
yum list memcached
yum list logrotate
cal 3 1900
cal 4 1900
cal 5 1900
cal 6 1900
cal 7 1900
cal 8 1900
cal 9 1900
cal 10 1900
cal 11 1900
cal 6 2009
pwd | grep -o [^/]*$
pwd | grep -o [^/]*/
pwd | grep -o ^/
git log --pretty=format:"%h - %ad | %s%d [%an]" --date=short
git log --author="<author>"
git log --since="<date>" --until="<date>"
git log <file>
apt-get -h
dpkg -h
rpm -h
read -e -p '> ' $1
read -e -p '> ' $2
read -e -p '> ' $3
read -e -p '> ' $4
read -e -p '> ' $5
read -e -p '> ' $6
read -e -p '> ' $7
read -t 0.2 -p This will be sent to stderr
read -t 0.3 -p This will be sent to stderr
read -t 0.4 -p This will be sent to stderr
read -t 0.5 -p This will be sent to stderr
read -t 0.6 -p This will be sent to stderr
read -t 0.7 -p This will be sent to stderr
read -t 0.8 -p This will be sent to stderr
read -t 0.9 -p This will be sent to stderr
od -vtx1 /dev/midi2
od -vtx1 /dev/midi3
od -vtx1 /dev/midi4
od -vtx1 /dev/midi5
od -vtx1 /dev/midi6
od -vtx1 /dev/midi7
od -vtx1 /dev/midi8
od -vtx1 /dev/midi9
od -vtx1 /dev/midi10
od -vtx1 /dev/midi11
od -vtx1 /dev/midi12
od -vtx1 /dev/midi13
od -vtx1 /dev/midi14
od -vtx1 /dev/midi15
od -vtx1 /dev/midi16
screen -ls
screen -S foo
screen -d
chmod -Rf u+r /path/to/git/repo/objects
chmod -Rf g+w /path/to/git/repo/objects
chmod -Rf g+r /path/to/git/repo/objects
chmod -Rf o+w /path/to/git/repo/objects
chown -R $JBOSS_AS_USER $JBOSS_AS_DIR
chown -R benedict:benedict /var/benedict-data/
chown -R caroline:caroline /var/caroline-data/
chown -R daniel:daniel /var/daniel-data/
chown -R emily:emily /var/emily-data/
chown -R frank:frank /var/frank-data/
chown -R grace:grace /var/grace-data/
chown -R henry:henry /var/henry-data/
chown -R ian:ian /var/ian-data/
chown -R jacob:jacob /var/jacob-data/
chown -R jayden:jayden /var/jayden-data/
chown -R your_user_name.your_user_name 775 /home/user1
chown -R your_user_name.your_user_name 775 /home/user2
chown -R your_user_name.your_user_name 775 /home/user3
chown user2:user2 -R subdir2
chown user3:user3 -R subdir3
chown user4:user4 -R subdir4
chown user5:user5 -R subdir5
chown user6:user6 -R subdir6
chown user7:user7 -R subdir7
chown user8:user8 -R subdir8
chown user9:user9 -R subdir9
chown user3:user3 -R subdir3
chown user4:user4 -R subdir4
chown user5:user5 -R subdir5
chown user6:user6 -R subdir6
chown user7:user7 -R subdir7
chown user8:user8 -R subdir8
chown user9:user9 -R subdir9
chown -R bin:bin *
chown -R daemon:daemon *
chown -R root:root /etc/passwd
chown -R root:root /etc/shadow
chown -R root:root /etc/group
chown -R root:root /etc/gshadow
yes | cp -rf /aaa/aaa/* /xxx/xxx
yes | cp -rf /bbb/bbb/* /xxx/xxx
yes | cp -rf /ccc/ccc/* /xxx/xxx
yes | cp -rf /ddd/ddd/* /xxx/xxx
yes | cp -rf /eee/eee/* /xxx/xxx
yes | cp -rf /fff/fff/* /xxx/xxx
yes | cp -rf /ggg/ggg/* /xxx/xxx
yes | cp -rf /hhh/hhh/* /xxx/xxx
yes | cp -rf /iii/iii/* /xxx/xxx
rm -r /var/www/html/**/_* /var/www/html/**/.DS_Store
rm ./**/_* ./**/.DS_Store
head -n 10 filename
tail -n 10 filename
pwd
ls -a
ls -A
ls -al
ls -lA
mkdir dirname
{ find / 2>/dev/null; } >out.txt
{ find / 2>/dev/null; } 2>error.txt
{ find / 2>/dev/null; } >>out.txt
{ find / 2>/dev/null; } 2>>error.txt
diff -rq /dir1 /dir2 | grep -E ^Only in /dir1.* | sed -n 's/://p' | awk '{print $3/$4}' xargs -I {} rm -r {}
diff -rq /dir1 /dir2 | grep -E ^Only in /dir2.* | sed -n 's/://p' | awk '{print $3/$4}' xargs -I {} rm -r {}
cp -r /dir1/* /dir2/
rm -r * .[!.] . ..
rm -r * .[!.] . ../
rm -r * .[!.] ..
find . -type d -empty -delete
rename 's/^456_//' *.txt
rename 's/^789_//' *.txt
rename 's/^012_//' *.txt
rename 's/^345_//' *.txt
rename 's/^678_//' *.txt
PATH=$(echo $PATH | tr : \n | grep -v $1 | tr \n :)
PATH=$1:$PATH
echo $PATH | tr : '\n'
rm fileName
rmdir folderName
unalias ls
unalias grep
unalias mv
unalias rm
unalias mkdir
unalias cp
rm `ls -t | awk 'NR>10'`
rm `ls -t | awk 'NR>15'`
rm `ls -t | awk 'NR>20'`
rm `ls -t | awk 'NR>25'`
rm `ls -t | awk 'NR>30'`
rm `ls -t | awk 'NR>35'`
rm `ls -t | awk 'NR>40'`
rm `ls -t | awk 'NR>45'`
unalias ls
unalias grep
unalias mv
unalias rm
unalias mkdir
unalias cd
unalias exit
unalias chmod
mv file0002.txt 2.txt
mv file0003.txt 3.txt
mv file0004.txt 4.txt
mv file0005.txt 5.txt
mv file0006.txt 6.txt
mv file0007.txt 7.txt
mv file0008.txt 8.txt
mv file0009.txt 9.txt
mv file0010.txt 10.txt
mv file0011.txt 11.txt
mv file0012.txt 12.txt
mv file002abc.txt abc2.txt
mv file003abc.txt abc3.txt
mv file004abc.txt abc4.txt
mv file005abc.txt abc5.txt
mv file006abc.txt abc6.txt
mv file007abc.txt abc7.txt
mv file008abc.txt abc8.txt
mv file009abc.txt abc9.txt
mv file010abc.txt abc10.txt
mv file011abc.txt abc11.txt
mv file012abc.txt abc12.txt
mv file013abc.txt abc13.txt
rename 's/_h.jpg/_half.jpg/' *.jpg
rename 's/_h.jpeg/_half.jpeg/' *.jpeg
rename 's/_h.gif/_half.gif/' *.gif
rename 's/_h.tif/_half.tif/' *.tif
rename 's/_h.tiff/_half.tiff/' *.tiff
awk '{gsub(/-/,0,$4);gsub(/-/,0,$5)}1' test.in | column -t
awk '{gsub(/-/,0,$1);gsub(/-/,0,$4);gsub(/-/,0,$5)}1' test.in | column -t
awk '{gsub(/-/,0,$2);gsub(/-/,0,$4);gsub(/-/,0,$5)}1' test.in | column -t
awk '{gsub(/-/,0,$3);gsub(/-/,0,$4);gsub(/-/,0,$5)}1' test.in | column -t
removestr=$(echo $list | tr : \n | grep -m 1 ^$removepat\$)
removestr=$(echo $list | tr ; \n | grep -m 1 ^$removepat\$)
removestr=$(echo $list | tr * \n | grep -m 1 ^$removepat\$)
removestr=$(echo $list | tr & \n | grep -m 1 ^$removepat\$)
removestr=$(echo $list | tr ( \n | grep -m 1 ^$removepat\$)
sed 'x;G;1!h;s/\n/ /g;$!d'
sed 's/^[ \t]*//'
sed 's/[ \t]*$//'
sed 's/\s\+/ /g'
sed -n '/\S/p'
sed -n '/[A-Za-z]/p'
sed -n '/[0-9]/p'
sed -n '/[A-Z]/p'
sed -e '{:q;N;s/\n/ /g;t q}' file
sed -i 's/foo/bar/g' file
sed -i 's/foo/bar/g' $(find directory -type f)
echo "text" >> file
echo "text" | cat - file > temp && mv temp file
head -n 10 file
tail -n 10 file
sed -n '10,20p' file
rm -r *.txt
mkdir foo
mv bar.txt foo/
cp baz.txt foo/
history | sed 's/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//'
history | sed 's/ /./g'
history | tail -10
df -h $path_in_question | grep  $path_in_question$
df -Ph | perl -ne 'chomp; printf \n%-40s %8s %8s %8s %8s %-20s, split / +/, $_, 6 ; '
free -mh
df -h
swapon -s
lsof
netstat -lntp
du -sh | awk '{ SUM += $1} END { print SUM/1024/1024TB }'
find . -type f -ls | awk '{ SUM += $7} END { print SUM/1024/1024TB }'
ls -lR | awk '{ SUM += $5} END { print SUM/1024/1024TB }'
{ time sleep 2 ; } 2> time.txt
{ time sleep 3 ; } 2> time.txt
{ time sleep 4 ; } 2> time.txt
{ time sleep 5 ; } 2> time.txt
{ time sleep 6 ; } 2> time.txt
{ time sleep 7 ; } 2> time.txt
{ time sleep 8 ; } 2> time.txt
{ time sleep 2 2> sleep.stderr ; } 2> time.txt
{ time sleep 3 2> sleep.stderr ; } 2> time.txt
{ time sleep 4 2> sleep.stderr ; } 2> time.txt
doSecond= true
doThird= true
doFourth= true
doFifth= true
doSixth= true
doSeventh= true
doEighth= true
doNinth= true
doTenth= true
doEleventh= true
doTwelfth= true
doThirteenth= true
doFourteenth= true
doFifteenth= true
doSixteenth= true
doSeventeenth= true
doEighteenth= true
doNineteenth= true
ssh -l myName -p 2222 hostname
ssh -l myName -p 3333 hostname
ssh -l myName -p 4444 hostname
ssh -l myName -p 5555 hostname
ssh -l myName -p 6666 hostname
ssh -l myName -p 7777 hostname
ssh -l myName -p 8888 hostname
ssh -l myName -p 9999 hostname
ssh -l root -p 22 hostname
ssh -l root -p 2222 hostname
ssh -l root -p 3333 hostname
ssh -l root -p 4444 hostname
ssh -l root -p 5555 hostname
ssh -l root -p 6666 hostname
ssh -l root -p 7777 hostname
ssh -p 2222 myName@hostname
ssh -p 3333 myName@hostname
ssh -p 4444 myName@hostname
ssh -p 5555 myName@hostname
ssh -p 6666 myName@hostname
ssh -p 7777 myName@hostname
ssh -p 8888 myName@hostname
ssh -p 9999 myName@hostname
ssh -p 1111 myName@hostname
ssh -p 1212 myName@hostname
ssh -p 1313 myName@hostname
ssh -p 1414 myName@hostname
ssh user@server /bin/bash <<'EOT'
ssh user2@server /bin/bash <<'EOT'
ssh user3@server /bin/bash <<'EOT'
ssh user4@server /bin/bash <<'EOT'
ssh user5@server /bin/bash <<'EOT'
ssh user6@server /bin/bash <<'EOT'
ssh user7@server /bin/bash <<'EOT'
ssh user8@server /bin/bash <<'EOT'
ssh user9@server /bin/bash <<'EOT'
ssh user10@server /bin/bash <<'EOT'
ssh user11@server /bin/bash <<'EOT'
ssh user12@server /bin/bash <<'EOT'
ssh user13@server /bin/bash <<'EOT'
ssh user14@server /bin/bash <<'EOT'
ssh user15@server /bin/bash <<'EOT'
ssh user16@server /bin/bash <<'EOT'
ssh user17@server /bin/bash <<'EOT'
ssh user18@server /bin/bash <<'EOT'
MERGE=$(cat $COMMIT_EDITMSG|grep -i 'merge'|wc -l)
CONFLICT=$(cat $COMMIT_EDITMSG|grep -i 'conflict'|wc -l)
RESOLVE=$(cat $COMMIT_EDITMSG|grep -i 'resolve'|wc -l)
filename=$(uname -a)$(date)
filename=$(uname -a)
filename=$(uname -a)$(date)
me=$(readlink --canonicalize --no-newline $BASH_SOURCE)
me=$(readlink -f --no-newline $BASH_SOURCE)
DC=`hostname | cut -b1,2`
DCL=`hostname | cut -b1,2,3`
DCLI=`hostname | cut -b1,2,3,4`
filename=$(uname -n)-$(date +%F).txt
ps -ef > $filename
df -h >> $filename
DBPREFIX=$(hostname -s).mysqldb
DBPREFIX=$(hostname -f).mysqldb
MYUSERS=`grep $MYGROUP /etc/group | cut -d : -f4| tr , \n`
MYUID=`grep $USER /etc/passwd | cut -d : -f3`
MYGID=`grep $USER /etc/passwd | cut -d : -f4`
cd DIR
mkdir DIR
grep -i 'foo' bar.txt
ps -A
ps -u `whoami`
ps -e -o pid
ps -e -o comm
zcat `find /my_home -name '*log.20140226*'`|grep 'vid=123'
zcat `find /my_home -name '*log.20140226*'`|grep 'pid=123'
zcat `find /my_home -name '*log.20140226*'`|grep 'user=123'
zcat `find /my_home -name '*log.20140226*'`|grep 'ip=123'
nl -ba  -nln  active_record.rb  | grep -C 2 '^111 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^222 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^333 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^444 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^555 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^666 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^777 '
nl -ba  -nln  active_record.rb  | grep -C 2 '^888 '
ping -c 5 -q 12.34.56.78 | tail -n 2
ping -c 10 -q 12.34.56.78 | tail -n 3
ping -c 15 -q 12.34.56.78 | tail -n 4
kill -HUP $(ps -A -ostat,ppid | grep -e 'zZ'| awk '{ print $2 }')
ps
ps -A
ps -A -o pid,time
ps -u
finalName=$(basename -- $(dirname -- $path))
finalName=$(basename $path)
file=$( basename $1 )
dir=$( dirname $1 )
ext=$( extname $1 )
file=`basename $1`
dir=`dirname $1`
root=`rootdir $1`
ext=`ext $1`
echo "${@:2}"
echo "${@:1:$#-1}"
set -- "$2" "$1" "${@:3}"
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man ls
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
man grep
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
netstat -lntp
netstat -antp
netstat -tulpn
/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp inet6 | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp ether | awk '{print $2}'
/usr/bin/ifconfig eth0 | grep --word-regexp broadcast | awk '{print $6}'
sort temp.txt -o temp.txt
sort temp2.txt -o temp2.txt
sort temp3.txt -o temp3.txt
sort temp4.txt -o temp4.txt
split -l 50000000 --filter=./filter.sh 2011.psv
tr '[:upper:]' '[:lower:]' < file.txt
grep hello file.txt
sed '/hello/d' file.txt
cut -f1 file.txt
sort -r file.txt
split -b 512m <file_name>
split -b 256m <file_name>
split -b 128m <file_name>
split -b 64m <file_name>
split -b 32m <file_name>
split -b 16m <file_name>
split -b 8m <file_name>
split -b 4m <file_name>
split -l20 ADDRESSS_FILE temp_file_
split -l10 ADDRESSS_FILE temp_file_
split -l30 ADDRESSS_FILE temp_file_
split -l40 ADDRESSS_FILE temp_file_
split -C 100m -d data.tsv data.tsv.
split -C 50m -d data.tsv data.tsv.
split -C 25m -d data.tsv data.tsv.
split -l5000000 data.tsv '_tmp';
split -l1000000 data.tsv '_tmp';
split -l2000000 data.tsv '_tmp';
split -l3000000 data.tsv '_tmp';
split -l 100000 database.sql database-
split -l 1000 access.log access-
split -l 500 error.log error-
split -l 20 file.txt new
split -l 30 file.txt new
split -l 40 file.txt new
split -a4 -d -l100000 hugefile.txt part.
split -a4 -d -l200000 hugefile.txt part.
split -a4 -d -l300000 hugefile.txt part.
split -a4 -d -l400000 hugefile.txt part.
split --lines=1 --suffix-length=5 input.txt output.
split --lines=2 --suffix-length=5 input.txt output.
split --lines=3 --suffix-length=5 input.txt output.
split --lines=4 --suffix-length=5 input.txt output.
split -l5000000 randn20M.csv '_tmp';
split -l1000000 randn20M.csv '_tmp';
split -l2000000 randn20M.csv '_tmp';
split -l3000000 randn20M.csv '_tmp';
tar your params |split -b 500m - output_prefix
tar your params | gzip
tmux new -d -s '$CMD'
tmux new -s '$NAME' bash -c '$CMD'
tmux new -s "$NAME" -n "$CMD"
tmux new -d -s mysession bash -c \$CMD\
tmux new -s $NAME bash -c \$CMD\
tmux new -c $DIR bash -c \$CMD\
tmux attach -t $NAME
brew link git
brew link python
xargs -i rm '{}'
rm /path/to/file.txt
awk '{print $1}' file.txt | xargs dig +short
awk '{print $2}' file.txt | xargs dig +short
awk '{print $3}' file.txt | xargs dig +short
awk '{print $4}' file.txt | xargs dig +short
awk '{print $5}' file.txt | xargs dig +short
awk '{print $6}' file.txt | xargs dig +short
awk '{print $7}' file.txt | xargs dig +short
awk '{print $8}' file.txt | xargs dig +short
awk '{print $9}' file.txt | xargs dig +short
cut -d / -f 2- .exportfiles.text | xargs -n 1 dirname
cut -d / -f 3- .exportfiles.text | xargs -n 1 dirname
unset GIT_WORK_TREE
unset GIT_COMMITTER_EMAIL
unset GIT_AUTHOR_EMAIL
unset GIT_COMMITTER_NAME
unset GIT_AUTHOR_NAME
unset GNUPLOT_PS_DIR
unset GNUPLOT_LIB
unset GNUPLOT_FONTPATH
unset GNUPLOT_DPI
unset GNUPLOT_CMD
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
zcat small-*.gz | split -d -l2000000 -a 3 - large_
source <(metaflac --show-tag ALBUM myfile.flac)
source <(metaflac --show-tag TITLE myfile.flac)
source <(metaflac --show-tag DATE myfile.flac)
source <(metaflac --show-tag TRACKNUMBER myfile.flac)
ping google.com | awk -f packet_loss.awk
ping www.google.com | awk -f packet_loss.awk
ping 8.8.8.8 | awk -f packet_loss.awk
/usr/bin/time -f%e grep "hello" file.txt > /dev/null
/usr/bin/time -f%e wc file.txt > /dev/null
/usr/bin/time -f%e find . -name "*.txt" > /dev/null
bzip2 -kv /*
bzip2 -kv /*/*
bzip2 -kv /*/*/*
bzip2 -kv /*/*/*/*
ls -a
mkdir <directory name>
rmdir <directory name>
mv <file or directory name> <destination>
cp <file or directory name> <destination>
rm <file name>
clear
cd ..
ls
mkdir
rmdir
cp
mv
man grep
man ls
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
ls -a
ls -l
ls -t
fold -w30 -s longline
fold -w40 -s longline
fold -w50 -s longline
fold -w60 -s longline
fold -w70 -s longline
diff -a --suppress-common-lines -y a.txt b.txt > c.txt
diff -u a.txt b.txt
diff -q a.txt b.txt
diff -w a.txt b.txt
ant
ant > build.log
ant 2>&1
./a.out | tee output
./a.out | gzip > output.gz
./a.out 2>&1 | tee output
./a.out | tee output
./a.out 2>&1 | tee output
./aaa.sh 1>&2 | tee -a log
./aaa.sh &>> log
./aaa.sh > /dev/null
./aaa.sh 2> /dev/null
mkdir mynewdirectory
mv myfile mynewdirectory
cp myfile mynewdirectory
rm myfile
ls mydirectory
bind '\e25~:pwd\n'
bind '\e26~:pwd\n'
bind '\e27~:pwd\n'
bind '\e28~:pwd\n'
bind '\e29~:pwd\n'
bind '\e30~:pwd\n'
bind '\e31~:pwd\n'
bind '\e32~:pwd\n'
bind '\e33~:pwd\n'
bind '\e34~:pwd\n'
bind '\e35~:pwd\n'
bind '\e36~:pwd\n'
bind '\e37~:pwd\n'
bind '\e38~:pwd\n'
chown -R :daemon /etc/passwd
chown -R :daemon /etc/shadow
chown -R :daemon /etc/group
chown -R :daemon /etc/gshadow
chown -R :lighttpd /etc/passwd
chown -R :lighttpd /etc/shadow
chown -R :lighttpd /etc/group
chown -R :lighttpd /etc/gshadow
chown -v root /path/to/yourapp
chown root dir1
chgrp specialusers dir1
chmod a+r dir1
chmod a+w dir1
chmod a+x dir1
chmod a+rwx dir1
chmod u+rw,g+r,o+r dir1
chmod u+w,g+rx,o+rx dir1
chmod u+rx,g+r,o+r dir1
chown root it
chown root script.sh
chgrp root script.sh
chmod a+r script.sh
chmod a+w script.sh
chmod a+x script.sh
chmod a+rwx script.sh
chmod u+rw,g+r,o+r script.sh
chmod u+w,g+rx,o+rx script.sh
chmod u+rwx,g+r,o+r script.sh
chgrp group_name file
chown user_name:group_name file
chmod mode file
bind -p | grep $'\x61'
bind -p | grep $'\x62'
bind -p | grep $'\x63'
bind -p | grep $'\x64'
bind -p | grep $'\x65'
bind -p | grep $'\x66'
bind -p | grep $'\x67'
bind -p | grep $'\x68'
bind -p | grep $'\x69'
bind -p | grep $'\x6A'
bind -p | grep $'\x6B'
bind -p | grep $'\x6C'
man grep
man ls
man chmod
man cp
man mv
man rm
man mkdir
man rmdir
man touch
tar xzf archive.tar.gz -C /destination
tar xf archive.tar -C /destination
tar xzf archive.tgz -C /destination
tar xjf archive.bz2 -C /destination
tar -zxvf $1
tar -zxvf $2
tar -zxvf $3
tar -zxvf $4
tar -zxvf $5
tar -zxvf $6
tar -zxvf $7
tar -zxvf $8
perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.css`
perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.js`
lbzip2 --help | grep tar
plzip --help | grep tar
head -5 tst.txt | tail -1 |cut -c 5-8
head -10 tst.txt | tail -1 |cut -c 10-13
head -15 tst.txt | tail -1 |cut -c 15-18
find . -name "*.ext"
find . -name "*.txt"
ls
pwd
cd /path/to/directory
mkdir /path/to/new/directory
rm /path/to/file
rmdir /path/to/empty/directory
bind '\e[D':backward-char
bind '\e[C':forward-char
bind '\e[1~':beginning-of-line
bind '\e[4~':end-of-line
bind '\e[A':previous-line
ls
cd
pwd
exit
clear
mv
cp
cd /etc
ls -l
mkdir foo
cd foo
cd /home/username
mkdir dirname
rmdir dirname
touch filename
rm filename
cat filename
head filename
tail filename
sed -n num1,num2p filename
bind -p|grep -i 'pE'
bind -p|grep -i 'cS'
bind -p|grep -i 'vM'
bind -p|grep -i 'tR'
bind -p|grep -i 'gH'
bind -p|grep -i 'bN'
bind -P | grep '\\e\\C-k'
bind -P | grep '\\e\\C-j'
bind -P | grep '\\e\\C-l'
bind -P | grep '\\e\\C-m'
bind -P | grep '\\e\\C-n'
bind -P | grep '\\e\\C-o'
tac a.txt | awk 'NF{print $NF; exit}'
tac b.txt | awk 'NF{print $NF; exit}'
tac c.txt | awk 'NF{print $NF; exit}'
tac d.txt | awk 'NF{print $NF; exit}'
tac e.txt | awk 'NF{print $NF; exit}'
tac f.txt | awk 'NF{print $NF; exit}'
tac g.txt | awk 'NF{print $NF; exit}'
tac h.txt | awk 'NF{print $NF; exit}'
tac i.txt | awk 'NF{print $NF; exit}'
chown -R bobd:bobd /opt/bobd/
chown -R carold:carold /opt/carold/
chown -R danield:danield /opt/danield/
chown -R edwardd:edwardd /opt/edwardd/
chown -R frankd:frankd /opt/frankd/
chown -R georged:georged /opt/georged/
chown -R henryd:henryd /opt/henryd/
chown -R ireneD:ireneD /opt/ireneD/
chown -R jamesd:jamesd /opt/jamesd/
chown -R joed:joed /opt/joed/
chown -R kated:kated /opt/kated/
chown -R larryd:larryd /opt/larryd/
/bin/find -name core — exec rm {} \;
/bin/find -name *.o — exec rm {} \;
/bin/find -name *.a — exec rm {} \;
/bin/find -name *.so — exec rm {} \;
head -n 10 a.txt > b.txt
tail -n 10 a.txt > b.txt
head -n 10 a.txt
tail -n 10 a.txt
sed '5,$!d' a.txt
sed '1,4d' a.txt
su -c 'bash --rcfile myfile'
su -c 'bash --rcfile myfile' bob
su -c 'bash --rcfile myfile' alice
ls -a
mkdir test
cd test
cd /etc
ls -l /etc
passwd
bind -m emacs "\e[2~" end_of_line
bind -m emacs "\e[3~" delete_char
bind -m emacs "\e[4~" end_of_file
bind -m emacs "\e[5~" page_up
bind -m emacs "\e[6~" page_down
bind -m emacs "\e[7~" beginning_of_page
bind -m emacs "\e[8~" end_of_page
bind -m emacs "\eOH" beginning_of_line
top -n5 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n10 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n15 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n20 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -n25 | sed 's/\(.*\)$/\1__CUSTOM_LINE_MARKER/g'
top -b -n1 | head -13 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -14 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -15 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -16 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -17 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -18 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -19 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -b -n1 | head -20 | tail -1 | awk '{ printf User: %s\nPID: %s\nCPU Usage: %s\nMEM Usage: %s\n, $2,$1,$9,$10 }'
top -p $(pgrep -d ',' java)
ps -ef | grep java
ps -p 1234 -o pid,ppid,user,%cpu,%mem,vsz,rss,tty,stat,start,time,command
ps -p 1234 -o pid,ppid,user,%cpu,%mem,vsz,rss,tty,stat,start,time,command
nl -s prefix file.txt | cut -c7-
nl -s suffix file.txt | cut -c7-
paste -d joinstring file.txt
cut -f1 file.txt
cut -f2 file.txt
cut -f3 file.txt
cut -f4 file.txt
nl -s suffix file.txt | cut -c7-
nl -s prefix file.txt | cut -c7-
cut -d' ' -fNF file.txt
cut -d' ' -f1 file.txt
cut -d' ' -f2 file.txt
cut -d' ' -f3 file.txt
cut -d' ' -f4 file.txt
cut -d' ' -f2 file.txt
cut -d' ' -f3 file.txt
cut -d' ' -f4 file.txt
cut -d' ' -f5 file.txt
nl -s prefix_ a.txt | cut -c7-
nl -s _suffix a.txt | cut -c7-
nl -s 'prefix_suffix' a.txt | cut -c7-
sed -n 1~3p a.txt
sed -n 2~3p a.txt
nl -s suffix_ a.txt | cut -c7-
nl -s prefix_ a.txt | cut -c7-
head -n 10 a.txt
tail -n 10 a.txt
sed -n '6,15p' a.txt
sed -n '2~2p' a.txt
nl -s prefix_suffix_ a.txt | cut -c7-
nl -s prefix_suffix_ b.txt | cut -c7-
nl -s prefix_suffix_ c.txt | cut -c7-
nl -s prefix_suffix_ d.txt | cut -c7-
nl -s prefix_suffix_ e.txt | cut -c7-
nl -s prefix_suffix_ f.txt | cut -c7-
nl -s prefix_suffix_ g.txt | cut -c7-
nl -s prefix_suffix_ h.txt | cut -c7-
nl -s prefix_suffix_ i.txt | cut -c7-
sed 's/foo/bar/g' a.txt
sed 's/foo/bar/g' b.txt
sed 's/foo/bar/g' c.txt
sed 's/foo/bar/g' d.txt
sed 's/foo/bar/g' e.txt
sed 's/foo/bar/g' f.txt
sed 's/foo/bar/g' g.txt
sed 's/foo/bar/g' h.txt
sed 's/foo/bar/g' i.txt
sed 's/foo/bar/g' j.txt
sed 's/foo/bar/g' k.txt
sed 's/foo/bar/g' l.txt
sed 's/foo/bar/g' m.txt
sed 's/foo/bar/g' n.txt
sed 's/foo/bar/g' o.txt
sed 's/foo/bar/g' p.txt
sed 's/foo/bar/g' q.txt
sed 's/foo/bar/g' r.txt
sed 's/foo/bar/g' s.txt
sed 's/foo/bar/g' t.txt
sed -i 's/foo/bar/g' *
sed -i 's/foo/bar/g' /path/to/directory/*
sed -i 's/foo/bar/g' */*
sed -i 's/foo/bar/g' *[^/]*
grep -r "foo" .
grep -r "foo" /path/to/directory
grep -r "foo" */*
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping yahoo.com | xargs -L 1 -I '{}' date '+%c: {}'
ping msn.com | xargs -L 1 -I '{}' date '+%c: {}'
ping amazon.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.yahoo.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.bing.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.aol.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.ask.com | xargs -L 1 -I '{}' date '+%c: {}'
pushd $HOME/Documents
pushd $HOME/Music
pushd $HOME/Pictures
sed 's/.*/& Kilobytes/' $TEMPFILE | column -t
sed 's/.*/& Megabytes/' $TEMPFILE | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -r | column -t
sed 's/.*/& Bytes/' $TEMPFILE | sort -n | column -t
screen -xr 14315
screen -xr 14316
screen -xr 14317
screen -xr 14318
screen -xr 14319
screen -xr 14320
screen -xr 14321
screen -xr 14318
screen -xr 14319
screen -xr 14320
screen -xr 14321
screen -xr 14322
screen -xr 14323
screen -xr 14324
words=$(wc -w ${my_iso_file})
chars=$(wc -m ${my_iso_file})
echo "This is a test." >> ${my_iso_file}
echo "This is a test." | cat - ${my_iso_file} > temp && mv temp ${my_iso_file}
head -n 10 ${my_iso_file}
tail -n 10 ${my_iso_file}
grep "test" ${my_iso_file}
grep -v "test" ${my_iso_file}
grep -n "test" ${my_iso_file}
touch ${my_empty_file}
rm -f ${my_empty_file}
cp ${my_source_file} ${my_destination_file}
mv ${my_source_file} ${my_destination_file}
cp *.txt /tmp
cp *.log /tmp
cp *.jpg /tmp
ls
ls -a
ls -al
ls -t
md5sum $(which mv)
md5sum $(which ls)
md5sum $(which rm)
md5sum $(which mkdir)
md5sum $(which rmdir)
md5sum $(which touch)
md5sum $(which chmod)
md5sum $(which grep)
md5sum $(which man)
md5sum $(which cat)
md5sum $(which less)
md5sum $(which more)
md5sum $(which head)
md5sum $(which tail)
md5sum $(which cut)
md5sum $(which sort)
md5sum $(which uniq)
md5sum $(which wc)
md5sum $(which find)
md5sum $(which cat)
md5sum $(which ls)
md5sum $(which pwd)
md5sum $(which cp)
md5sum $(which mv)
md5sum $(which rm)
md5sum $(which mkdir)
md5sum $(which rmdir)
md5sum $(which touch)
md5sum $(which chmod)
md5sum $(which chown)
md5sum $(which grep)
sha1sum $(which grep)
md5sum $(which grep)
md5sum $(which awk)
md5sum $(which sed)
md5sum $(which tr)
md5sum $(which wc)
md5sum $(which grep)
md5sum $(which find)
md5sum $(which cat)
md5sum $(which top)
md5sum $(which grep)
md5sum $(which awk)
md5sum $(which sed)
md5sum `which g++`
md5sum `which cat`
md5sum `which sed`
md5sum `which awk`
md5sum `which find`
md5sum `which grep`
md5sum `which gcc`
md5sum `which gdb`
md5sum `which git`
md5sum `which go`
md5sum `which hg`
md5sum `which kill`
md5sum `which less`
md5sum `which ls`
md5sum `which make`
md5sum `which man`
md5sum `which mkdir`
md5sum `which mv`
md5sum `which nc`
md5sum `which node`
md5sum `which npm`
md5sum `which ping`
md5sum `which ps`
md5sum `which pwd`
md5sum `which python`
md5sum `which rm`
md5sum `which rmdir`
md5sum `which scp`
md5sum `which sed`
md5sum `which ssh`
md5sum `which gcc`
md5sum `which g++`
md5sum `which awk`
md5sum `which sed`
md5sum `which find`
md5sum `which grep`
md5sum `which gcc`
md5sum `which g++`
md5sum `which make`
md5sum `which git`
md5sum `which svn`
md5sum `which curl`
md5sum `which wget`
md5sum `which vim`
crontab -l | sed '/bnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/script\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/myscript\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/bnm\.pl/s#\/5#\/10#' | crontab -
crontab -l | sed '/gnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/foo\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/bar\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/baz\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/qux\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/quux\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/corge\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/grault\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/garply\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/waldo\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/fred\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/plugh\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/10#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/15#' | crontab -
crontab -l | sed '/hnm\.sh/s#\/5#\/20#' | crontab -
crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/bnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/cnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/dnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/enm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/fnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/gnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/inm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/bnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/foo\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/bar\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/baz\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/qux\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/quux\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/dnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/script\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/15,' | crontab -
crontab -l | sed '/hnm\.sh/s,^\*/5,*/20,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/10,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/15,' | crontab -
crontab -l | sed '/jnm\.sh/s,^\*/5,*/20,' | crontab -
chown amzadm.root  /usr/local/bin/aws
chown ec2-user.root  /usr/local/bin/aws
chown amzadm.root  /usr/sbin/aws
chown root.root /usr/sbin/aws
chown ubuntu.root /usr/sbin/aws
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
groups monit |grep www-data
paste -s -d' \n' input.txt
paste -d, input.txt
cut -f1 input.txt
cut -f2 input.txt
cut -f3 input.txt
cut -f4 input.txt
paste -d'\t' input.txt
paste -d'\t' -s input.txt
paste -d'\t' -s -z input.txt
cut -f1 input.txt
cut -f2 input.txt
cut -f3 input.txt
cut -f4 input.txt
cut -f3 input.txt
cut -f4 input.txt
cut -f5 input.txt
cut -f6 input.txt
cut -f7 input.txt
cut -f8 input.txt
cut -f9 input.txt
cut -f1 input.txt
cut -f3 input.txt
cut -f1,2,3 input.txt
yes '2222222222222222' | tr -d '\n' > /dev/to/overwrite
yes '3333333333333333' | tr -d '\n' > /dev/to/overwrite
yes '4444444444444444' | tr -d '\n' > /dev/to/overwrite
yes '5555555555555555' | tr -d '\n' > /dev/to/overwrite
yes '6666666666666666' | tr -d '\n' > /dev/to/overwrite
yes '7777777777777777' | tr -d '\n' > /dev/to/overwrite
yes '8888888888888888' | tr -d '\n' > /dev/to/overwrite
cal -h 03 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 04 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 05 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 06 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 07 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 08 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 09 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 12 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 01 2013| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 02 2013| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 03 2013| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 04 2013| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 10 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 11 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 12 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 13 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 14 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 15 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 16 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 17 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -h 18 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2
cal -3 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal | perl -lnE'$.==1||$.==13||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..11)}'
cal 01 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 02 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 03 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 04 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 05 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 06 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 07 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 08 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 09 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 01 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 01 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 11 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 01 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal -3 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 01 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 01 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 03 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 04 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 05 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 06 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 07 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 08 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 09 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 10 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal 11 2012|perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
cal -3 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(0..4)}'
cal 01 2012 | perl -lnE'$.==1||eof||do{$,=\t&;$\=\t\\\\\n;$l=$_;print map{substr($l,$_*3,3)}(1..5)}'
head -c1024 /dev/urandom | xxd -p | tr -d $'\n'
head -c2048 /dev/urandom | xxd -p | tr -d $'\n'
cd -
cd ~
cp [filename] [directory]
mv [filename] [new filename]
rm [filename]
cat [filename]
less [filename]
more [filename]
touch [filename]
mkdir [directory name]
cd [directory name]
chmod [permissions] [filename]
chown [owner] [filename]
chgrp [group] [filename]
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_
tar cz my_large_file | split -b 1024MiB - myfiles_split.tgz
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tar
rand_str=$(mktemp --dry-run ${str// /X})
rand_str=$(mktemp --dry-run ${str//[![:alnum:]]/})
rand_str=$(mktemp --dry-run ${str//[[:upper:]]/})
sed -i '/^$/d' filename
sed -i '/^\s*$/d' filename
sed -i 's/^[ \t]*//' filename
sed -i 's/[ \t]*$//' filename
sed -i '/^\s*$/d' filename
sed '/./,$!d' filename
sed '1,/./!d' filename
sed -i 's/pattern/substitution/g' filename
sed -i '/substitution/s/pattern/substitution/' filename
sed -i '/substitution/s/pattern/substitution/g' filename
sed -i '/substitution/!s/pattern/substitution/' filename
sed -i '/pattern$/s//substitution/' filename
sed -i '/^pattern$/s//substitution/' filename
sed -i 's/pattern/substitution/' filename
sed -i 's/\bpattern/substitution/' filename
sed -i 's/pattern\b/substitution/' filename
rm -r !(*.txt)
rm -r !(*.jpg)
rm -r !(*.pdf)
rm -r !(*.doc)
column -x -c 30 /tmp/file
column -x -c 40 /tmp/file
column -x -c 50 /tmp/file
column -x -c 60 /tmp/file
column -x -c 70 /tmp/file
column -x -c 40 /tmp/file
column -x -c 80 /tmp/file
column -x -c 100 /tmp/file
column -x -c 50 /tmp/file
column -x -c 100 /tmp/file
column -x -c 150 /tmp/file
column -x -c 200 /tmp/file
column -x -c 250 /tmp/file
column -x -c 60 /tmp/file
column -x -c 80 /tmp/file
column -x -c 100 /tmp/file
column -x -c 120 /tmp/file
column -x -c 140 /tmp/file
column -x -c 80 /tmp/file
column -x -c 90 /tmp/file
column -x -c 100 /tmp/file
column -x -c 110 /tmp/file
column -x -c 120 /tmp/file
column -x -c 130 /tmp/file
column -x -c 140 /tmp/file
diff -y one.txt two.txt
diff -c one.txt two.txt
diff -y one.txt two.txt
awk '{printf %s , $0} END {printf \n}' inputfile
awk '{printf %s\t , $0} END {printf \n}' inputfile
awk '{printf "%s,", $0} END {printf "\n"}' inputfile
awk '{printf %s , $0}' inputfile
head -10 inputfile
tail -10 inputfile
tail -n+10 inputfile
head -n-10 inputfile
grep pattern inputfile
grep -v pattern inputfile
grep pattern1 inputfile | grep pattern2
awk '{printf %s, $0} END {printf \n}' inputfile
awk '{printf %s; $0} END {printf \n}' inputfile
awk '{printf %s, $0} END {printf \n}' inputfile
awk 'ORS=NR%2?",":"\n"' inputfile
sed 's/foo/bar/g' inputfile
sed 's/foo/bar/' inputfile
cat inputfile2 >> inputfile1
ls -l
cd
mkdir
rmdir
cp
mv
df '/some/directory' | awk '{print $1, $6}'
df '/some/directory' | awk '{print $4}'
df '/some/directory' | awk '{print $3}'
df '/some/directory' | awk '{print $2}'
df -h '/some/directory'
df -h
du -sh '/some/directory'
du -sh
ls -l '/some/directory'
ls -l .
ls -la '/some/directory'
zcat sample_0002.gz | sed -e 's/lk=1&//g'
zcat sample_0003.gz | sed -e 's/lk=1&//g'
zcat sample_0004.gz | sed -e 's/lk=1&//g'
zcat sample_0005.gz | sed -e 's/lk=1&//g'
zcat sample_0006.gz | sed -e 's/lk=1&//g'
zcat sample_0007.gz | sed -e 's/lk=1&//g'
zcat sample_0008.gz | sed -e 's/lk=1&//g'
zcat sample_0003.gz | sed -e 's/lk=1&//g'
zcat sample_0004.gz | sed -e 's/lk=1&//g'
zcat sample_0005.gz | sed -e 's/lk=1&//g'
zcat sample_0006.gz | sed -e 's/lk=1&//g'
zcat sample_0007.gz | sed -e 's/lk=1&//g'
zcat sample_0008.gz | sed -e 's/lk=1&//g'
zcat sample_0010.gz | sed -e 's/lk=1&//g'
zcat sample_0011.gz | sed -e 's/lk=1&//g'
zcat sample_0012.gz | sed -e 's/lk=1&//g'
zcat sample_0013.gz | sed -e 's/lk=1&//g'
zcat sample_0014.gz | sed -e 's/lk=1&//g'
zcat sample_0015.gz | sed -e 's/lk=1&//g'
zcat sample_0016.gz | sed -e 's/lk=1&//g'
zcat sample_0017.gz | sed -e 's/lk=1&//g'
zcat sample_0018.gz | sed -e 's/lk=1&//g'
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ed25519_key.pub
ssh-keygen -l -E sha1 -f /etc/ssh/ssh_host_ecdsa_key.pub
ssh-keygen -l -E sha1 -f /etc/ssh/ssh_host_ed25519_key.pub
HISTSIZE=1000
HISTSIZE=2000
HISTSIZE=3000
HISTSIZE=4000
watch --color 'tput setaf 11; echo fred'
watch --color 'tput setaf 12; echo fred'
watch --color 'tput setaf 13; echo fred'
watch --color 'tput setaf 14; echo fred'
watch --color 'tput setaf 15; echo fred'
watch --color 'tput setaf 16; echo fred'
watch --color 'tput setaf 17; echo fred'
watch --color 'tput setaf 18; echo fred'
watch --color 'tput setaf 19; echo fred'
watch --color 'tput setaf 20; echo fred'
exit 1
exit 2
exit 3
exit 4
exit 5
exit 6
exit 7
exit 8
export PS1='$(whoami)@$(hostname):'
export PS2='>'
export PS3='#'
export PS4='+'
export PS4='-'
export PS4='*'
export PS4='/'
export PS4='%'
export PS4='^'
export PS4='&'
export PS4='|'
export PS4='~'
export PS4='`'
export PS4=';'
cut -d ' ' -f 1 file1.txt
cut -d ' ' -f 2 file1.txt
cut -d ' ' -f 3 file1.txt
cut -d ' ' -f 4 file1.txt
tar xzf $myarchive && cd ${myarchive%.tar.gz}
tar xzf $myarchive
tar -xvf file.tar
tar -xvzf file.tar.gz
dig yahoo.com MX
dig bing.com MX
dig aol.com MX
dig ask.com MX
dig yahoo.com TXT
dig bing.com TXT
dig aol.com TXT
dig ask.com TXT
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 3)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 4)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 5)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 6)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 7)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 8)
comm -12 <(find . -maxdepth 3 | sed -e 's/^.\///' ) <(cat 9)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 3)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 4)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 5)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 6)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 7)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 8)
comm -12 <(find . -maxdepth 4 | sed -e 's/^.\///' ) <(cat 9)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 3)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 4)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 5)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 6)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 7)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 8)
comm -12 <(find . -maxdepth 5 | sed -e 's/^.\///' ) <(cat 9)
comm -12 <(find . -maxdepth 7 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 1)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 3)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 4)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 5)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 6)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 7)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 8)
comm -12 <(find . -maxdepth 8 | sed -e 's/^.\///' ) <(cat 9)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 2)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 3)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 4)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 5)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 6)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 7)
comm -12 <(find . -maxdepth 9 | sed -e 's/^.\///' ) <(cat 8)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -r -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -n)
find . -type f -printf '%A@ %p\0' | sort -z -r -n
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -n)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -nr)
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type f -printf '%A@ %p\0' | sort -z -nr)
find /home/user/Documents -name "*.txt"
find /home/user -name "*.txt"
find . -name "*.txt" -type f
find . -name "*.txt"
find /tmp -name "*.txt"
find /home -name "*.txt"
find /usr -name "*.txt"
find /var -name "*.txt"
find /etc -name "*.txt"
find /bin -name "*.txt"
find /sbin -name "*.txt"
find /opt -name "*.txt"
{ time sleep 2; } 2>&1 | grep real
{ time sleep 2; } 2>&1 | grep user
{ time sleep 2; } 2>&1 | grep sys
{ time sleep 3; } 2>&1 | grep real
{ time sleep 3; } 2>&1 | grep user
{ time sleep 3; } 2>&1 | grep sys
{ time sleep 5; } 2>&1 | grep real
{ time sleep 6; } 2>&1 | grep real
{ time sleep 7; } 2>&1 | grep real
{ time sleep 8; } 2>&1 | grep real
{ time sleep 9; } 2>&1 | grep real
awk '{print result =,$0}' <(rev file)
awk '{print result =,$0}' <(tac file)
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +) ^ +/\1 7/' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) (^ +)/\130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) (^ +)/\11 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^(^ +[0-9]{1,2}) (^ +[0-9]{1,2}) (^ +)/\11 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-5][0-9]) (^ +)/\130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)[0-9]{1,2}) ([0-5][0-9]) (^ +)/\103 \130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)([1-9]|[12][0-9]|3[01])) (^ +)/07 \130 /' | crontab -
crontab -l | sed -re '/# *change-enabled *$/s/^((^ +)([1-9]|1[012])) (^ +)/06 \130 /' | crontab -
pwd
ls
mkdir dir
rmdir dir
cp file1 file2
mv file1 file2
ln --force --target-directory=~/staging ~/mirror/*
ln -s /path/to/file file
ln -s /path/to/file dir/file
ln -s -f /path/to/file file
ln -s /path/to/file dir/file
ln -s /path/to/file2 dir/file1
cut -f3 file
cut -f4 file
cut -f5 file
cut -f6 file
cut -f7 file
cut -f8 file
cut -f9 file
cut -f1 file
cut -f2 file
cut -f4 file
cut -f5 file
cut -f6 file
cut -f7 file
cut -f8 file
cut -f9 file
which grep
which awk
which tr
which cut
which wc
which find
date
pwd
cd ~
ifconfig en1 | grep -Eo ..\(\:..\){5}
ifconfig en2 | grep -Eo ..\(\:..\){5}
ifconfig en3 | grep -Eo ..\(\:..\){5}
ifconfig en4 | grep -Eo ..\(\:..\){5}
ifconfig wlan0 | grep -Eo ..\(\:..\){5}
ifconfig fw1 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo ..\(\:..\){5}
ifconfig fw3 | grep -Eo ..\(\:..\){5}
ifconfig fw4 | grep -Eo ..\(\:..\){5}
ifconfig fw5 | grep -Eo ..\(\:..\){5}
ifconfig fw6 | grep -Eo ..\(\:..\){5}
ifconfig fw7 | grep -Eo ..\(\:..\){5}
ifconfig fw8 | grep -Eo ..\(\:..\){5}
ifconfig fw9 | grep -Eo ..\(\:..\){5}
ifconfig fw10 | grep -Eo ..\(\:..\){5}
ifconfig fw11 | grep -Eo ..\(\:..\){5}
ifconfig fw12 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo ..\(\:..\){5}
ifconfig fw3 | grep -Eo ..\(\:..\){5}
ifconfig fw4 | grep -Eo ..\(\:..\){5}
ifconfig fw5 | grep -Eo ..\(\:..\){5}
ifconfig fw6 | grep -Eo ..\(\:..\){5}
ifconfig fw7 | grep -Eo ..\(\:..\){5}
ifconfig fw8 | grep -Eo ..\(\:..\){5}
ifconfig fw9 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo ..\(\:..\){5}
ifconfig fw2 | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*'
ifconfig mfib1 | grep -Eo ..\(\:..\){5}
ifconfig mfib2 | grep -Eo ..\(\:..\){5}
ifconfig mfib3 | grep -Eo ..\(\:..\){5}
ifconfig mfib4 | grep -Eo ..\(\:..\){5}
ifconfig mfib5 | grep -Eo ..\(\:..\){5}
ifconfig mfib6 | grep -Eo ..\(\:..\){5}
ifconfig mfib7 | grep -Eo ..\(\:..\){5}
ifconfig mfib8 | grep -Eo ..\(\:..\){5}
ifconfig mfib9 | grep -Eo ..\(\:..\){5}
ifconfig mfib10 | grep -Eo ..\(\:..\){5}
ifconfig mfib11 | grep -Eo ..\(\:..\){5}
ifconfig mfib12 | grep -Eo ..\(\:..\){5}
ifconfig mfib2 | grep -Eo ..\(\:..\){5}
ifconfig mfib3 | grep -Eo ..\(\:..\){5}
ifconfig mfib4 | grep -Eo ..\(\:..\){5}
ifconfig mfib5 | grep -Eo ..\(\:..\){5}
ifconfig mfib6 | grep -Eo ..\(\:..\){5}
ifconfig mfib7 | grep -Eo ..\(\:..\){5}
ifconfig mfib8 | grep -Eo ..\(\:..\){5}
ifconfig mfib9 | grep -Eo ..\(\:..\){5}
ifconfig mfib10 | grep -Eo ..\(\:..\){5}
ifconfig mfib11 | grep -Eo ..\(\:..\){5}
ifconfig mfib12 | grep -Eo ..\(\:..\){5}
ifconfig mfib13 | grep -Eo ..\(\:..\){5}
ifconfig mfib3 | grep -Eo ..\(\:..\){5}
ifconfig mfib4 | grep -Eo ..\(\:..\){5}
ifconfig mfib5 | grep -Eo ..\(\:..\){5}
ifconfig mfib6 | grep -Eo ..\(\:..\){5}
ifconfig mfib7 | grep -Eo ..\(\:..\){5}
ifconfig mfib8 | grep -Eo ..\(\:..\){5}
ifconfig mfib9 | grep -Eo ..\(\:..\){5}
ifconfig mfib10 | grep -Eo ..\(\:..\){5}
ifconfig mfib11 | grep -Eo ..\(\:..\){5}
ifconfig mfib12 | grep -Eo ..\(\:..\){5}
ifconfig mfib13 | grep -Eo ..\(\:..\){5}
ifconfig mfib14 | grep -Eo ..\(\:..\){5}
lsof -n -i:3007 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3008 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
lsof -n -i:3009 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9
sed -n '11,20p' filename
sed -n '21,30p' filename
sed -n '31,40p' filename
sed -n '41,50p' filename
sed -n '51,60p' filename
sed -n '61,70p' filename
sed -n '71,80p' filename
sed -n '81,90p' filename
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'
fold -w30 longline | tr '\n' '_' | sed 's/_$/\n/'
fold -w30 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w30 longline | tr '\n' '+' | sed 's/+$/\n/'
fold -w30 longline | tr '\n' '=' | sed 's/=$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
fold -w30 longline | tr '\n' '_' | sed 's/_$/\n/'
fold -w30 longline | tr '\n' '\t' | sed 's/\t$/\n/'
sed "s/oldstring/newstring/g" filename
sed -i "s/oldstring/newstring/g" *
cp file1 file2
mv file1 file2
fold -w30 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w40 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w50 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w30 longline | tr '\n' '+' | sed 's/+$/\n/'
fold -w30 longline | tr '\n' ' ' | sed 's/ $/\n/'
fold -w30 longline | tr '\n' ',' | sed 's/,$/\n/'
tr '\n' ' ' < longline > newlongline
fold -w30 longline | tr '\n' '=' | sed 's/=$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
fold -w30 longline | tr '\n' '*' | sed 's/*$/\n/'
fold -w30 longline | tr '\n' '@' | sed 's/@$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
fold -w30 longline | tr '\n' '-' | sed 's/-$/\n/'
sed -i 15i `date` test.html
sed -i 15i `date +%H:%M:%S` test.html
echo `date` >> test.html
echo `date +%H:%M:%S` >> test.html
sed -i 1i `date` test.html
sed -i 1i `time` test.html
sed -i 5i `time` test.html								   
echo `time` >> test.html
sed -i 15i `date` test.html
sed -i 15i `time` test.html
cat test2.html >> test.html
cat test2.html > test.html
sed -n 15p test.html
sed -i 15i `pwd` test.html
sed -i 15i `date` test.html
cat test2.html >> test.html
cat test2.html > test.html
sed -n '10,20p' test.html
touch file2
touch file3
touch file4
touch file5
touch file6
touch file7
touch file8
touch file9
rm file2
rm file3
rm file4
rm file5
rm file6
rm file7
rm file8
rm file9
rm file10
rm file11
rm file12
rm file13
rm file14
pwd | cut -b2- | tr '/' '\n'
cut -f2 infile
cut -f3 infile
cut -f4 infile
cut -f5 infile
cut -f6 infile
cut -f7 infile
cut -f8 infile
cut -f9 infile
cut -f3 infile
cut -f4 infile
cut -f5 infile
cut -f6 infile
cut -f7 infile
cut -f8 infile
cut -f9 infile
cut -f4 infile
cut -f5 infile
cut -f6 infile
cut -f7 infile
cut -f8 infile
cut -f9 infile
sed -i 's/foo/bar/3' file
sed -i 's/foo/bar/4' file
sed -i 's/foo/bar/5' file
sed -i 's/foo/bar/6' file
sed -i 's/foo/bar/7' file
sed -i 's/foo/bar/8' file
sed -i 's/foo/bar/1' file
sed -i 's/foo/bar/2' file
sed -i 's/foo/bar/4' file
sed -i 's/foo/bar/5' file
sed -i 's/foo/bar/6' file
sed -i 's/foo/bar/7' file
sed -i 's/foo/bar/8' file
sed -i '/baz/!s/foo/bar/' file
sed -i '/baz/!s/foo/bar/2' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/4' file
sed -i '/baz/!s/foo/bar/5' file
sed -i '/baz/!s/foo/bar/6' file
sed -i '/baz/!s/foo/bar/7' file
sed -i '/baz/!s/foo/bar/8' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/4' file
sed -i '/baz/!s/foo/bar/5' file
sed -i '/baz/!s/foo/bar/6' file
sed -i '/baz/!s/foo/bar/7' file
sed -i '/baz/!s/foo/bar/8' file
sed -i '/baz/!s/foo/bar/9' file
sed -i '/baz/!s/foo/bar/10' file
sed -i '/baz/!s/foo/bar/11' file
sed -i '/baz/!s/foo/bar/12' file
sed -i '/baz/!s/foo/bar/13' file
sed -i '/baz/!s/foo/bar/14' file
sed -i '/baz/!s/foo/bar/15' file
sed -i '/baz/!s/foo/bar/16' file
sed -i '/baz/!s/foo/bar/17' file
sed -i '/baz/!s/foo/bar/18' file
sed -i '/baz/!s/foo/bar/19' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/3' file
sed -i '/baz/!s/foo/bar/3' file
nl -nrz -w9 foobar
nl -nlz -w9 foobar
nl -nrs -w9 foobar
nl -nls -w9 foobar
nl -nrs -w12 foobar
nl -nrsp -w9 foobar
nl -nlsp -w9 foobar
nl -nrz -w9 foobar
nl -nz -w9 foobar
nl -nrsp -w12 foobar
nl -nlsp -w12 foobar
nl -nrz -w12 foobar
awk 'NR==16224, NR==16482' file
awk 'NR>=16224' file
awk 'NR<=16482' file
awk 'NR<=16482' file
awk 'NR<=16483' file
awk 'NR<=16484' file
awk 'NR<=16485' file
awk 'NR<=16486' file
awk 'NR<=16487' file
awk 'NR<=16488' file
ping www.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping mail.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping maps.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping drive.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping sites.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping plus.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping play.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping news.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping finance.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping search.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping images.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping video.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping books.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping scholar.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping translate.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping photos.google.com | xargs -L 1 -I '{}' date '+%c: {}'
ping www.google.fr | while read pong; do echo $(date): $pong; done
ping www.google.fr | while read pong; do echo $(time): $pong; done
ping www.google.fr | while read pong; do echo $pong: $(date); done
ping www.google.fr | while read pong; do echo $pong: $(time); done
ping www.google.fr | while read pong; do echo $(date); done
pwd
cd ~
cd -					   
mkdir [directory]
rmdir [directory]
cp [file1] [file2]
mv [file1] [file2]
cat [file]
less [file]
more [file]
head -1 a.txt
head -1 b.txt
head -1 c.txt
head -1 d.txt
head -1 e.txt
head -1 f.txt
head -1 g.txt
head -1 h.txt
head -1 i.txt
head -1 j.txt
head -1 k.txt
head -1 l.txt
head -1 m.txt
head -1 n.txt
head -1 o.txt
head -1 p.txt
head -1 q.txt
head -1 r.txt
head -1 s.txt
head -1 t.txt
tail -1 a.txt
tail -1 b.txt
tail -1 c.txt
tail -1 d.txt
tail -1 e.txt
tail -1 f.txt
tail -1 g.txt
tail -1 h.txt
tail -1 i.txt
tail -1 j.txt
tail -1 k.txt
tail -1 l.txt
tail -1 m.txt
tail -1 n.txt
tail -1 o.txt
tail -1 p.txt
tail -1 q.txt
tail -1 r.txt
tail -1 s.txt
tail -1 t.txt
head -3 123456789
head -4 123456789
head -5 123456789
head -6 123456789
head -7 123456789
head -8 123456789
head -9 123456789
tail -2 a.txt
tail -2 b.txt
tail -2 c.txt
tail -2 d.txt
tail -2 e.txt
tail -2 f.txt
tail -2 g.txt
tail -2 h.txt
tail -2 i.txt
tail -2 j.txt
tail -2 k.txt
tail -2 l.txt
tail -2 m.txt
tail -2 n.txt
tail -2 o.txt
tail -2 p.txt
tail -2 q.txt
tail -2 r.txt
head -3 a.txt
head -3 b.txt
head -3 c.txt
head -3 d.txt
head -3 e.txt
head -3 f.txt
head -3 g.txt
head -3 h.txt
head -3 i.txt
head -3 j.txt
head -3 k.txt
head -3 l.txt
head -3 m.txt
head -3 n.txt
head -3 o.txt
head -3 p.txt
head -3 q.txt
head -3 r.txt
head -3 s.txt
head -3 t.txt
head -3 u.txt
head -3 v.txt
tail -3 a.txt
tail -3 b.txt
tail -3 c.txt
tail -3 d.txt
tail -3 e.txt
tail -3 f.txt
tail -3 g.txt
tail -3 h.txt
tail -3 i.txt
tail -3 j.txt
tail -3 k.txt
tail -3 l.txt
tail -3 m.txt
tail -3 n.txt
tail -3 o.txt
tail -3 p.txt
tail -3 q.txt
tail -3 r.txt
head -4 a.txt
head -4 b.txt
head -4 c.txt
head -4 d.txt
head -4 e.txt
head -4 f.txt
head -4 g.txt
head -4 h.txt
head -4 i.txt
head -4 j.txt
head -4 k.txt
head -4 l.txt
head -4 m.txt
head -4 n.txt
head -4 o.txt
head -4 p.txt
head -4 q.txt
head -4 r.txt
head -4 s.txt
tail -4 a.txt
tail -4 b.txt
tail -4 c.txt
tail -4 d.txt
tail -4 e.txt
tail -4 f.txt
tail -4 g.txt
tail -4 h.txt
tail -4 i.txt
tail -4 j.txt
tail -4 k.txt
tail -4 l.txt
tail -4 m.txt
tail -4 n.txt
tail -4 o.txt
tail -4 p.txt
tail -4 q.txt
tail -4 r.txt
head -5 a.txt
head -5 b.txt
head -5 c.txt
head -5 d.txt
head -5 e.txt
head -5 f.txt
head -5 g.txt
head -5 h.txt
head -5 i.txt
head -5 j.txt
head -5 k.txt
head -5 l.txt
head -5 m.txt
head -5 n.txt
head -5 o.txt
head -5 p.txt
head -5 q.txt
head -5 r.txt
hostname -I | awk '{print $3}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $5}'
hostname -I | awk '{print $6}'
hostname -I | awk '{print $7}'
hostname -I | awk '{print $8}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $5}'
hostname -I | awk '{print $6}'
hostname -I | awk '{print $7}'
hostname -I | awk '{print $8}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $5}'
hostname -I | awk '{print $1}'
hostname -I | awk '{print $2}'
hostname -I | awk '{print $3}'
hostname -I | awk '{print $4}'
hostname -I | awk '{print $5}'
hostname -I | awk '{print $6}'
hostname -I | cut -d' ' -f1
hostname -I | cut -d' ' -f2
hostname -I | cut -d' ' -f1
hostname -I | cut -d' ' -f2
hostname -I | cut -d' ' -f3
printf '%0.s-' $(seq 1 $variable)
printf '%0.s=' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s+' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\' $(seq 1 $variable)
printf '%0.s,' $(seq 1 $variable)
printf '%0.s.' $(seq 1 $variable)
printf '%0.s=' $(seq 1 $variable)
printf '%0.s-' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s.' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\\' $(seq 1 $variable)
printf '%0.s^' $(seq 1 $variable)
printf '%0.s_' $(seq 1 $variable)
printf '%0.s`' $(seq 1 $variable)
printf '%0.s\' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s-' $(seq 1 $variable)
printf '%0.s_' $(seq 1 $variable)
printf '%0.s|' $(seq 1 $variable)
printf '%0.s-' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s.' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\\' $(seq 1 $variable)
printf '%0.s^' $(seq 1 $variable)
printf '%0.s_' $(seq 1 $variable)
printf '%0.s`' $(seq 1 $variable)
printf '%0.s|' $(seq 1 $variable)
printf '%0.s-' $(seq 1 $variable)
printf '%0.s*' $(seq 1 $variable)
printf '%0.s+' $(seq 1 $variable)
printf '%0.s/' $(seq 1 $variable)
printf '%0.s\' $(seq 1 $variable)
printf '%0.s|' $(seq 1 $variable)
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 100 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 1000 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 100 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 200 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 300 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 400 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 500 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 600 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 700 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 800 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
seq 1 900 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------')
sed -e 's/,/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print -----------------------------------------------------------------------;}'
sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print -----------------------------------------------------------------------;}'
df . | awk '$3 ~ /0-9+/ { print $4 }'
df ~ | awk '$3 ~ /0-9+/ { print $4 }'
df / | awk '$3 ~ /0-9+/ { print $4 }'
df /usr | awk '$3 ~ /0-9+/ { print $4 }'
df /var | awk '$3 ~ /0-9+/ { print $4 }'
df ~ | awk '$3 ~ /0-9+/ { print $4 }'
df . | awk '$3 ~ /0-9+/ { print $4 }'
ping -c 1 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 2 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 3 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 4 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 5 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 6 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 7 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 8 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 9 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 10 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 11 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 12 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 13 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 14 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 1 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 2 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 3 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 4 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 5 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 6 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 7 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 8 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 9 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 10 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 11 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 12 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 13 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
ping -c 14 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log)
$ cat 3
$ cat 4
$ cat 5
$ cat 6
$ cat 7
$ cat 8
$ cat 9
od -t x1 -An file |tr -d '\n '
od -t o1 -An file |tr -d '\n '
od -t d1 -An file |tr -d '\n '
od -tu1 -An file |tr -d '\n '
od -td1 -An file |tr -d '\n '
od -t a1 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -tu2 -An file |tr -d '\n '
od -t o1 -An file |tr -d '\n '
od -t d1 -An file |tr -d '\n '
od -t x1 -An file |tr -d '\n '
od -t o2 file
od -t d2 file
od -t d1 -An file |tr -d '\n '
od -t o1 -An file |tr -d '\n '
od -t x1 -An file |tr -d '\n '
od -t d1 -A n file |tr -d '\n ' |sed 's/,/ /g'
od -t o1 -A n file |tr -d '\n ' |sed 's/,/ /g'
od -t x1 -A n file |tr -d '\n ' |sed 's/,/ /g'
od -t d1 -A n file |tr -d '\n ' |sed 's/:/ /g'
od -t o1 -A n file |tr -d '\n ' |sed 's/:/ /g'
od -tu1 -An file |tr -d '\n '
od -ts1 -An file |tr -d '\n '
od -to1 -An file |tr -d '\n '
od -tx1 -An file |tr -d '\n '
od -tu2 -An file |tr -d '\n '
od -ts2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -td1 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -td4 -An file |tr -d '\n '
od -t a1 -An file |tr -d '\n '
od -t a1 -A n file |tr -d '\n '|sed 's/ /,/g'
od -t a1 -A n file |tr -d '\n '|sed 's/ /\t/g'
od -t a1 -A n file |tr -d '\n '|sed 's/ /|/g'
od -tx2 -An file |tr -d '\n '
od -to3 -An file |tr -d '\n '
od -td4 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -td2 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -tc4 -An file |tr -d '\n '
od -tc8 -An file |tr -d '\n '
od -tu2 -An file |tr -d '\n '
od -ts2 -An file |tr -d '\n '
od -to2 -An file |tr -d '\n '
od -tx2 -An file |tr -d '\n '
od -tu2 -v file
od -ts2 -v file
od -to2 -v file
cut -d, -f1 file.csv
cut -d, -f2 file.csv
cut -d, -f3 file.csv
cut -d, -f4 file.csv
cut -d, -f5 file.csv
cut -d, -f6 file.csv
cut -d, -f7 file.csv
cut -d, -f8 file.csv
cut -d, -f9 file.csv
fold -w1 file | pr -4t | sed 's/\s*-\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*_\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*\*\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*+\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*=\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | sed 's/\s*%\s*//g' | tr -d '\n' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t_ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t= ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t_ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t__ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t___ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t____ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t_____ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t______ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t* ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t+ ' | sed '$a\'
fold -w1 file | pr -4t | tr -d '\n\t= ' | sed '$a\'
cut -d'=' -f1 file | pr -4t
fold -b16 | sed 's/../& /g'
fold -b8 | sed 's/../& /g'
fold -b4 | sed 's/../& /g'
fold -b8 | sed 's/../& /g'
fold -b16 | sed 's/..../& /g'
fold -b32 | sed 's/......../& /g'
fold -b64 | sed 's/................/& /g'
fold -b4 | sed 's/../& /g'
fold -b8 | sed 's/..../& /g'
fold -b16 | sed 's/......../& /g'
history 50
id -u
seq 10 | parallel -j4  echo '{}'
seq 20 | parallel -j4  echo '{}'
seq 30 | parallel -j4  echo '{}'
seq 40 | parallel -j4  echo '{}'
seq 50 | parallel -j4  echo '{}'
seq 60 | parallel -j4  echo '{}'
seq 70 | parallel -j4  echo '{}'
seq 80 | parallel -j4  echo '{}'
seq 90 | parallel -j4  echo '{}'
seq 20 | parallel -j4  echo '{}'
seq 20 | parallel -j8  echo '{}'
seq 20 | parallel -j12  echo '{}'
seq 30 | parallel -j4  echo '{}'
seq 30 | parallel -j8  echo '{}'
seq 30 | parallel -j16  echo '{}'
seq 100 | parallel -j4  echo '{}'
seq 100 | parallel -j8  echo '{}'
seq 40 | parallel -j4  echo '{}'
seq 30 | parallel -j3  echo '{}'
seq 20 | parallel -j2  echo '{}'
seq 50 | parallel -j4  echo '{}'
seq 100 | parallel -j4  echo '{}'
seq 150 | parallel -j4  echo '{}'
seq 200 | parallel -j4  echo '{}'
seq 60 | parallel -j4  echo '{}'
seq 100 | parallel -j10  echo '{}'
seq 500 | parallel -j20  echo '{}'
seq 70 | parallel -j4  echo '{}'
seq 100 | parallel -j4  echo '{}'
seq 500 | parallel -j4  echo '{}'
seq 80 | parallel -j4  echo '{}'
seq 100 | parallel -j5  echo '{}'
seq 120 | parallel -j6  echo '{}'
seq 140 | parallel -j7  echo '{}'
seq 160 | parallel -j8  echo '{}'
seq 180 | parallel -j9  echo '{}'
seq 90 | parallel -j4  echo '{}'
seq 100 | parallel -j4  echo '{}'
seq 110 | parallel -j4  echo '{}'
seq 120 | parallel -j4  echo '{}'
seq 130 | parallel -j4  echo '{}'
seq 140 | parallel -j4  echo '{}'
seq 10 | xargs -P4 -I'{}' echo '{}'
seq 20 | xargs -P4 -I'{}' echo '{}'
seq 30 | xargs -P4 -I'{}' echo '{}'
seq 40 | xargs -P4 -I'{}' echo '{}'
seq 20 | xargs -P4 -I'{}' echo '{}'
seq 20 | xargs -P8 -I'{}' echo '{}'
seq 20 | xargs -P16 -I'{}' echo '{}'
seq 100 | xargs -P4 -I'{}' echo '{}'
seq 100 | xargs -P8 -I'{}' echo '{}'
seq 30 | xargs -P4 -I'{}' echo '{}'
seq 30 | xargs -P8 -I'{}' echo '{}'
seq 30 | xargs -P16 -I'{}' echo '{}'
seq 100 | xargs -P4 -I'{}' echo '{}'
seq 100 | xargs -P8 -I'{}' echo '{}'
seq 40 | xargs -P4 -I'{}' echo '{}'
seq 100 | xargs -P10 -I'{}' echo '{}'
seq 10 | awk 'NR%2{printf("%s ", $0); next}1'
seq 20 | awk 'NR%5{printf("%s ", $0); next}1'
seq 20 | awk 'NR%5{printf("%s ", $0); next}1'
seq 20 | awk 'NR%10{printf("%s ", $0); next}1'
seq 100 | awk 'NR%10{printf("%s ", $0); next}1'
seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed '5~5G' | awk -v RS='' '{$1=$1; print}'
seq 20 | sed 'N;s/\n/ /'
seq 20 | sed 'N;s/\n/ /'
seq 20 | sed 'N;s/\n/ /'
seq 20 | sed 'N;s/\n/ /'
seq 1 100
seq 1 1000
seq 1 10000
seq 100 200
seq 1000 2000
dig A example.com
dig NS example.com
dig MX example.com
dig TXT example.com
dig CNAME example.com
dig PTR example.com
dig SRV example.com
dig AAAA example.com
dig MX example.com
dig NS example.com
dig SOA example.com
dig TXT example.com
seq -s' ' $start $end
seq -s',' $start $end
seq -s'\n' $start $end
seq -s',' $start $end
seq -s' ' $start $end
seq 10 | xargs echo
seq 20 | xargs echo
seq 30 | xargs echo
seq 40 | xargs echo
seq 50 | xargs echo
seq 60 | xargs echo
seq 70 | xargs echo
seq 80 | xargs echo
seq 90 | xargs echo
seq 100 | xargs echo
seq 200 | xargs echo
seq 300 | xargs echo
seq 400 | xargs echo
seq 1000 | xargs echo
seq 2000 | xargs echo
seq 3000 | xargs echo
seq 4000 | xargs echo
seq 10000 | xargs echo
seq 100 | xargs echo
seq 5 | column -t
host -t a mydomain.com
host -t aaaa mydomain.com
host -t cname mydomain.com
host -t mx mydomain.com
host -t ns mydomain.com
host -t ptr mydomain.com
hostname  -I | awk -F  '{print $2}'
hostname  -I | awk -F  '{print $3}'
hostname  -I | awk -F  '{print $4}'
hostname  -I | awk -F  '{print $5}'
hostname  -I | awk -F  '{print $6}'
hostname  -I | awk -F  '{print $7}'
hostname  -I | awk -F  '{print $8}'
hostname -I | awk '{print $1}'
hostname -f
hostname -i
nslookup
dig
gethostbyaddr
nbtstat -A
arping
traceroute6
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $6}' file1 | sort -u) <(awk '{print $6}' file2 | sort -u)
comm -12 <(awk '{print $7}' file1 | sort -u) <(awk '{print $7}' file2 | sort -u)
comm -12 <(awk '{print $8}' file1 | sort -u) <(awk '{print $8}' file2 | sort -u)
comm -12 <(awk '{print $9}' file1 | sort -u) <(awk '{print $9}' file2 | sort -u)
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $6}' file1 | sort -u) <(awk '{print $6}' file2 | sort -u)
comm -12 <(awk '{print $7}' file1 | sort -u) <(awk '{print $7}' file2 | sort -u)
comm -12 <(awk '{print $8}' file1 | sort -u) <(awk '{print $8}' file2 | sort -u)
comm -12 <(awk '{print $9}' file1 | sort -u) <(awk '{print $9}' file2 | sort -u)
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $6}' file1 | sort -u) <(awk '{print $6}' file2 | sort -u)
comm -12 <(awk '{print $1}' file1 | sort -u) <(awk '{print $1}' file2 | sort -u)
comm -12 <(awk '{print $2}' file1 | sort -u) <(awk '{print $2}' file2 | sort -u)
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
comm -12 <(awk '{print $4}' file1 | sort -u) <(awk '{print $4}' file2 | sort -u)
comm -12 <(awk '{print $5}' file1 | sort -u) <(awk '{print $5}' file2 | sort -u)
comm -12 <(awk '{print $6}' file1 | sort -u) <(awk '{print $6}' file2 | sort -u)
comm -12 <(awk '{print $7}' file1 | sort -u) <(awk '{print $7}' file2 | sort -u)
date --date='3 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='10 days ago' '+%a'
date --date='11 days ago' '+%a'
date --date='12 days ago' '+%a'
date --date='3 days ago' '+%A'
date --date='3 days ago' '+%b'
date --date='3 days ago' '+%B'
date --date='3 days ago' '+%c'
date --date='3 days ago' '+%d'
date --date='3 days ago' '+%e'
date --date='3 days ago' '+%F'
date --date='3 days ago' '+%G'
date --date='3 days ago' '+%g'
date --date='3 days ago' '+%H'
date --date='3 days ago' '+%I'
date --date='3 days ago' '+%j'
date --date='3 days ago' '+%k'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='1 day ago' '+%a'
date --date='4 weeks ago' '+%a'
date --date='3 weeks ago' '+%a'
date --date='2 weeks ago' '+%a'
date --date='1 week ago' '+%a'
date --date='4 months ago' '+%a'
date --date='3 months ago' '+%a'
date --date='2 months ago' '+%a'
date --date='1 month ago' '+%a'
date --date='4 years ago' '+%a'
date --date='3 years ago' '+%a'
date --date='2 years ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='8 days ago' '+%A'
date --date='8 days ago' '+%b'
date --date='8 days ago' '+%B'
date --date='8 days ago' '+%c'
date --date='8 days ago' '+%d'
date --date='8 days ago' '+%e'
date --date='8 days ago' '+%F'
date --date='8 days ago' '+%G'
date --date='8 days ago' '+%g'
date --date='8 days ago' '+%H'
date --date='8 days ago' '+%I'
date --date='8 days ago' '+%j'
date --date='8 days ago' '+%k'
date --date='8 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='10 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
date --date='11 days ago' '+%a'
date --date='10 days ago' '+%a'
date --date='9 days ago' '+%a'
date --date='8 days ago' '+%a'
date --date='7 days ago' '+%a'
date --date='6 days ago' '+%a'
date --date='5 days ago' '+%a'
date --date='4 days ago' '+%a'
date --date='3 days ago' '+%a'
date --date='2 days ago' '+%a'
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|'
git log -10
git log --author="<author>"
git log --committer="<committer>"
git log --since="<date>" --until="<date>"
git log <file>
git log -1
git log -5
git log --author="<user>"
git log -- <file>
git log -n 1 <commit>
git log --repo=<repository>
git log <branch>
git log --author=<user>
git log --date=<date>
git log <commit>
git log --repo=<repo>
head -n 10 $OPTARG
tail -n 10 $OPTARG
grep $OPTARG2 $OPTARG
grep -v $OPTARG2 $OPTARG
grep -i $OPTARG2 $OPTARG
grep -c $OPTARG2 $OPTARG
grep -n $OPTARG2 $OPTARG
date '+%Y' --date='2 days ago'
date '+%Y' --date='3 days ago'
date '+%Y' --date='4 days ago'
date '+%Y' --date='5 days ago'
date '+%Y' --date='6 days ago'
date '+%Y' --date='7 days ago'
date '+%Y' --date='8 days ago'
date '+%Y' --date='9 days ago'
date '+%Y' --date='10 days ago'
date '+%Y' --date='11 days ago'
date '+%Y' --date='12 days ago'
date '+%Y' --date='200 days ago'
date '+%Y' --date='300 days ago'
date '+%Y' --date='400 days ago'
date '+%Y' --date='500 days ago'
date '+%Y' --date='600 days ago'
date '+%Y' --date='700 days ago'
date '+%Y' --date='800 days ago'
date '+%Y' --date='900 days ago'
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr \n ,
pstree
cal 7 2009
cal 8 2009
cal 9 2009
cal 10 2009
pushd .;
pushd /path/to/directory;
swapd;
od -vtx1 /dev/midi10
od -vtx1 /dev/midi11
od -vtx1 /dev/midi12
od -vtx1 /dev/midi13
od -vtx1 /dev/midi14
od -vtx1 /dev/midi15
od -vtx1 /dev/midi16
od -vtx1 /dev/midi17
od -vtx1 /dev/midi18
od -vtx1 /dev/midi19
od -vtx1 /dev/midi20
od -vtx1 /dev/midi21
od -vtx1 /dev/midi22
od -vtx1 /dev/midi23
od -vtx1 /dev/midi24
od -vtx1 /dev/midi25
od -vtx1 /dev/midi26