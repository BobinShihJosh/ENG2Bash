print file contents -> cat file.txt
print with line numbers -> cat -n file.txt
print with $ at end -> cat -E file.txt
combine files -> cat file.txt file2.txt
redirect output to file -> cat file1.txt > file2.txt
append to file -> cat file1.txt >> file2.txt
print file in directory -> cat dir/file.txt
output random characters -> cat /dev/urandom
show non-printing characters -> cat -v file.txt
squeeze blank lines -> cat -s file.txt
display CPU information -> cat /proc/cpuinfo
show buffered output -> cat -u file.txt
show user information -> cat /etc/passwd
show tabs as ^I -> cat -T file.txt
show mounted file systems -> cat /etc/fstab
wildcard for multiple files -> cat file*txt
show tabs and $ -> cat -A file.txt
same as -vE -> cat -e file.txt
number non-blank lines -> cat -b file.txt
discard output -> cat -u file.txt > /dev/null
suppress repeated newlines -> cat -q file.txt
display specified file -> cat -k file.txt
reverse output -> cat -r file.txt
display compressed file -> cat -z file.txt
display word count -> cat -w file.txt
display byte count -> cat -l file.txt
show group information -> cat /etc/group
show symlink information -> cat -H file.txt
interactive mode -> cat -i file.txt
show null characters -> cat -0 file.txt
set tab width to # -> cat -# file.txt
set wrap bytes to # -> cat -y file.txt
show password information -> cat /etc/shadow
show help -> cat -h file.txt
display hexadecimal output -> cat -x file.txt
same as -A except $ -> cat -g file.txt
show system information -> cat /etc/issue
join consecutive lines -> cat -j file.txt
create null file -> cat /dev/null
pipe output to less -> cat -u file.txt | less
same as -vET -> cat -a file.txt
same as -s -> cat -f file.txt
disable output buffering -> cat -U file.txt
number non-blank output -> cat -B file.txt
show operating system information -> cat /etc/os-release
ignore binary files -> cat -I file.txt
same as -vTB -> cat -P file.txt
same as -vTe -> cat -p file.txt
show host information -> cat /etc/hosts
show version information -> cat -V file.txt
redirect byte count -> cat -l file.txt > file2.txt
display selinux context information -> cat -Z file.txt
same as -vT -> cat -G file.txt
same as -vT -> cat -R file.txt
number all lines -> cat -N file.txt
same as -A -> cat -d file.txt
output to file -> cat -o file.txt
display network service information -> cat /etc/services
show octal escapes -> cat -O file.txt
generate null characters -> cat /dev/zero
quote non-printing characters -> cat -Q file.txt
pipe output to grep -> "cat -u file.txt | grep ""example"""
show non-printable characters -> cat -t file.txt
sort output -> cat -S file.txt
same as -y -> cat -W file.txt
show newline count -> cat -L file.txt
output random bytes -> cat /dev/random
"show decimal, octal, and binary escapes" -> cat -cdb file.txt
pipe output to less -> cat -E file.txt | less
show user login information -> cat /etc/login.defs
same as -vET -> cat -a file.txt > file2.txt
pipe unbuffered output to less -> cat -U file.txt | less
same as -b -n -> cat -n -b file.txt
show memory information -> cat /proc/meminfo
show selinux information and same as -A -> cat -Zd file.txt
show PAM configuration information -> cat /etc/pam.d
reverse output and pipe to tr -> cat -r file.txt | tr 'aeiou' 'AEIOU'
show DNS resolver information -> cat /etc/resolv.conf
same as -s and pipe to head -> cat -f file.txt | head -n 10
show Ethernet MAC address -> cat /sys/class/net/eth0/address
same as -vT and pipe to sed -> cat -T file.txt | sed 's/\t/ /g'
number output and pipe to awk -> cat -n file.txt | awk '{print $2}'
show active TTY information -> cat /sys/devices/virtual/tty/tty1/active
same as -s and pipe to tail -> cat -f file.txt | tail -n 5
show system language settings -> cat /etc/locale.conf
show non-printing characters and pipe to sed -> cat -v file.txt | sed 's/^/#/'
same as -t -v -> cat -t -v file.txt
show kernel version information -> cat /proc/version
same as -s and pipe to sed and less -> cat -f file.txt | sed -e 's/word/example/g' | less
show mounted file systems and pipe to grep -> "cat /etc/fstab | grep ""ext4"""
show mounted file systems -> cat /proc/mounts
number output and reverse -> cat -n file.txt | tac
same as -vT -> cat -v -t file.txt
show Apache configuration information -> cat /etc/httpd/conf/httpd.conf
show compressed file and pipe to gunzip -> cat -z file.txt | gunzip
same as -vAE -> cat -v -A file.txt
same as -s and pipe to nl -> cat -f file.txt | nl
show system hostname -> cat /proc/sys/kernel/hostname
show line count -> cat -u file.txt | wc -l
"number output and pipe to sort, reversed numerically" -> cat -n file.txt | sort -rn
Change directory to /home. -> cd /home
Go up one level. -> cd ..
Change directory to Documents. -> cd Documents
Return to the previous directory. -> cd -
Change directory to /usr/share/. -> cd /usr/share/
Change directory to Downloads. -> cd Downloads
Change directory to home directory. -> cd ~
Change directory to /etc/init.d/. -> cd /etc/init.d/
Change directory to Music. -> cd Music
Change directory to /var/log/. -> cd /var/log/
Change directory to Pictures. -> cd Pictures
Go up two levels. -> cd ../../
Change directory to /usr/local/bin. -> cd /usr/local/bin
Change directory to Videos. -> cd Videos
Change directory to /usr/lib/. -> cd /usr/lib/
Change directory to Desktop. -> cd /home/user/Desktop
Change directory to /usr/sbin/. -> cd /usr/sbin/
Change directory to /var/cache. -> cd /var/cache
Change directory to /usr/games/. -> cd /usr/games/
Change directory to /var/run. -> cd /var/run
Change directory to /usr/share/doc/. -> cd /usr/share/doc/
Change directory to /var/spool. -> cd /var/spool
Change directory to linux-headers of current kernel. -> cd /usr/src/linux-headers-$(uname -r)
Change directory to /sys/. -> cd /sys/
Change directory to /var/tmp. -> cd /var/tmp
Change directory to /usr/local/etc. -> cd /usr/local/etc
Change directory to /proc/. -> cd /proc/
Change directory to Downloads inside home directory. -> cd /home/user/Downloads/
Change directory to /usr/share/icons. -> cd /usr/share/icons
Change directory to root directory. -> cd /root/
Change directory to /usr/share/man/. -> cd /usr/share/man/
Change directory to /usr/share/fonts/. -> cd /usr/share/fonts/
Change directory to /var/lib. -> cd /var/lib
Change directory to /usr/local/share. -> cd /usr/local/share
Change directory to /tmp/. -> cd /tmp/
Change directory to /usr/share/gnome. -> cd /usr/share/gnome
Change directory to /var/opt. -> cd /var/opt
Change directory to /usr/include/. -> cd /usr/include/
Change directory to /var/backups. -> cd /var/backups
Change directory to /usr/local/bin/. -> cd /usr/local/bin/
Change directory to /var/crash. -> cd /var/crash
Change directory to /boot/. -> cd /boot/
Change directory to /usr/share/icons/hicolor. -> cd /usr/share/icons/hicolor
Change directory to /opt/. -> cd /opt/
Change directory to /usr/kerberos. -> cd /usr/kerberos
Change directory to /var/mail. -> cd /var/mail
Change directory to /usr/share/X11. -> cd /usr/share/X11
Change directory to log folder of Apache2. -> cd /var/log/apache2
Change directory to /usr/X11R6/. -> cd /usr/X11R6/
Change directory to /var/run/saslauthd/. -> cd /var/run/saslauthd/
Change directory to /usr/share/kde4/. -> cd /usr/share/kde4/
Change directory to /var/spool/mail. -> cd /var/spool/mail
Change directory to /usr/local/games/bin. -> cd /usr/local/games/bin
Change directory to /usr/local/etc/apache2/. -> cd /usr/local/etc/apache2
Change directory to /var/run/screen/. -> cd /var/run/screen/
Change directory to /usr/share/qt4/. -> cd /usr/share/qt4/
Change directory to /var/spool/cron/crontabs. -> cd /var/spool/cron/crontabs
Change directory to /usr/local/lib/. -> cd /usr/local/lib/
Change directory to /var/spool/samba/. -> cd /var/spool/samba/
Change directory to /usr/share/texmf. -> cd /usr/share/texmf
Change directory to /var/spool/squid/. -> cd /var/spool/squid/
Change directory to /usr/local/src/. -> cd /usr/local/src/
Change directory to /var/spool/exim4/. -> cd /var/spool/exim4/
Change directory to /usr/share/vim/. -> cd /usr/share/vim/
Change directory to /var/spool/mqueue. -> cd /var/spool/mqueue
Change directory to /usr/lib64/. -> cd /usr/lib64/
Change directory to /var/tmp/kdecache-user/. -> cd /var/tmp/kdecache-user/
Change directory to /usr/share/man/man1/. -> cd /usr/share/man/man1/
Change directory to /var/lib/bind/. -> cd /var/lib/bind/
Change directory to /usr/local/mysql/bin/. -> cd /usr/local/mysql/bin/
Change directory to /var/lib/etckeeper/. -> cd /var/lib/etckeeper/
Change directory to /usr/share/doc/HTML/en/. -> cd /usr/share/doc/HTML/en/
Change directory to /var/log/cups/. -> cd /var/log/cups/
Change directory to /usr/local/nagios/bin/. -> cd /usr/local/nagios/bin/
Change directory to /var/lib/mysql/. -> cd /var/lib/mysql/
Change directory to /usr/share/doc/git-core/api/. -> cd /usr/share/doc/git-core/api/
Change directory to /var/log/squid/. -> cd /var/log/squid/
Change directory to /usr/local/rvm/. -> cd /usr/local/rvm/
Change directory to /var/lib/samba/. -> cd /var/lib/samba/
Change directory to /usr/share/polkit-1/. -> cd /usr/share/polkit-1/
Change directory to /var/lib/nfs/. -> cd /var/lib/nfs/
Change directory to /usr/lib/i386-linux-gnu/. -> cd /usr/lib/i386-linux-gnu/
Change directory to /var/log/exim4/. -> cd /var/log/exim4/
Change directory to /usr/share/doc/libssl-doc/. -> cd /usr/share/doc/libssl-doc/
Change directory to /var/lib/hsqldb/. -> cd /var/lib/hsqldb/
Change directory to /usr/share/doc/binutils/. -> cd /usr/share/doc/binutils/
Change directory to /var/cache/fontconfig/. -> cd /var/cache/fontconfig/
Change directory to /usr/local/apache2/bin/. -> cd /usr/local/apache2/bin/
Change directory to /var/lib/amavis/. -> cd /var/lib/amavis/
Change directory to /usr/share/doc/coreutils/. -> cd /usr/share/doc/coreutils/
Change directory to /var/log/proftpd/. -> cd /var/log/proftpd/
Change directory to /usr/local/var/. -> cd /usr/local/var/
Change directory to /var/run/nscd/. -> cd /var/run/nscd/
Change directory to /usr/share/doc/prelink/. -> cd /usr/share/doc/prelink/
Change directory to /var/log/apache2/. -> cd /var/log/apache2/
Change directory to /usr/local/var/db/. -> cd /usr/local/var/db/
Change directory to /var/lock/. -> cd /var/lock/
Change directory to /usr/share/doc/libc6/. -> cd /usr/share/doc/libc6/
Change directory to /var/spool/postfix/. -> cd /var/spool/postfix/
Change directory to /usr/share/doc/libpq5/. -> cd /usr/share/doc/libpq5/
Give everyone full access to file.txt. -> chmod 777 file.txt
"Give the owner read and execute permissions, and others read-only permissions to directory/." -> chmod 554 directory/
Give the owner read and write permissions to file.pdf. -> chmod 600 file.pdf
"Give the owner read, write, and execute permissions to file.png." -> chmod u+rwx file.png
Remove execute permissions for all users from directory/. -> chmod a-x directory/
Remove read permission for others from file.txt. -> chmod o-r file.txt
Give the group write permission to directory/. -> chmod g+w directory/
"Give the owner read and write permissions, and others read-only permissions to file.pdf." -> chmod 644 file.pdf
Give everyone full access to dir1/ and dir2/. -> chmod 777 dir1/ dir2/
Give the owner read-only permission to file.txt. -> chmod 400 file.txt
Give the owner execute permission to dir1/. -> chmod u+x dir1/
Give read permission to all users to file.png. -> chmod a+r file.png
"Give the owner read, write, and execute permissions, and others read and execute permissions to directory/." -> chmod 755 directory/
Give write permission to others to file.txt. -> chmod o+w file.txt
"Give the group read, write, and execute permissions to file.png." -> chmod g=rwx file.png
Give everyone read-only permission to file.txt. -> chmod 444 file.txt
Give everyone full access to dir/ and all of its contents recursively. -> chmod 777 dir/ -R
"Verbosely give the owner read and write permissions, and others read-only permissions to file.pdf." -> chmod 644 file.pdf -v
Verbosely give the owner read-only permission to file.txt. -> chmod 400 file.txt -c
Verbosely remove write and execute permissions for all users from file.png. -> chmod a-wx file.png -v
Add execute permission for the script.sh script to the current user. -> chmod +x script.sh
Remove read permission for the current user from dir/. -> chmod -r dir/
Remove execute permission for others from file.txt. -> chmod o-x file.txt
"Remove read, write, and execute permissions for the group from file.png." -> chmod g-rwx file.png
Give everyone full access and change the owner and group for dir/. -> chmod 777 dir/ && chown user:group dir/
"Give the owner read, write, and execute permissions, and others read and execute permissions to file.txt." -> "chmod u=rwx,go=rx file.txt"
Give the owner read-only permission and change the owner for file.txt. -> chmod 400 file.txt && chown user file.txt
Give the group read permission and change the group for file.png. -> chmod g+r file.png && chgrp group file.png
"Remove read, write, and execute permissions for others, and change the owner and group for file.txt." -> chmod o-rwx file.txt && chown user:group file.txt
"Give the owner read and write permissions, and others read-only permissions, and make file.pdf immutable." -> chmod 644 file.pdf && chattr +i file.pdf
Give everyone full access and change the security context for dir/. -> chmod 777 dir/ && chcon user:object_r:file_t dir/
Give the owner read-only permission and change the root directory for /bin/bash. -> chmod 400 file.txt && chroot /jail/ /bin/bash
"Give the owner read, write, and execute permissions, and others read and execute permissions to directory/, and change the root directory for /bin/bash." -> chmod 755 directory/ && chroot /jail/ /bin/bash
Give everyone full access and set an access control list for dir/. -> chmod 777 dir/ && setfacl -m u:user:rwx dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and set an access control list for file.pdf." -> chmod 644 file.pdf && setfacl -m g:group:rx file.pdf
Give everyone full access and set capabilities for /sbin/ping. -> chmod 777 dir/ && setcap CAP_NET_RAW+ep /sbin/ping
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and set compression for file.pdf." -> chmod 644 file.pdf && setcomp --user-download file.pdf
Give everyone full access and set extended attributes for dir/. -> "chmod 777 dir/ && setfattr -n user.comment -v ""sample comment"" dir/"
"Give the owner read, write, and execute permissions, and others read-only permission to script.sh, and run script.sh as root." -> "chmod 744 script.sh && su -c ""./script.sh"""
"Give the owner read-only permission to file.txt, and open file.txt using vim editor with root privileges." -> chmod 400 file.txt && sudo vi file.txt
"Give the owner read and write permissions to file.pem, and connect to host using ssh with file.pem as the identity file." -> chmod 600 file.pem && ssh -i file.pem user@host
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and copy file.pdf to /directory/ on host using scp." -> chmod 644 file.pdf && scp file.pdf user@host:/directory/
Give everyone full access and create a compressed tar archive of dir/. -> chmod 777 dir/ && tar -cvzf archive.tar.gz dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and extract file.zip." -> chmod 644 file.pdf && unzip file.zip
"Give the owner read-only permission to key.pem, and generate a new certificate request using key.pem." -> chmod 400 key.pem && openssl req -new -key key.pem
"Give the owner read and write permissions to config.yml, and run playbook.yml using ansible." -> chmod 600 config.yml && ansible-playbook playbook.yml
"Give the owner read, write, and execute permissions, and others read and execute permissions to script.sh, and execute script.sh using bash." -> chmod 755 script.sh && bash script.sh
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and search for search string within file.pdf using grep." -> "chmod 644 file.pdf && cat file.pdf | grep ""search string"""
"Give the owner read-only permissions to file.txt, and make a copy of file.txt to /backup/." -> chmod 400 file.txt && cp file.txt /backup/
"Give everyone full access, and create a 1MB test file named file.bin in dir/ using dd." -> chmod 777 dir/ && dd if=/dev/zero of=file.bin count=1024
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and show the difference between file.pdf and file2.pdf using diff." -> chmod 644 file.pdf && diff file.pdf file2.pdf
"Give the owner read, write, and execute permissions to dir/, and find files or directories within dir/ that match pattern." -> "chmod 700 dir/ && find dir/ -name ""pattern"""
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and display information about user using finger." -> chmod 644 file.pdf && finger user
"Give everyone full access to dir/, and search for pattern in all files within dir/ using grep." -> "chmod 777 dir/ && grep ""pattern"" dir/*"
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and display the first 10 lines of file.pdf using head." -> chmod 644 file.pdf && head file.pdf
"Give the owner read-only permission to file.txt, and display the command history using history." -> chmod 400 file.txt && history
"Give the owner read, write, and execute permissions, and others read and execute permissions to script.sh, and kill all running instances of script.sh using killall." -> chmod 755 script.sh && killall script.sh
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and create a symbolic link named file2.pdf that points to file.pdf using ln." -> chmod 644 file.pdf && ln -s file.pdf file2.pdf
"Give the owner read, write, and execute permissions to dir/, and list the contents of dir/ using ls." -> chmod 700 dir/ && ls dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and calculate and show the MD5 sum of file.pdf using md5sum." -> chmod 644 file.pdf && md5sum file.pdf
"Give the owner read-only permission to file.txt, and create a new directory named dir/." -> chmod 400 file.txt && mkdir dir/
"Give everyone full access to dir/, and move file.pdf to dir/." -> chmod 777 dir/ && mv file.pdf dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and open file.pdf using nano editor." -> chmod 644 file.pdf && nano file.pdf
"Give everyone full access to dir/, and listen for connections on port 8080 and send file.pdf as output using nc." -> chmod 777 dir/ && nc -l 8080 < file.pdf
"Give the owner read and write permissions to file.pem, and sign a certificate request using file.pem." -> chmod 600 file.pem && openssl x509 -req -days 365 -in cert.csr -signkey file.pem -out cert.crt
"Give the owner read, write, and execute permissions to dir/, and change the password for the current user using passwd." -> chmod 700 dir/ && passwd
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and send 5 ICMP echo requests to host using ping." -> chmod 644 file.pdf && ping -c 5 host
"Give the owner read-only permission to file.txt, and display a list of running processes using ps." -> chmod 400 file.txt && ps aux
"Give everyone full access to dir/, and show the current working directory using pwd." -> chmod 777 dir/ && pwd
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and delete file.pdf." -> chmod 644 file.pdf && rm file.pdf
"Give the owner read-only permission to file.txt, and replace all instances of search with replace in file.txt using sed." -> chmod 400 file.txt && sed 's/search/replace/g' file.txt
"Give the owner read and write permissions to file.key, and generate a new 4096-bit RSA key using ssh-keygen." -> chmod 600 file.key && ssh-keygen -t rsa -b 4096 -f file.key
"Give everyone full access to dir/, and extract a tar archive named archive.tar to dir/ using tar." -> chmod 777 dir/ && tar -xvf archive.tar
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and show the contents of file.zip using unzip." -> chmod 644 file.pdf && unzip -l file.zip
"Give the owner read-only permission to file.pem, and download a file from URL using wget with file.pem as the SSL client certificate file." -> chmod 400 file.pem && wget --certificate=file.pem URL
"Give everyone full access to dir/, and read a list of file names from dir/files.txt and delete each file using xargs and rm." -> chmod 777 dir/ && xargs rm < dir/files.txt
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and create a zip archive named file.zip that contains file.pdf using zip." -> chmod 644 file.pdf && zip file.zip file.pdf
"Give everyone full access to dir/, and generate a random 32-character length password and save it to dir/password.txt using cat, tr, fold, and head commands." -> chmod 777 dir/ && cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 > dir/password.txt
"Give the owner read-only permission to file.txt, and make a backup copy of file.txt to /tmp/." -> chmod 400 file.txt && cp file.txt /tmp/file.txt.backup
"Give everyone full access to dir/, and create a 1GB file system image named file.img, format it with ext4 file system, and mount it to dir/." -> chmod 777 dir/ && dd if=/dev/zero of=file.img bs=1M count=1024 && mkfs.ext4 file.img && mount file.img dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and write Hello, World! to file.pdf using echo." -> "chmod 644 file.pdf && echo ""Hello, World!"" > file.pdf"
"Give the owner read, write, and execute permissions to dir/ and display properties of all files in the current directory using file command." -> chmod 700 dir/ && file *
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and display the groups to which the current user belongs." -> chmod 644 file.pdf && groups
"Give everyone full access to dir/, and reboot the system using init." -> chmod 777 dir/ && init 6
"Give the owner read-only permission to file.txt, and display the last logged in users using last." -> chmod 400 file.txt && last
"Give everyone full access to dir/, and display the list of files and processes that are accessing dir/ using lsof and grep commands." -> chmod 777 dir/ && lsof | grep dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and display the manual page for ls using man." -> chmod 644 file.pdf && man ls
"Give the owner read, write, and execute permissions to dir/, and mount the /dev/sdb1 hard drive partition to dir/." -> chmod 700 dir/ && mount /dev/sdb1 dir/
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and perform a TCP SYN scan on host using nmap." -> chmod 644 file.pdf && nmap -sS host
"Give the owner read-only permission to file.txt, and encrypt file.txt using AES-256 with key stored in file:key.txt using openssl." -> chmod 400 file.txt && openssl aes-256-cbc -salt -in file.txt -out file.txt.enc -pass file:key.txt
"Give everyone full access to dir/, and display the process ID of the running process named process using pidof." -> chmod 777 dir/ && pidof process
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and remove the empty directory named dir/." -> chmod 644 file.pdf && rmdir dir/
"Give the owner read-only permission to file.pem, and mount the /remote/dir/ directory on host to /local/dir/ on the local machine using sshfs." -> chmod 400 file.pem && sshfs -o IdentityFile=file.pem user@host:/remote/dir/ /local/dir/
"Give everyone full access to dir/, and start a new screen session named session." -> chmod 777 dir/ && screen -S session
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and split file.pdf into 1MB sized parts named part00, part01, etc. using split command." -> chmod 644 file.pdf && split -b 1M -d file.pdf part
"Give the owner read-only permission to file.txt, and display the last 10 lines of file.txt and continue to follow the file as it is updated using tail command." -> chmod 400 file.txt && tail -f file.txt
"Give everyone full access to dir/, and capture network traffic on interface eth0 and write it to dir/capture.pcap using tcpdump." -> chmod 777 dir/ && tcpdump -i eth0 -w dir/capture.pcap
"Give the owner read and write permissions, and others read-only permissions to file.pdf, and change the modification date of file.pdf to 3 days ago and display the file information using touch and ls commands." -> "chmod 644 file.pdf && touch -d ""3 days ago"" file.pdf && ls -l file.pdf"
"Give the owner read, write, and execute permissions to dir/, and unmount the file system mounted on dir/." -> chmod 700 dir/ && umount dir/
"Give everyone full access to dir/, and display the hexadecimal dump of file.pdf using xxd command." -> chmod 777 dir/ && xxd file.pdf
clears screen -> clear
clears contents of file1 -> clear file1
clears contents of folder1 and file1 -> clear folder1 file1
clears scrollback buffer -> clear -x
prints version information -> clear -V
clears contents of mydir -> clear mydir
clears contents of all files in mydir -> clear mydir/*
does not clear screen -> clear -n
clears contents of file1 and scrollback buffer -> clear -x file1
clears contents of mydir/file1 -> clear mydir/file1
does not clear screen or show message -> clear -q
sets timeout to 3 seconds -> clear -T 3
shows help message -> clear --help
prints number of lines in screen -> clear -l
tries to clear screen with termcap/terminfo -> clear -Z
clears contents of all files in folder1 and folder2 -> clear folder1/* folder2/*
shows help message -> clear -h
clears screen and scrollback buffer -> clear -f -x
clears contents of all text files in mydir -> clear mydir/*.txt
clears scrollback buffer and does not clear screen -> clear -x -n
sets timeout to 5 seconds -> clear -t 5
clears contents of all files starting with 'file' -> clear file*
clears contents of all files starting with 'file' in mydir -> clear mydir/file*
does not clear screen or show message -> clear -q -n
clears contents of all files in folder in mydir -> clear mydir/folder/*
clears screen while retaining current background color -> clear -E
shows terminal type -> clear -T
clears contents of all folders and files starting with 'folder' and 'file' -> clear folder* file*
clears contents of file1 and scrollback buffer -> clear -x -f file1
shows timeout value -> clear -t
clears contents of all files in folder1 and folder2 in mydir -> clear mydir/folder1/* mydir/folder2/*
prints version information and does not clear screen or show message -> clear -V -q
clears screen while retaining current background color and scrollback buffer -> clear -E -x
sets terminal type to xterm-256color -> clear -T xterm-256color
does not clear contents of root directory -> clear /
clears contents of all files in all nested directories in mydir -> clear mydir/*/*
clears scrollback buffer and does not clear screen or prompt for confirmation -> clear -x -n -f
clears contents of all files with one character after 'file' -> clear file?
"does not clear screen or show message, prints number of lines in screen" -> clear -q -l
clears contents of all folders and files starting with 'folder' and 'file' with one character after them -> clear folder? folder* file?
sets timeout to 10 seconds -> clear -t 10
clears scrollback buffer and sets timeout to 5 seconds -> clear -x -t 5
sets terminal type to vt100 -> clear -T vt100
clears contents of all files in folder2 in folder1 in mydir -> clear mydir/folder1/folder2/*
clears screen while retaining current background color and does not clear screen -> clear -E -n
clears contents of all files with numbers 1 to 10 after 'file' -> clear file{1..10}
prints number of lines in screen and clears scrollback buffer -> clear -l -x
prints version information -> clear --version
tries to clear screen with termcap/terminfo and clears scrollback buffer -> clear -Z -x
clears contents of all files starting with 'file' in all folders starting with 'folder' in mydir -> clear mydir/folder*/file*
clears screen and contents of all files starting with 'file' -> clear -f file*
sets timeout to infinity -> clear -t -1
clears contents of all files not starting with 'file1' -> clear file!(1)
"clears scrollback buffer and does not clear screen or show message, prints number of lines in screen" -> clear -x -n -l
clears contents of /dev/null -> clear /dev/null
clears screen while retaining current background color and does not clear screen or show message -> clear -E -q
clears contents of all files in folder1 and folder2 in mydir -> "clear mydir/{folder1, folder2}/*"
sets timeout to 0 seconds -> clear -t 0
clears contents of all files not with one character after 'file' -> clear file!(?)
clears screen and contents of all folders starting with 'folder' -> clear -f folder*
"does not clear screen or prompt for confirmation, prints number of lines in screen and clears scrollback buffer" -> clear -n -l -x
does not clear contents of /dev/urandom -> clear /dev/urandom
clears contents of all text and doc files in mydir -> "clear mydir/*.{txt,doc}"
sets terminal type to ansi -> clear -T ansi
tries to clear screen with termcap/terminfo and does not clear screen or show message -> clear -q -Z
clears contents of all files starting with 'file' in all nested directories in mydir -> clear mydir/**/file*
sets timeout to -5 seconds -> clear -t -5
clears contents of all files not with any characters after 'file' -> clear file!(*)
clears contents of all text and doc files in mydir and all files in folder in mydir -> "clear mydir/*.{txt,doc} mydir/folder/*"
clears screen and contents of file1 and file2 -> clear -f file1 file2
clears scrollback buffer and does not clear screen or show message -> clear -q -x
sets terminal type to ansi-m -> clear -T ansi-m
clears contents of all files starting with 'file' in all doubly-nested directories in mydir -> clear mydir/**/**/file*
clears contents of all files with one non-newline character after 'file' -> clear file*(?)
"clears scrollback buffer and prints number of lines in screen, does not clear screen" -> clear -x -l -n
clears contents of /dev/zero -> clear /dev/zero
clears contents of all files in all folders starting with 'folder' in mydir -> clear mydir/folder*/*
clears screen and contents of all files starting with 'file' and all folders starting with 'folder' -> clear -f file* folder*
"tries to clear screen with termcap/terminfo and clears scrollback buffer, does not clear screen or show message" -> clear -q -Z -x
sets terminal type to linux -> clear -T linux
clears contents of all files with any non-newline characters after 'file' -> clear file*(*)
"prints number of lines in screen and does not clear screen or prompt for confirmation, clears scrollback buffer" -> clear -l -n -x
does not clear contents of /dev/tty1 -> clear /dev/tty1
clears contents of all files in folder1 and folder2 in mydir with the same filename -> "clear mydir/{folder1/*,folder2/*}"
clears screen and contents of all folders starting with 'folder' and all files starting with 'file' -> clear -f folder*/ file*
tries to clear screen with termcap/terminfo and prints number of lines in screen -> clear -l -Z
clears contents of all files in folder in all nested directories in mydir -> clear mydir/**/folder/*
clears contents of all files starting with 'file' with any number of characters after them -> clear file**
sets terminal type to xterm-r5 -> clear -T xterm-r5
"clears scrollback buffer and does not clear screen or prompt for confirmation, prints number of lines in screen and clears contents of all files" -> clear -x -n -l -f
clears contents of /dev/full -> clear /dev/full
clears contents of all files in folder2 in folder1 and all files in folder3 in mydir with the same filename -> "clear mydir/{folder1/folder2/*,folder3/*}"
clears screen and contents of all files starting with 'file' and scrollback buffer -> clear -f file* -x
"does not clear screen or prompt for confirmation, sets timeout to 5 seconds" -> clear -n -t 5
clears contents of all folders starting with 'folder' and ending with 1 or 2 in mydir -> clear mydir/folder*[12]
"tries to clear screen with termcap/terminfo and does not clear screen or show message, does not prompt for confirmation" -> clear -q -Z -n
sets terminal type to dumb -> clear -T dumb
does not clear contents of /dev/pts/0 -> clear /dev/pts/0
clears contents of all files ending with 2 in all nested directories in mydir -> clear mydir/**/*2
"clears screen and scrollback buffer, does not clear screen or show message, clears contents of all folders starting with 'folder'" -> clear -x -q -f folder*
copies file1 to file2 -> cp file1.txt file2.txt
copies dir1 to dir2 recursively -> cp -r dir1 dir2
copies file1 to file2 and shows verbose output -> cp -v file1.txt file2.txt
copies file1 to file2 and prompts before overwriting -> cp -i file1.txt file2.txt
copies file1 to file2 only if it's newer -> cp -u file1.txt file2.txt
copies file1 to file2 and creates hard link -> cp -l file1.txt file2.txt
copies file1 to file2 and preserves file attributes -> cp -p file1.txt file2.txt
copies file1 to file2 and overwrites file2 if exists -> cp -f file1.txt file2.txt
copies file1 to file2 if file2 does not exist -> cp -n file1.txt file2.txt
copies file1 to /home/user1 -> cp file1.txt /home/user1
copies file1 to dir1/ -> cp file1.txt dir1/
copies all files that start with file and ends with .txt to dir/ -> cp file*.txt dir/
copies dir to dir2 preserving all attributes and recursively -> cp -a dir/ dir2/
copies dir to dir2 and prompts before overwriting -> cp -i dir/ dir2/
copies dir1 to dir2/backup recursively -> cp -r dir1 dir2/backup/
copies dir1 to dir2/backup and shows verbose output -> cp -v dir1 dir2/backup/
copies dir1 to dir2/backup only if it's newer -> cp -u dir1 dir2/backup/
copies dir1 to dir2/backup and creates hard link -> cp -l dir1 dir2/backup/
copies dir1 to dir2/backup and preserves file attributes -> cp -p dir1 dir2/backup/
copies dir1 to dir2/backup and overwrites if exists -> cp -f dir1 dir2/backup/
copies dir1 to dir2/backup if it doesn't exist -> cp -n dir1 dir2/backup/
copy dir1 to /mnt/backup preserving all attributes -> cp -a dir1/ /mnt/backup/
copies dir1 to dir2/backup and shows verbose & recursive output -> cp -avr dir1/ dir2/backup/
copies all files in dir1/ to file.txt if it's newer -> cp -u dir1/ file.txt
copies all files with .txt extension and overwrites if exists -> cp -f *.txt dir/
copies all files with .txt extension to dir/backup if it doesn't exist -> cp -n *.txt dir/backup/
copies all files and directories in dir1 to dir2/backup -> cp -r dir1/* dir2/backup/
copies all files that start with file and ends with .txt to dir/ and shows verbose output -> cp -v file*.txt dir/
copies dir1 to dir2/backup and preserves attributes recursively -> cp -p -R dir1/ dir2/backup/
copies all files that start with file and ends with .txt to dir/backup/ -> cp file*.txt dir/backup/
copies all files and directories in dir1 to dir2/backup and overwrites if exists -> cp -f -r dir1/* dir2/backup/
copies dir1 to dir2/backup and preserves attributes and recursively -> cp -pr dir1/ dir2/backup/
copies file1 to backup/ directory as file1.txt -> cp file1.txt backup/file1.txt
copies all files with .txt extension to backup/ directory -> cp *.txt backup/
copies dir to /mnt/backup/ preserving attributes -> cp -a dir /mnt/backup/
copies file1 to /mnt/backup directory as file2.txt -> cp file1.txt /mnt/backup/file2.txt
copies dir1 to dir2/backup and overwrites if exists -> cp -f dir1/ dir2/backup/
copies dir1 to dir2 only if it's newer -> cp -ur dir1/ dir2
copies dir1 to dir2 and preserves attributes recursively -> cp -p -R dir1/ dir2
copies dir1 to dir2 and prompts before overwriting recursively -> cp -i -r dir1/ dir2
copies dir1 to dir2 only if it's newer recursively -> cp -u -r dir1/ dir2
copies dir1 to dir2 and creates hard link recursively -> cp -l -r dir1/ dir2
copies dir1 to dir2 and shows verbose output recursively -> cp -v -r dir1/ dir2
copies dir1 to dir2 and preserves attributes recursively -> cp -a -r dir1/ dir2
copies dir1 to dir2/backup and doesn't preserve timestamp recursively -> cp -pn -R dir1/ dir2/backup/
copies all files and directories to dir2/ recursively -> cp -dfR dir1/. dir2/
copies /mnt/data/ to /mnt/backup/ preserving attributes and doesn't copy if exists -> cp -an /mnt/data/ /mnt/backup/
copies dir1 to dir2/backup recursively -> cp -r dir1/ dir2/backup/
copies all files with .txt extension to dir2/ -> cp *.txt dir2/
copies file1 to dir1/ directory as file1.txt -> cp file1.txt dir1/file1.txt
copies all files and directories in dir1 to dir2/backup/ -> cp -r dir1/* dir2/backup/
copies dir1 to dir2/backup/ only if it's newer recursively -> cp -u -R dir1/ dir2/backup/
copies dir to /mnt/backup/ preserving attributes and permissions recursively -> cp -rp dir/ /mnt/backup/
copies file1 to file2 and prompts before overwriting and preserves file attributes -> cp -i -p file1.txt file2.txt
copies file1 to file2 and overwrites existing file2 and preserves file attributes -> cp -f -p file1.txt file2.txt
copies file1 to file2 only if it's newer and preserves file attributes -> cp -u -p file1.txt file2.txt
copies file1 to file2 and shows verbose output and preserves file attributes -> cp -v -p file1.txt file2.txt
copies file1 to file2 and creates hard link and preserves file attributes -> cp -l -p file1.txt file2.txt
"copies dir1 to dir2/backup/ preserving attributes and recursively, and preserves file attributes" -> cp -a -p dir1/ dir2/backup/
copies file.txt to /mnt/backup/ and creates missing directories -> cp -d file.txt /mnt/backup/
copies dir1 to dir2/backup/ preserving file attributes and recursively -> cp -p -r dir1/ dir2/backup/
copies all files in dir1/ to dir2/backup/ if it's newer and show verbose output -> cp -uv dir1/* dir2/backup/
copies dir1 to dir2/backup preserving attributes and recursively -> cp -R -p dir1/ dir2/backup/
copies dir1 to dir2/backup/ only if it's newer and preserves file attributes recursively -> cp -R -u -p dir1/ dir2/backup/
copies /mnt/data/ to /mnt/backup/ preserving attributes and recursively -> cp -a /mnt/data/ /mnt/backup/
copies all files with .txt extension to backup/ and shows verbose output recursively -> cp -v -r *.txt backup/
copies file1.txt to backup/ directory -> cp file1.txt backup/
copies dir1/ to dir2/ preserving attributes and permissions recursively -> cp -rp dir1/ dir2/
copies file1.txt to dir1/ and preserves file attributes -> cp -p file1.txt dir1/
copies file1.txt to file2.txt as hard link -> cp -l file1.txt file2.txt
copies file1.txt to dir1/ and prompts before overwriting -> cp -ni file1.txt dir1/
copies file1.txt to backup/ only if it's newer and preserves file attributes -> cp -u -p file1.txt backup/
copies dir1 to dir2/ and overwrites if exists -> cp -rf dir1 dir2/
copies dir1 to dir2/backup/ and preserves mode and timestamp attributes recursively -> "cp -r --preserve=mode,timestamp dir1/ dir2/backup/"
copies dir1 to dir2/backup/ only if it's newer and preserves file attributes recursively -> cp -p -u -R dir1/ dir2/backup/
copies file1.txt to file2.txt as hard link and shows verbose output -> cp -v -rl file1.txt file2.txt
copies /mnt/data/ to /mnt/backup/ preserving attributes and recursively and shows verbose output -> cp -a -v /mnt/data/ /mnt/backup/
copies dir1 to dir2/backup/ preserving file attributes and recursively and shows verbose output -> cp -v -R -p dir1/ dir2/backup/
copies /mnt/data/ to /mnt/backup/ preserving attributes and doesn't overwrite if exists -> cp -na /mnt/data/ /mnt/backup/
copies dir1/ to dir2/backup/ only if it's newer and preserves file attributes and shows verbose output -> cp -p -u -v dir1/ dir2/backup/
copies dir1/ to dir2/backup/ only if it's newer and preserves file attributes recursively and shows verbose output -> cp -u -R -p -v dir1/ dir2/backup/
copies dir1/ to dir2/backup/ only if it's newer and preserves file attributes recursively and shows verbose output -> cp -v -R -p -u dir1/ dir2/backup/
copies file1 to file2 if file2 doesn't exist and shows verbose output -> cp -v -n file1.txt file2.txt
copies file1 to file2 and overwrites if exists and shows verbose output -> cp -v -f file1.txt file2.txt
copies dir1 to dir2/backup/ and overwrites if exists and preserves file attributes recursively -> cp -R -f -p dir1/ dir2/backup/
copies file1 to file2 only if file2 is missing or it's newer -> cp -su file1.txt file2.txt
copies dir1 to dir2/backup/ and overwrites if exists and preserves file attributes recursively -> cp -p -f -r dir1/ dir2/backup/
copies dir1 to dir2/backup/ and creates missing directories and preserves attributes recursively -> cp -dR dir1/ dir2/backup/
copies dir1 to dir2/backup/file1.txt and overwrites if exists -> cp -rf dir1/ dir2/backup/file1.txt
copies dir1 to dir2/backup/ and preserves file attributes and shows verbose output recursively -> cp -v -p -R dir1/ dir2/backup/
copies dir1 to dir2/backup/ if it doesn't exist recursively -> cp -n -R dir1 dir2/backup/
copies dir1/ to dir2/backup/ only if it's newer and preserves file attributes and shows verbose output recursively -> cp -v -p -u -R dir1/ dir2/backup/
copies dir1/ to dir2/backup/ and overwrites if exists and preserves file attributes and shows verbose output recursively -> cp -v -p -f -R dir1/ dir2/backup/
copies dir1/ to dir2/backup/ and overwrites if exists and preserves file attributes and shows verbose output recursively -> cp -p -f -v -R dir1/ dir2/backup/
copies file1 to file2 and answers yes to all prompts -> cp --reply=yes file1.txt file2.txt
copies /mnt/data/ to /mnt/backup/ only if it's newer and preserves file attributes and shows verbose output recursively -> cp -p -u -v -R /mnt/data/ /mnt/backup/
copies dir1/ to dir2/backup/ only if it's newer and overwrites if exists and preserves file attributes and shows verbose output recursively -> cp -v -R -p -f -u dir1/ dir2/backup/
copies file1 to file2 preserving all file attributes -> cp --preserve=all file1.txt file2.txt
copies dir1/ to dir2/backup/ only if it's newer and overwrites if exists and preserves file attributes and shows verbose output recursively -> cp -v -p -u -f -R dir1/ dir2/backup/
copies dir1/ to dir2/backup/ and overwrites if exists and preserves file attributes and shows verbose output recursively -> cp -p -f -R -v dir1/ dir2/backup/
List files in current directory -> ls
List including hidden files -> ls -a
List in long format -> ls -l
List files by time modified -> ls -t
List files by size -> ls -S
List recursively -> ls -R
List in one column -> ls -1
List root directory contents -> ls /
List contents of /home directory -> ls /home
List long format for /etc directory -> ls -l /etc
List all .txt files one level down -> ls */*.txt
List in human-readable format -> ls -lh
List files with color coding -> ls --color
List recursively in reverse order -> ls -lr
List files by time modified in reverse order -> ls -ltr
List files by size in long format -> ls -lS
List including hidden files in /usr directory -> ls -a /usr
List directories only -> ls -d */
List long format for /var/log directory -> ls -ld /var/log
List file inode number -> ls -i
List files by creation time -> ls -U
List in human-readable format for /home/user1 directory -> ls -lh /home/user1
List all .txt files in current directory using grep -> "ls -a | grep "".txt"""
List files by time modified and access time -> ls -lat
List long format for /home/user2/Desktop directory -> ls -l /home/user2/Desktop
List long format for /tmp directory with pagination using less -> ls -l /tmp | less
List recursively including hidden files -> ls -aR
List files by size in long format in /var/www directory -> ls -lS /var/www
List long format for ~/.ssh directory -> ls -l ~/.ssh
List all files in /etc directory excluding folders -> "ls -a /etc | grep -v ""^d"""
List files with full timestamps -> ls --full-time
List files in /usr/local/bin directory excluding .sh files -> ls /usr/local/bin -I '*.sh'
List files in reverse order -> ls -r
List in human-readable format recursively -> ls -lhR
List in long format including hidden files -> ls -a -l
List in one column for /var/log directory -> ls -1 /var/log
List all .txt files in /home/user1 directory -> ls /home/user1/*.txt
List recursively in /usr/local directory -> ls -R /usr/local
List files by time modified and access time in reverse order -> ls -latr
List files by time modified in long format for /var/log directory -> ls -lt /var/log
List long format for /mnt/cdrom directory -> ls -l /mnt/cdrom
List including hidden files in /usr/bin directory -> ls -a /usr/bin
List files by size in long format in human-readable format -> ls -lSrh
List files by size in long human-readable format for current directory -> ls -lhS
List including hidden files in long format for /etc directory with pagination using less -> ls -la /etc | less
List long format for /etc/passwd and /etc/group files -> ls -l /etc/passwd /etc/group
List root directories only -> ls -d /*
List last 10 lines of long format for /var/log directory -> ls -l /var/log | tail -n 10
List files with authors -> ls --author
List long format for /home/user1 and /home/user2 directories -> ls -l /home/user1 /home/user2
List including hidden files in long format -> ls -al
List long format with ISO-style timestamps -> ls -l --time-style=long-iso
List with / at the end of directories -> ls -lp
List long format for /etc/passwd file -> ls -l /etc/passwd
List files by size in long format for /tmp directory -> ls -lS /tmp
List directories starting with /etc/grub -> ls -d /etc/grub*
List files with size in KB -> ls --block-size=KB
List files in long format by time modified in reverse order -> ls -l -t -r
List including hidden files with inode number and device number -> ls -hid
List long format for /var/spool/mail directory -> ls -l /var/spool/mail
List /usr/bin directory contents with executable files only -> "ls -p /usr/bin | grep -v ""/$"""
List files sorted by size -> ls --sort=size
List in one column in human-readable format -> ls -1h
List including hidden files by time modified -> ls -a -t
List with version control -> ls --version-control
List long format with full ISO-style timestamp -> ls -l --time-style=full-iso
List long format for /dev/null file -> ls -l /dev/null
List with 50 character width -> ls -w 50
Count number of files in /home/user1 directory -> ls /home/user1 | wc -l
List files by size in reverse order -> ls -rS
List long format including hidden files for directories starting with /etc/ -> ls -ald /etc/*
List in human-readable format in reverse order -> ls -hr
List files sorted by time -> ls --sort=time
List long format for /dev directory -> ls -l /dev
List with / at the end of directories recursively -> ls -pR
List only directories in /var/log directory -> ls -dq /var/log/*
List long format for /usr/local/sbin directory -> ls -l /usr/local/sbin
List files sorted by extension -> ls --sort=extension
List with symbols indicating file type -> ls -F
List files by time modified in reverse order in human-readable format -> ls -ltrh
List long format for 2nd level directories in /var/ -> ls -ld /var/*/*
List including hidden files in long human-readable format -> ls -lah
Count number of files in /usr/bin directory -> ls /usr/bin | wc -l
List all .txt contents recursively using grep -> "ls -R | grep "".txt"""
List files without sorting -> ls --sort=none
List file inode number for /etc/passwd file -> ls -i /etc/passwd
List files by time modified sorted by access time -> ls -ltu
List long format for 2nd level directories in /dev/ -> ls -l /dev/*/*
List long format for /usr/share/doc directory -> ls -l /usr/share/doc
List in long format with color coding -> ls -lG
List files by size in long human-readable format for /var/log directory -> ls -lhS /var/log
List long format with full timestamps -> ls -l --full-time
List long format for /dev/shm directory -> ls -l /dev/shm
List files by creation time in long format -> ls -U -l
List files with full timestamps without seconds -> ls -T
List long format for /bin and /usr/bin directories -> ls -l /bin /usr/bin
List including hidden files in long human-readable format recursively -> ls -lahR
List files by status change time -> ls --time=status
List recursively by time modified -> ls -Rt
List files by size in long human-readable format for /etc directory. -> ls -lhS /etc
Writes Hello World to a file named greetings.txt. -> "echo ""Hello World"" > greetings.txt"
Writes Welcome to Linux to a file at the specified directory. -> "echo ""Welcome to Linux"" > /home/user/welcome.txt"
Appends HELLO to the end of greetings.txt. -> "echo ""HELLO"" >> greetings.txt"
Writes My name is John to a file named name.txt without a trailing newline. -> "echo -n ""My name is "" && echo ""John"" > name.txt"
Creates a new file named myfile.txt with the content This is a file. -> "echo ""This is a file"" > myfile.txt"
Writes Hello and World on separate lines in a file named hello.txt. -> "echo -e ""Hello\nWorld"" > hello.txt"
Writes Welcome Linux to a file at the specified directory. -> "echo ""Welcome Linux"" > /tmp/welcome.txt"
Creates a new file named sample.txt with content This is a sample file. -> "echo ""This is a sample file"" > sample.txt"
Appends Hello World to the end of greetings.txt. -> "echo ""Hello World"" >> greetings.txt"
Creates a new file named testfile.txt with content This is just a file. -> "echo ""This is just a file."" > testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named file.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > file.txt"
Creates a file named mydir with content This is a directory. -> "echo ""This is a directory"" > mydir"
Writes Hello World to a file at the specified directory. -> "echo ""Hello World"" > /tmp/greetings.txt"
Creates a new file named file.txt with the content This is a test. -> "echo ""This is a test"" > file.txt"
Writes John Doe to a file named name.txt without a trailing newline. -> "echo -n ""John Doe"" > name.txt"
Creates a new file named test.txt with the content Testing 123.... -> "echo ""Testing 123..."" > test.txt"
"Writes This is a file and with two lines to a file named file.txt on separate lines, with a blank line in between." -> "echo -e ""This is a file\n\nwith two lines"" > file.txt"
Writes This is a directory to a file named mydir at the specified directory. -> "echo ""This is a directory"" > /home/user/mydir"
Writes Alice to a file named name.txt without a trailing newline. -> "echo -n ""Alice"" > name.txt"
Creates a new file named hello.txt with the content Hello world at the specified directory. -> "echo ""Hello world"" > /tmp/hello.txt"
Creates a new file named textfile.txt with the content This is a text file. -> "echo ""This is a text file"" > textfile.txt"
"Appends Line 1, Line 2 and Line 3 to a file named file.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" >> file.txt"
Creates a new file named directory.txt with the content This is a directory. -> "echo ""This is a directory"" > directory.txt"
Writes Hello World to a file named greetings.txt on the user's Desktop. -> "echo ""Hello World"" > ~/Desktop/greetings.txt"
Writes Bob to a file named name.txt without a trailing newline. -> "echo -n ""Bob"" > name.txt"
Creates a new file named file.txt with the content This is a test file. -> "echo ""This is a test file."" > file.txt"
"Writes This file and has blank lines to a file named file.txt on separate lines, with a blank line in between." -> "echo -e ""This file\n\nhas blank lines"" > file.txt"
Creates a new file named filename with the content This is a directory in a directory named mydir. -> "echo ""This is a directory"" > mydir/filename"
Writes Hello to a file named hello.txt at the specified directory. -> "echo ""Hello"" > /tmp/hello.txt"
Creates a new file named sample.txt with content This is a sample file at the specified directory. -> "echo ""This is a sample file"" > /home/user/sample.txt"
Writes Hello World to a file named helloworld.txt without a trailing newline. -> "echo -n ""Hello "" && echo -n ""World"" > helloworld.txt"
Creates a new file named testfile.txt with the content This is a test.... -> "echo ""This is a test..."" > testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Writes This is a directory to a file named file.txt in a directory named mydir at the specified directory. -> "echo ""This is a directory"" > /home/user/mydir/file.txt"
Writes Mary to a file named name.txt without a trailing newline. -> "echo -n ""Mary"" > name.txt"
Writes Hello World to a file named greetings.txt in the user's Documents folder. -> "echo ""Hello World"" > ~/Documents/greetings.txt"
Creates a new file named textfile.txt with the content This is a text file at the specified directory. -> "echo ""This is a text file"" > /tmp/textfile.txt"
"Appends Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" >> myfile.txt"
Creates a new file named dir.txt with the content This is a directory. -> "echo ""This is a directory"" > dir.txt"
Writes Hello to a file named hello.txt on the user's Desktop. -> "echo ""Hello"" > /home/user/Desktop/hello.txt"
Writes Paul to a file named name.txt without a trailing newline. -> "echo -n ""Paul"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file at the specified directory. -> "echo ""This is a test file"" > /tmp/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named newfile with the content This is a directory in a directory named mydir. -> "echo ""This is a directory"" > mydir/newfile"
Writes Hello World to a file named greetings.txt at the specified directory. -> "echo ""Hello World"" > /user/greetings.txt"
Creates a new file named sample.txt with content This is a sample file at the specified directory. -> "echo ""This is a sample file"" > /tmp/sample.txt"
"Writes Greetings, Earthling! to a file named greetings.txt without a trailing newline." -> "echo -n ""Greetings, "" && echo -n ""Earthling!"" > greetings.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's home directory. -> "echo ""This is a test file"" > ~/testfile.txt"
"Appends Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" >> myfile.txt"
Writes This is a directory to a file named filename in a directory named mydir at the specified directory. -> "echo ""This is a directory"" > /home/user/mydir/filename"
Writes Hello to a file named hello.txt in the user's Downloads folder. -> "echo ""Hello"" > ~/Downloads/hello.txt"
Writes Lucy to a file named name.txt without a trailing newline. -> "echo -n ""Lucy"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file at the specified directory. -> "echo ""This is a test file"" > /home/user/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named directory.txt with the content This is a directory. -> "echo ""This is a directory"" > directory.txt"
Writes Hello World to a file named greetings.txt in the user's Pictures folder. -> "echo ""Hello World"" > ~/Pictures/greetings.txt"
Creates a new file named textfile.txt with the content This is a text file at the specified directory. -> "echo ""This is a text file"" > /home/user/textfile.txt"
"Appends Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" >> myfile.txt"
Creates a new file named newfilename with the content This is a directory in a directory named mydir. -> "echo ""This is a directory"" > mydir/newfilename"
Writes Hello World to a file named greetings.txt at the specified directory. -> "echo ""Hello World"" > /user/share/greetings.txt"
Creates a new file named sample.txt with content This is a sample file at the specified directory. -> "echo ""This is a sample file"" > /home/user/Documents/sample.txt"
Writes World to a file named hello.txt without a trailing newline. -> "echo -n ""World"" > hello.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Documents folder. -> "echo ""This is a test file"" > ~/Documents/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named filename with the content This is a directory in a subdirectory named subdir within a directory named mydir. -> "echo ""This is a directory"" > mydir/subdir/filename"
Writes Hello to a file named hello.txt in the user's Pictures folder. -> "echo ""Hello"" > /home/user/Pictures/hello.txt"
Writes Jane to a file named name.txt without a trailing newline. -> "echo -n ""Jane"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Downloads folder. -> "echo ""This is a test file"" > ~/Downloads/testfile.txt"
"Appends Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" >> myfile.txt"
Writes This is a directory to a file named file.txt in a subdirectory named subdir within a directory named mydir at the specified directory. -> "echo ""This is a directory"" > /home/user/mydir/subdir/file.txt"
Writes Hello World to a file named greetings.txt at the specified directory. -> "echo ""Hello World"" > /usr/local/share/greetings.txt"
Creates a new file named sample.txt with content This is a sample file at the specified directory. -> "echo ""This is a sample file"" > /home/user/Pictures/sample.txt"
Writes Sarah to a file named name.txt without a trailing newline. -> "echo -n ""Sarah"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Pictures folder. -> "echo ""This is a test file"" > ~/Pictures/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named newfile with the content This is a directory in a subdirectory named subdir within a directory named mydir. -> "echo ""This is a directory"" > mydir/subdir/newfile"
Writes Hello to a file named hello.txt in the user's Downloads folder. -> "echo ""Hello"" > /home/user/Downloads/hello.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Pictures folder. -> "echo ""This is a test file"" > /home/user/Pictures/testfile.txt"
Writes Peter to a file named name.txt without a trailing newline. -> "echo -n ""Peter"" > name.txt"
Writes This is a directory to a file named file.txt in a directory named mydir at the specified directory. -> "echo ""This is a directory"" > /usr/local/mydir/file.txt"
Writes Hello World to a file named greetings.txt at the specified directory. -> "echo ""Hello World"" > /usr/share/greetings.txt"
Creates a new file named sample.txt with content This is a sample file in the user's Downloads folder. -> "echo ""This is a sample file"" > /home/user/Downloads/sample.txt"
Writes Tom to a file named name.txt without a trailing newline. -> "echo -n ""Tom"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Pictures folder. -> "echo ""This is a test file"" > /home/user/Pictures/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named filename with the content This is a directory in a subdirectory named subdir2 within a subdirectory named subdir within a directory named mydir. -> "echo ""This is a directory"" > mydir/subdir/subdir2/filename"
Writes Hello to a file named hello.txt in the user's Downloads folder. -> "echo ""Hello"" > /home/user/Downloads/hello.txt"
Creates a new file named testfile.txt with the content This is a test file in the user's Documents folder. -> "echo ""This is a test file"" > /home/user/Documents/testfile.txt"
Writes Maria to a file named name.txt without a trailing newline. -> "echo -n ""Maria"" > name.txt"
Creates a new file named newfilename with the content This is a directory in a subdirectory named subdir within a directory named mydir. -> "echo ""This is a directory"" > mydir/subdir/newfilename"
Writes Hello World to a file named greetings.txt in the user's Videos folder. -> "echo ""Hello World"" > ~/Videos/greetings.txt"
Creates a new file named sample.txt with content This is a sample file in the user's Documents folder. -> "echo ""This is a sample file"" > /home/user/Documents/sample.txt"
Writes David to a file named name.txt without a trailing newline. -> "echo -n ""David"" > name.txt"
Creates a new file named testfile.txt with the content This is a test file at the specified directory. -> "echo ""This is a test file"" > /usr/share/testfile.txt"
"Writes Line 1, Line 2 and Line 3 to a file named myfile.txt on separate lines." -> "echo -e ""Line 1\nLine 2\nLine 3"" > myfile.txt"
Creates a new file named filename2 with the content This is a directory in a subdirectory named subdir2 within a subdirectory named subdir within a directory named mydir. -> "echo ""This is a directory"" > mydir/subdir/subdir2/filename2"
Writes  -> "echo ""Hello"" > /tmp/hello.txt"
Display environment variables -> env
Start a clean environment -> env -i /bin/bash
Start a shell with USER variable unset -> env -u USER /bin/sh
Edit your crontab file with nano as editor -> env EDITOR=nano crontab -e
Run the ls command with a changed PATH -> env -S PATH=/usr/local/bin ls
Start a clean login shell -> env -i bash
Run the ls command with a specific PATH -> env -i PATH=/bin ls
Pass null-terminated arguments to the script -> env -0 ./my-script.sh
Run a command with a specific terminal type -> env -i TERM=xterm some_command
Run a command with HOME variable unset -> env -u HOME pwd
Start a bash shell with a specific shell executable -> env -i SHELL=/bin/bash bash
Set the PATH for a command without clearing the environment -> env - PATH=/usr/local/bin some_command
Set a variable only for the command -> env -i VAR=value command
Start a bash shell with a specific variable set -> env -i MYVAR=123 bash
Start a shell with a custom PATH -> env -i PATH=/usr/local/bin:/usr/bin sh
Login with a custom password -> env -i PASSWORD=secret ssh user@host
Run a program with a dumb terminal -> env -i TERM=dumb some_program
Run a command with PATH variable unset -> env -u PATH some_command
Remove a specific variable before running a command -> env -u VAR command
Pass a specific environment variable to a command -> env -S MYVAR=some_value command
Set an environment variable for a command -> env MYVAR=abc some_command
Run a Perl script with a variable unset -> env -u VAR perl script.pl
Pass an environment variable to a command -> env -S VAR=value command
Start a bash shell with a custom HOME directory -> env -i HOME=/tmp bash
Remove a variable from the environment before running the command -> env -u MYVAR some_command
Start a bash shell with a specific terminal type -> env -i TERM=xterm-256color bash
Start a bash shell as the root user -> env -i USER=root bash
Edit the crontab with vim editor -> env -i EDITOR=vim crontab -e
Set a variable only for the command -> env -i MYVAR=val some_command
Start a bash shell with root's home directory -> env -i HOME=/root bash
Set the editor for a command -> env -i EDITOR=nano command
SSH without using SSH agent -> env -u SSH_AUTH_SOCK ssh user@host
Start a bash shell with a predefined variable -> env -i MYVAR=myval bash
Start xterm on display 0 -> env -i DISPLAY=:0 xterm
Run whoami with the USER variable unset -> env -u USER whoami
Start a bash shell with a specific environment variable set -> env -i VAR=value bash
Run ls with PATH variable unset -> env -u PATH ls /tmp
Start a shell with a specific terminal type -> env -i TERM=xterm-88color sh
Pass a specific variable to a command -> env -S MYVAR=123 some_command
Set the editor for a command without affecting the environment -> env -i EDITOR=vim some_command
Set the environment variable for a command -> env MYVAR=123 some_command
Start a bash shell with a specific bashrc file -> env -i BASH_ENV=/path/to/bashrc bash
Run a command with a specific language setting -> env -i LC_ALL=C ls
Ping Google with HOME variable unset -> env -u HOME ping google.com
Start a bash shell with a custom home directory -> env -i HOME=/var/run/foo bash
Run a Perl script with a custom environment variable -> env -i MYVAR=something perl script.pl
Invokes some_script.sh with SOMEVAR variable unset -> env -u SOMEVAR ./some_script.sh
Start xeyes on display 0 -> env -i DISPLAY=:0 xeyes
Remove a specific variable from the environment -> env -u myvar some_command
Disable colors in ls command -> env -i LS_COLORS=none ls
Set the env var MYVAR for the command bar.sh -> env MYVAR=foo bar.sh
Set MYVAR only for the python script -> env -i MYVAR=foo python script.py
Edit crontab with vi editor -> env -i EDITOR=vi crontab -e
Run cat command with MYVAR variable unset -> env -u MYVAR cat file
Start a bash shell with multiple variables set -> env -i VAR1=value1 VAR2=value2 bash
Copy file to remote host without using SSH agent -> env -u SSH_AUTH_SOCK scp file user@host:/path
Start a bash shell with home directory set to /home/root -> env -i HOME=/home/root bash
Start a bash shell with vt220 terminal type -> env -i TERM=vt220 bash
Run myscript with ONE_VAR and SECOND_VAR variables unset -> env -u ONE_VAR -u SECOND_VAR myscript
Start a bash shell with a specific PATH -> env -i PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/usr/games:/usr/local/games bash
Get the current directory minus the last component -> env -u OLDPWD pwd
Start a bash shell with a custom home directory -> env -i HOME=~/tmp bash
Start a bash shell with xterm-16color terminal type -> env -i TERM=xterm-16color bash
Pass VAR variable to script.sh -> env -S VAR=value script.sh
Set MYVAR1 and MYVAR2 variables for script.sh only -> env -i MYVAR1=someval1 MYVAR2=someval2 script.sh
Copy file to remote host without using SSH agent -> env -u SSH_AGENT_PID scp file user@host:/path
Run ls with xterm-88color terminal type -> env -i TERM=xterm-88color ls
Launch rhythmbox on the local X server -> env -i DISPLAY=localhost:0.0 rhythmbox
Remove PATH and LD_LIBRARY_PATH variables before running command -> env -u PATH -u LD_LIBRARY_PATH command
Run ls with specific character encoding -> env -i LC_CTYPE=C ls
Run script.sh with MYVAR1 and MYVAR2 variables unset -> env -u MYVAR1 -u MYVAR2 ./script.sh
Run pwd with /root as HOME directory -> env -i HOME=/root pwd
Pass a string variable to script.sh -> "env -S MYVAR=""\""hello world\"""" script.sh"
Start the GNU Screen terminal multiplexer with an ANSI terminal -> env -i TERM=ansi screen
Remove VAR1 and VAR2 environment variables before running script.sh -> env -u VAR1 -u VAR2 script.sh
Start a shell with specific language settings -> env -i LC_ALL=en_US.UTF-8 sh
Copy file to remote host without using SSH agent -> env -u SSH_CLIENT scp file user@host:/path
Pass a variable with the home directory path to script.sh -> env -S MYVAR=$HOME script.sh
Run xterm with a linux terminal type -> env -i TERM=linux xterm
Run command with LD_PRELOAD variable unset -> env -u LD_PRELOAD command
Set MYVAR to the value of 'foo' for a bash shell only -> env -i MYVAR=echo foo bash
Get locale without LC_ALL variable -> env -u LC_ALL locale
Start a bash shell with a custom home directory -> env -i HOME=/home/user/Desktop bash
Pass a complex value to a command -> "env -S VAR=""\""I am a value\"" command"
Set VAR variable for script.sh only -> env -S VAR=1234 ./script.sh
Start the GNU Screen terminal multiplexer with a dumb terminal -> env -i TERM=dumb screen
Clears screen while TERMCAP variable is unset -> env -u TERMCAP clear
Start a ksh shell with the /bin/ksh executable -> env -i SHELL=/bin/ksh ksh
Pass the contents of /etc/passwd to a command -> "env -S VAR=""cat /etc/passwd"" command"
Run xterm with XAUTHORITY variable unset -> env -u XAUTHORITY xterm
Set a variable with a command substitution -> "env -i MYVAR=$(echo ""Hello, World!"") bash"
Run the date command without the LANG variable -> env -u LANG date
Start a bash shell with a custom home directory -> env -i HOME=/mnt/sdb1 bash
Run the ls command without the LC_COLLATE variable -> env -u LC_COLLATE ls
Start a tcsh shell with the /bin/tcsh executable -> env -i SHELL=/bin/tcsh tcsh
Pass a directory path to a command -> env -S VAR=/path/to/dir command
Run whoami without the LOGNAME variable -> env -u LOGNAME whoami
Set MYVAR to 'hello world' using printf command -> "env -i MYVAR=""$(printf ""%s"" ""hello world"")"" sh"
Use the read command with IFS variable unset -> "env -u IFS read -p ""Enter your name: "" name"
Start a bash shell with the variable MYVAR set to a directory path -> env -i MYVAR=/path/to/dir bash
Display system memory. -> free
Display memory in megabytes. -> free -m
Display memory in gigabytes. -> free -g
Display total and used memory. -> free -t
Display human-readable memory usage. -> free -h
Display memory usage every 5 seconds. -> free -s 5
Do memory usage measurement for 3 times. -> free -c 3
Display memory in bytes. -> free -o
Same as -o. -> free -b
Display wide output. -> free -w
Same as -o. -> free -k
Display detailed low level memory. -> free -l
Display version information. -> free -V
Display free space on file system /home/user/file1. -> free /home/user/file1
Display free space on file system /home/user. -> free /home/user
Display free space on current directory. -> free .
Display memory in powers of 1000. -> free --si
Drop caches before free memory measurement. -> free --sync
Display help information of command free. -> free --help
Display version information of command free. -> free --version
"Same as free /home/user/file2, but with human-readable output." -> free -h /home/user/file2
"Same as free /home/user, but with total and used memory displayed." -> free -t /home/user
Display memory usage every 10 seconds for 5 times. -> free -s 10 -c 5
"Same as free /home/user/file3, but with memory displayed in bytes." -> free -b /home/user/file3
"Same as free /home/user, but with detailed low level memory information." -> free -l /home/user
"Same as free -m, but with memory displayed in gigabytes." -> free -mg
"Same as free ., but with human-readable output." -> free -h .
"Same as free ., but with total and used memory displayed." -> free -t .
"Same as free -g /home/user, but with memory displayed in human-readable format." -> free -gh /home/user
Display memory usage every 30 seconds for 10 times on file system /home/user/file4. -> free -s 30 -c 10 /home/user/file4
"Same as free -o /home/user, but with human-readable output." -> free -oh /home/user
"Same as free /home/user/file5, but with memory displayed in megabytes." -> free -m /home/user/file5
"Same as free -tg /home/user, but with total and used memory displayed in human-readable format." -> free -tgh /home/user
"Same as free ., but with memory displayed in bytes." -> free -b .
"Same as free /home/user/file6 /home/user/file7, but with human-readable output." -> free -h /home/user/file6 /home/user/file7
Display memory usage every 20 seconds on file systems /home/user/file8 and /home/user/file9. -> free -s 20 /home/user/file8 /home/user/file9
"Same as free /home/user/file10 /home/user/file11, but with total and used memory displayed." -> free -t /home/user/file10 /home/user/file11
"Same as free -o /home/user/file12 /home/user/file13, but with human-readable output." -> free -oh /home/user/file12 /home/user/file13
"Same as free -lg /home/user, but with detailed low level memory information along with human-readable memory." -> free -lgh /home/user
"Same as free /home/user/file14 /home/user/file15, but with memory displayed in bytes." -> free -b /home/user/file14 /home/user/file15
"Same as free -t, but with memory displayed in megabytes." -> free -tm
"Same as free -t, but with memory displayed in gigabytes." -> free -tg
"Display memory usage every 15 seconds on file systems /home/user/file16, /home/user/file17, and /home/user/file18." -> free -s 15 /home/user/file16 /home/user/file17 /home/user/file18
"Same as free -o /home/user/file19 /home/user/file20 /home/user/file21, but with human-readable output." -> free -oh /home/user/file19 /home/user/file20 /home/user/file21
"Same as free -lg ., but for the current directory." -> free -lgh .
"Same as free /home/user/file22 /home/user/file23 /home/user/file24, but with human-readable output." -> free -h /home/user/file22 /home/user/file23 /home/user/file24
"Same as free -tg /home/user/file25 /home/user/file26, but with total and used memory displayed in human-readable format." -> free -tgh /home/user/file25 /home/user/file26
"Same as free -o /home/user/file27 /home/user/file28 /home/user/file29 /home/user/file30, but with human-readable output." -> free -oh /home/user/file27 /home/user/file28 /home/user/file29 /home/user/file30
"Display memory usage every 25 seconds on file systems /home/user/file31, /home/user/file32, /home/user/file33, and /home/user/file34." -> free -s 25 /home/user/file31 /home/user/file32 /home/user/file33 /home/user/file34
"Same as free /home/user/file35 /home/user/file36 /home/user/file37 /home/user/file38, but with human-readable output." -> free -h /home/user/file35 /home/user/file36 /home/user/file37 /home/user/file38
"Same as free -tg /home/user/file39 /home/user/file40 /home/user/file41, but with total and used memory displayed in human-readable format." -> free -tgh /home/user/file39 /home/user/file40 /home/user/file41
"Same as free -o /home/user/file42 /home/user/file43 /home/user/file44 /home/user/file45, but with human-readable output." -> free -oh /home/user/file42 /home/user/file43 /home/user/file44 /home/user/file45
"Display memory usage every 30 seconds on file systems /home/user/file46, /home/user/file47, /home/user/file48, /home/user/file49, and /home/user/file50." -> free -s 30 /home/user/file46 /home/user/file47 /home/user/file48 /home/user/file49 /home/user/file50
"Same as free /home/user/file51 /home/user/file52 /home/user/file53 /home/user/file54 /home/user/file55, but with human-readable output." -> free -h /home/user/file51 /home/user/file52 /home/user/file53 /home/user/file54 /home/user/file55
"Same as free -tg /home/user/file56 /home/user/file57 /home/user/file58 /home/user/file59, but with total and used memory displayed in human-readable format." -> free -tgh /home/user/file56 /home/user/file57 /home/user/file58 /home/user/file59
"Same as free -o /home/user/file60 /home/user/file61 /home/user/file62 /home/user/file63 /home/user/file64, but with human-readable output." -> free -oh /home/user/file60 /home/user/file61 /home/user/file62 /home/user/file63 /home/user/file64
"Display memory usage every 35 seconds on file systems /home/user/file65, /home/user/file66, /home/user/file67, /home/user/file68, /home/user/file69, and /home/user/file70." -> free -s 35 /home/user/file65 /home/user/file66 /home/user/file67 /home/user/file68 /home/user/file69 /home/user/file70
"Same as free /home/user/file71 /home/user/file72 /home/user/file73 /home/user/file74 /home/user/file75 /home/user/file76, but with human-readable output." -> free -h /home/user/file71 /home/user/file72 /home/user/file73 /home/user/file74 /home/user/file75 /home/user/file76
"Same as free -tg /home/user/file77 /home/user/file78 /home/user/file79 /home/user/file80 /home/user/file81, but with total and used memory displayed in human-readable format." -> free -tgh /home/user/file77 /home/user/file78 /home/user/file79 /home/user/file80 /home/user/file81
"Same as free -o /home/user/file82 /home/user/file83 /home/user/file84 /home/user/file85 /home/user/file86 /home/user/file87, but with human-readable output." -> free -oh /home/user/file82 /home/user/file83 /home/user/file84 /home/user/file85 /home/user/file86 /home/user/file87
"Display memory usage every 40 seconds on file systems /home/user/file88, /home/user/file89, /home/user/file90, /home/user/file91, /home/user/file92, /home/user/file93, and /home/user/file94." -> free -s 40 /home/user/file88 /home/user/file89 /home/user/file90 /home/user/file91 /home/user/file92 /home/user/file93 /home/user/file94
"Same as free /home/user/file95 /home/user/file96 /home/user/file97 /home/user/file98 /home/user/file99 /home/user/file100, but with human-readable output." -> free -h /home/user/file95 /home/user/file96 /home/user/file97 /home/user/file98 /home/user/file99 /home/user/file100
Download file from URL. -> wget example.com
Clone repository. -> git clone repo
Copy file to remote server. -> scp file remote:
Retrieve data from API. -> curl http://api.com
Sync local file to remote server. -> rsync -avz file remote:
Connect to FTP server. -> ftp ftp.example.com
Create archive of directory. -> tar -cvzf archive.tar.gz dir/
Retrieve user information. -> getent passwd user
Check out SVN repository. -> svn checkout repo
Install package using yum. -> yum-get install package
List files installed by package. -> dpkg -L package
Update packages using DNF. -> dnf-get update
Upgrade packages using APT. -> apt-get upgrade
List all installed packages using rpm. -> rpm -qa
Find file in filesystem. -> locate file
Find file in directory. -> find . -name file
Search for pattern in file. -> grep pattern file
Print lines matching pattern. -> awk '/pattern/{print}' file
Replace text in file. -> sed 's/find/replace/g' file
Extract first field in file. -> "cut -d ',' -f 1 file"
Search for pattern in file. -> cat file | grep pattern
Display last 100 lines of file. -> tail -n 100 file
Display first 10 lines of file. -> head -n 10 file
Display file content page by page. -> less file
Display file content page by page. -> more file
Count lines in file. -> wc -l file
Show size of directory. -> du -sh dir/
Show detailed list of files. -> ls -l
Change file permissions to 755. -> chmod 755 file
Change file ownership. -> chown user:group file
Kill process with given PID. -> kill PID
Show list of running processes. -> ps aux
Show resource usage of processes. -> top
Show system uptime. -> uptime
Show disk space usage. -> df -h
Show free memory in MB. -> free -m
Show network interfaces. -> ifconfig
Show network connections. -> netstat -apn
Show routing table. -> route -n
Ping host to test connectivity. -> ping host
Trace route to host. -> traceroute host
Combine ping and traceroute. -> mtr host
SSH into remote server. -> ssh user@host
SFTP into remote server. -> sftp user@host
Copy file to remote server. -> scp file user@host:
Sync local file to remote server. -> rsync -avz file user@host:
Create archive of directory. -> tar -cvzf archive.tar.gz dir/
Download file from URL. -> wget example.com
Retrieve data from API. -> curl http://api.com
Connect to FTP server. -> ftp ftp.example.com
Retrieve user information. -> getent passwd user
Check out SVN repository. -> svn checkout repo
Install package using yum. -> yum-get install package
List files installed by package. -> dpkg -L package
Update packages using DNF. -> dnf-get update
Upgrade packages using APT. -> apt-get upgrade
List all installed packages using rpm. -> rpm -qa
Find file in filesystem. -> locate file
Find file in directory. -> find . -name file
Search for pattern in file. -> grep pattern file
Print lines matching pattern. -> awk '/pattern/{print}' file
Replace text in file. -> sed 's/find/replace/g' file
Extract first field in file. -> "cut -d ',' -f 1 file"
Search for pattern in file. -> cat file | grep pattern
Display last 100 lines of file. -> tail -n 100 file
Display first 10 lines of file. -> head -n 10 file
Display file content page by page. -> less file
Display file content page by page. -> more file
Count lines in file. -> wc -l file
Show size of directory. -> du -sh dir/
Show detailed list of files. -> ls -l
Change file permissions to 755. -> chmod 755 file
Change file ownership. -> chown user:group file
Kill process with given PID. -> kill PID
Show list of running processes. -> ps aux
Show resource usage of processes. -> top
Show system uptime. -> uptime
Show disk space usage. -> df -h
Show free memory in MB. -> free -m
Show network interfaces. -> ifconfig
Show network connections. -> netstat -apn
Show routing table. -> route -n
Ping host to test connectivity. -> ping host
Trace route to host. -> traceroute host
Combine ping and traceroute. -> mtr host
SSH into remote server. -> ssh user@host
SFTP into remote server. -> sftp user@host
Copy file to remote server. -> scp file user@host:
Sync local file to remote server. -> rsync -avz file user@host:
Create archive of directory. -> tar -cvzf archive.tar.gz dir/
Download file from URL. -> wget example.com
Retrieve data from API. -> curl http://api.com
Connect to FTP server. -> ftp ftp.example.com
Retrieve user information. -> getent passwd user
Check out SVN repository. -> svn checkout repo
Install package using yum. -> yum-get install package
List files installed by package. -> dpkg -L package
Update packages using DNF. -> dnf-get update
Upgrade packages using APT. -> apt-get upgrade
List all installed packages using rpm. -> rpm -qa
Terminate process 53245 -> kill -9 53245
Send SIGTERM signal to the process named myapp -> kill -s SIGTERM myapp
Forcefully kill the process using the file at /tmp/file as input -> kill -f /tmp/file
Send SIGTERM signal to all processes in mydir directory -> kill -15 mydir
Terminate the server process -> kill -9 server
Send SIGHUP signal to the process using the file as input -> kill -s SIGHUP file
Send SIGQUIT signal to the process with PID -> kill -q PID
Send SIGKILL signal to the process named app -> kill -SIGKILL app
Terminate the process using /var/run/haproxy.pid file as input -> kill -9 /var/run/haproxy.pid
Send SIGINT signal to all processes in the directory directory -> kill -s SIGINT directory
Forcefully terminate the process with program as input -> kill -f /usr/local/program
Send SIGTERM signal to all processes in /mnt/data/logs directory -> kill -15 /mnt/data/logs
Terminate the process using /var/run/nginx.pid file as input -> kill -9 /var/run/nginx.pid
Send SIGQUIT signal to all processes in /etc/myapp directory -> kill -s SIGQUIT /etc/myapp
Terminate the process with program as input -> kill -9 program
Forcefully kill the process using the /var/app/name.pid file as input -> kill -f /var/app/name.pid
Send SIGTERM signal to all processes in /home/user directory -> kill -15 /home/user
Send SIGHUP signal to the process with program as input -> kill -s SIGHUP program
Send SIGKILL signal to all processes in /var/www directory -> kill -s SIGKILL /var/www
Terminate the process using /etc/myapp.pid file as input -> kill -9 /etc/myapp.pid
Forcefully kill all processes in the /usr/local/bin directory -> kill -f /usr/local/bin
Send SIGTERM signal to the process with name as input -> kill -15 name
Send SIGTERM signal to all processes in the /tmp directory -> kill -s SIGTERM /tmp
Terminate the process using /var/log/app.pid file as input -> kill -9 /var/log/app.pid
Send SIGHUP signal to all processes in the /opt directory -> kill -s SIGHUP /opt
Forcefully kill the process using /var/run/myapp.pid file as input -> kill -f /var/run/myapp.pid
Send SIGTERM signal to all processes in the /usr/local directory -> kill -15 /usr/local
Send SIGKILL signal to the process named myapp -> kill -s SIGKILL myapp
Terminate the process using /var/app.pid file as input -> kill -9 /var/app.pid
Forcefully kill all processes in the /tmp directory -> kill -f /tmp
Send SIGTERM signal to all processes in the /var directory -> kill -15 /var
Send SIGTERM signal to all processes in the /usr/local/bin directory -> kill -s SIGTERM /usr/local/bin
Terminate the process using /etc/nginx.pid file as input -> kill -9 /etc/nginx.pid
Send SIGHUP signal to all processes in the /var/log directory -> kill -s SIGHUP /var/log
Forcefully kill the process using /var/run/httpd.pid file as input -> kill -f /var/run/httpd.pid
Send SIGTERM signal to all processes in the /usr/local/sbin directory -> kill -15 /usr/local/sbin
Send SIGKILL signal to the process using /var/log/myapp.log file as input -> kill -s SIGKILL /var/log/myapp.log
Terminate the process with name as input -> kill -9 name
Forcefully kill all processes in the /usr/bin directory -> kill -f /usr/bin
Send SIGTERM signal to all processes in the /var/log/myapp directory -> kill -15 /var/log/myapp
Send SIGHUP signal to all processes in the /usr/local directory -> kill -s SIGHUP /usr/local
Terminate the process using /var/run/myserver.pid file as input -> kill -9 /var/run/myserver.pid
Send SIGTERM signal to all processes in the /etc/nginx directory -> kill -s SIGTERM /etc/nginx
Forcefully kill all processes in the /var/log/httpd directory -> kill -f /var/log/httpd
Send SIGTERM signal to all processes in the /etc directory -> kill -15 /etc
Send SIGHUP signal to the process named myserver -> kill -s SIGHUP myserver
Terminate all processes in the /var/app/logs directory -> kill -9 /var/app/logs
Forcefully kill all processes in the /usr/local/bin directory -> kill -f /usr/local/bin
Send SIGTERM signal to all processes in the /var/app/conf directory -> kill -15 /var/app/conf
Send SIGTERM signal to all processes in the /usr/bin directory -> kill -s SIGTERM /usr/bin
Terminate the process using /var/log/httpd.pid file as input -> kill -9 /var/log/httpd.pid
Send SIGHUP signal to all processes in the /var/app directory -> kill -s SIGHUP /var/app
Forcefully kill all processes in the /usr/local/sbin directory -> kill -f /usr/local/sbin
Send SIGTERM signal to all processes in the /run directory -> kill -15 /run
Send SIGKILL signal to all processes in the /var directory -> kill -s SIGKILL /var
Terminate the process using /var/app/logs/file.log file as input -> kill -9 /var/app/logs/file.log
Forcefully kill all processes in the /var/log/myapp directory -> kill -f /var/log/myapp
Send SIGTERM signal to all processes in the /usr/bin directory -> kill -15 /usr/bin
Send SIGHUP signal to the process using /etc/nginx/nginx.conf file as input -> kill -s SIGHUP /etc/nginx/nginx.conf
Terminate all processes in the /var/app/logs directory -> kill -9 /var/app/logs
Forcefully kill all processes in the /usr/bin directory -> kill -f /usr/bin
Send SIGTERM signal to all processes in the /var/app/conf directory -> kill -15 /var/app/conf
Send SIGTERM signal to all processes in the /usr/local/sbin directory -> kill -s SIGTERM /usr/local/sbin
Terminate the process using /var/log/nginx.pid file as input -> kill -9 /var/log/nginx.pid
Send SIGHUP signal to the process using /var/log/myapp.log file as input -> kill -s SIGHUP /var/log/myapp.log
Forcefully kill all processes in the /etc/nginx directory -> kill -f /etc/nginx
Send SIGTERM signal to all processes in the /usr/local/bin directory -> kill -15 /usr/local/bin
Send SIGKILL signal to all processes in the /var/app directory -> kill -s SIGKILL /var/app
Terminate the process using /var/app/logs/file.log file as input -> kill -9 /var/app/logs/file.log
Forcefully kill all processes in the /usr/bin directory -> kill -f /usr/bin
Send SIGTERM signal to all processes in the /var/app/conf directory -> kill -15 /var/app/conf
Send SIGHUP signal to all processes in the /usr/local/sbin directory -> kill -s SIGHUP /usr/local/sbin
Terminate all processes in the /var/log/httpd directory -> kill -9 /var/log/httpd
Forcefully kill all processes in the /usr/local/bin directory -> kill -f /usr/local/bin
Send SIGTERM signal to all processes in the /run directory -> kill -15 /run
Send SIGTERM signal to all processes in the /var directory -> kill -s SIGTERM /var
Terminate the process using /var/log/myapp.log file as input -> kill -9 /var/log/myapp.log
Send SIGHUP signal to all processes in the /etc/nginx directory -> kill -s SIGHUP /etc/nginx
Forcefully kill all processes in the /var/app directory -> kill -f /var/app
Send SIGTERM signal to all processes in the /usr/local/sbin directory -> kill -15 /usr/local/sbin
Send SIGKILL signal to all processes in the /etc directory -> kill -s SIGKILL /etc
Terminate all processes in the /var/app/logs directory -> kill -9 /var/app/logs
Forcefully kill all processes in the /usr/local/bin directory -> kill -f /usr/local/bin
Send SIGTERM signal to all processes in the /run directory -> kill -15 /run
Send SIGTERM signal to all processes in the /var directory -> kill -s SIGTERM /var
Terminate all processes in the /var/app directory -> kill -9 /var/app
Send SIGHUP signal to the process using /etc/nginx/sites-available/default file as input -> kill -s SIGHUP /etc/nginx/sites-available/default
Forcefully kill all processes in the /var/app directory -> kill -f /var/app
Send SIGTERM signal to all processes in the /usr/local/bin directory -> kill -15 /usr/local/bin
Send SIGKILL signal to all processes in the /usr/bin directory -> kill -s SIGKILL /usr/bin
Terminate the process using /var/run/myapp.pid file as input -> kill -9 /var/run/myapp.pid
Forcefully kill the process using /var/app/logs/file.log file as input -> kill -f /var/app/logs/file.log
Send SIGTERM signal to all processes in the /etc/nginx directory -> kill -15 /etc/nginx
Send SIGHUP signal to all processes in the /etc/myapp directory -> kill -s SIGHUP /etc/myapp
Terminate all processes in the /var/log/myapp directory -> kill -9 /var/log/myapp
Forcefully kill all processes in the /usr/bin directory -> kill -f /usr/bin
Send SIGTERM signal to all processes in the /run directory -> kill -15 /run
Send SIGTERM signal to all processes in the /var/log directory -> kill -s SIGTERM /var/log
Terminate all processes in the /var/app/logs directory -> kill -9 /var/app/logs
Forcefully kill all processes in the /usr/local/sbin directory -> kill -f /usr/local/sbin
List all files. -> ls
List files with details. -> ls -l
List all files including hidden ones. -> ls -a
List files sorted by modification time. -> ls -t
List files in reverse order. -> ls -r
List all files recursively. -> ls -R
List all files with a human-readable format. -> ls -lh
List files sorted by size. -> ls -S
List files in the /etc directory. -> ls /etc
List files in the /home directory. -> ls /home
List files in the /var directory. -> ls /var
List files in the /usr directory. -> ls /usr
List files in the /tmp directory. -> ls /tmp
List files in the /root directory. -> ls /root
List files in the /sbin directory. -> ls /sbin
List files in the /bin directory. -> ls /bin
List files in the /lib directory. -> ls /lib
List files in the /var/log directory. -> ls /var/log
"List files with indicators (directories with a slash, executables with a *)." -> ls -F
List files with colorized output. -> ls -G
List files with inode numbers. -> ls -i
List files separated by commas. -> ls -m
List files with one file per line. -> ls -1
List files with a slash after directory names. -> ls -p
List files sorted by creation time. -> ls -c
List files sorted by access time. -> ls -u
List only directories. -> ls -d
"List files with long format (similar to -l, but without owner information)." -> ls -g
List files with size information. -> ls -s
List files with a tab-separated format. -> ls -T
List files in the /dev directory. -> ls /dev
List files in the /proc directory. -> ls /proc
List files in the /sys directory. -> ls /sys
List files in the /boot directory. -> ls /boot
List files in the /mnt directory. -> ls /mnt
List files in the /media directory. -> ls /media
List files in the /srv directory. -> ls /srv
List files in the /opt directory. -> ls /opt
List files in the /lib64 directory. -> ls /lib64
List files in the /usr/local directory. -> ls /usr/local
List files in the /usr/share directory. -> ls /usr/share
List files in the /usr/lib directory. -> ls /usr/lib
List files in the /usr/bin directory. -> ls /usr/bin
List files in the /usr/sbin directory. -> ls /usr/sbin
List all files except . and .. -> ls -A
List files sorted by creation time with the exact time and date. -> ls -c --full-time
"List files with a colorful, human-readable format with size in powers of 1000." -> ls -h --si --color
List files with details and human-readable file sizes. -> ls -l -h
List symbolic links as files. -> ls -L
List files with numerical user and group IDs. -> ls -n
List files with long format without group information. -> ls -o
List files with ? instead of non-printable characters. -> ls -q
List files sorted by modification time with directories listed first. -> ls -t --group-directories-first
List files sorted by extension. -> ls -X
List files with security context. -> ls -Z
List files in the my_directory directory. -> ls my_directory
List files in the my_files directory in the current user's home directory. -> ls ~/my_files
List files in reverse order sorted by modification time. -> ls -r -t
List files in the root directory with colorized output. -> ls / --color=auto
List files with details in the important_files directory of the user's home directory. -> ls -l /home/user/important_files
List the files that symbolic links point to. -> ls --dereference
List files with colorized output and a slash after directory names. -> ls -G -p
List files with one file per line sorted by modification time. -> ls -1 -t
List files with size information in a human-readable format. -> ls -s -h
List only directories in the current directory. -> ls -d */
List files sorted by creation time and modification time. -> ls -c -t
List files with details with directories listed first. -> ls -l --group-directories-first
List files with indicators and a slash after directory names. -> ls -F -p
List all files with a human-readable format sorted by size. -> ls -lhS
List files with long format and ISO-style dates without owner information. -> ls -g --time-style=long-iso
List all files with a human-readable format with size in kilobytes. -> ls -lh --block-size=KB
List files with inode numbers and long format. -> ls -il
List files separated by commas with indicators. -> ls -m -F
List only directories in the root directory. -> ls -d /*
List files sorted by modification time in reverse order with details. -> ls -ltr
List files sorted by access time in reverse order with details. -> ls -ltu
List files with long format and full ISO-style dates. -> ls -l --time-style=full-iso
List files in columns. -> ls -C
List all files with a slash after directory names. -> ls -p -a
List files with size information in a human-readable format sorted by size. -> ls -h -S
List all files with hidden files and excluding files with .txt extension. -> "ls -la --exclude ""*.txt"""
List files with a slash after directory names and including hidden files. -> ls -ap
List files in the /usr/bin directory sorted by modification time in reverse order with details. -> ls -ltr /usr/bin
List files in the my_directory directory with one file per line. -> ls -1 /my_directory
List files with a human-readable format and colorized output. -> ls -lh --color=auto
List files in reverse order sorted by size. -> ls -r -S
List files with details with size in powers of 1000. -> ls -l --si
List files with one file per line in reverse order. -> ls -1 -r
Show the version of ls command. -> ls --version
Show the help of ls command. -> ls --help
"List files with details, exact time and date, and file sizes in a human-readable format." -> ls -l --full-time -h
List files with one file per line with directories listed first. -> ls -1 --group-directories-first
List all files with indicators. -> ls -a -F
List files with a human-readable format and colorized output even when piped to another command. -> ls -lh --color=always
List files with details sorted by access time with file sizes in a human-readable format. -> ls -l -u -h
List files with long format and modification time in seconds since the UNIX epoch. -> ls -l --time-style=+%s
List files with details and file sizes in a human-readable format sorted by modification time. -> ls -l --human-readable --sort=time
List files hiding files with a specified pattern. -> ls --hide=*
List all files with one file per line excluding . and .. directories. -> "ls -1a | grep -v ""^\.\"""""
List all files with details and a human-readable format. -> ls -alh
Create directory named mydir -> mkdir mydir
Create directory named dir1 inside current directory -> mkdir dir1/
Create directory dir1 with subdirectory dir2 -> mkdir -p dir1/dir2
Create directory mydir with permissions set to 775 -> mkdir -m 775 mydir
Create directories mydir1 and mydir2 -> mkdir mydir1 mydir2
Create directory mydir with verbose output -> mkdir -v mydir
Create directory dir1 with subdirectories dir2 and dir3 -> mkdir -p dir1/dir2/dir3
Create directory mydir with permissions set to 777 -> mkdir -m 777 mydir
"Create directories dir1, dir2, and dir3 with verbose output" -> mkdir -v dir1 dir2 dir3
Create directory mydir and change to it -> mkdir mydir && cd mydir
Create directory dir1 with subdirectories dir2 and dir3 -> "mkdir -p dir1/{dir2,dir3}"
Create directory mydir with permissions set to 600 -> mkdir -m 600 mydir
"Create directories dir1, dir2, and dir3 with verbose output" -> mkdir -v dir{1..3}
Create directory dir1 with subdirectory dir2 and its subdirectories dir3 and dir4 -> "mkdir -p dir1/dir2/{dir3,dir4}"
Create directory mydir with permissions set to 644 -> mkdir -m 644 mydir
"Create directories mydir1, mydir2, and mydir3 with verbose output" -> mkdir -v mydir{1..3}
"Create directory dir1 with subdirectories dir2, dir3, and dir4" -> mkdir -p dir1/dir2/dir3/dir4
Create directory mydir with permissions set to 400 -> mkdir -m 400 mydir
"Create directories dira, dirb, and dirc with verbose output" -> "mkdir -v dir{a,b,c}"
"Create directory dir1 with subdirectories dir2, dir3, dir4, and dir5" -> mkdir -p dir1/dir2/dir3/dir4/dir5
Create directory mydir with permissions set to 666 -> mkdir -m 666 mydir
Create directories dir1 and dir2 inside mydir with verbose output -> "mkdir -v mydir/{dir1,dir2}"
"Create directories mydir1, mydir2, and mydir3" -> mkdir mydir1 mydir2 mydir3
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, and its subdirectories dir4 and dir5" -> "mkdir -p dir1/dir2/dir3/{dir4,dir5}"
Create directory mydir with permissions set to 744 -> mkdir -m 744 mydir
"Create directories dir1 and dir2 inside mydir1, mydir2, and mydir3 with verbose output" -> "mkdir -v mydir{1..3}/{dir1,dir2}"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, and its subdirectories dir4, dir5, and dir6" -> "mkdir -p dir1/dir2/dir3/{dir4,dir5,dir6}"
Create directory mydir with permissions set to 700 -> mkdir -m 700 mydir
"Create directories dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, and its subdirectories dir4, dir5, and dir6" -> "mkdir -p dir1/dir2/{dir3/{dir4,dir5},dir6}"
Create directory mydir with permissions set to 755 -> mkdir -m 755 mydir
"Create directory dir1 inside mydir1, mydir2, and mydir3 with verbose output" -> mkdir -v mydir{1..3}/dir1
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, and its subdirectories dir4, dir5, dir6, dir7, and dir8" -> "mkdir -p dir1/dir2/{dir3/{dir4,dir5/{dir6,dir7}},dir8}"
Create directories mydir1 and mydir2 with permissions set to 600 -> mkdir -m 600 mydir1 mydir2
"Create subdirectory subdir inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectory dir4, and subdirectory dir5 with its subdirectory dir6" -> "mkdir -p dir1/{dir2/dir3/dir4,dir5/dir6}"
"Create directories mydir1, mydir2, and mydir3 with permissions set to 700" -> mkdir -m 700 mydir1 mydir2 mydir3
"Create subdirectory subdir inside dir1 and dir2 inside mydir1, mydir2, and mydir3 with verbose output" -> "mkdir -v mydir{1..3}/{dir1,dir2}/subdir"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectories dir4 and dir5, its subdirectory dir6, and subdirectory dir7 with its subdirectory dir8" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5},dir6},dir7/dir8}"
"Create directories mydir1, mydir2, and mydir3 with permissions set to 644" -> mkdir -m 644 mydir1 mydir2 mydir3
"Create subdirectories subdir1 and subdir2 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectory dir4, its subdirectory dir5, its subdirectory dir6, its subdirectory dir7, its subdirectories dir8 and dir9, and subdirectory dir10" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9}}}},dir10}"
"Create directories mydir1, mydir2, and mydir3 with permissions set to 750" -> mkdir -m 750 mydir1 mydir2 mydir3
"Create subdirectories subdir1 and subdir2 inside dir1 and dir2 inside mydir1, mydir2, and mydir3 with verbose output" -> "mkdir -v mydir{1..3}/{dir1,dir2}/subdir1/subdir2"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectory dir4, its subdirectory dir5, its subdirectory dir6, its subdirectory dir7, its subdirectories dir8, dir9, dir10, and dir11, and subdirectory dir12" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11}}}}},dir12}"
"Create directories mydir1, mydir2, mydir3, and mydir4 with permissions set to 755" -> mkdir -m 755 mydir1 mydir2 mydir3 mydir4
"Create subdirectories subdir1, subdir2, and subdir3 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2/subdir3"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectory dir4, its subdirectory dir5, its subdirectory dir6, its subdirectory dir7, its subdirectories dir8, dir9, dir10, dir11, dir12, and dir13, and subdirectory dir14" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13}}}}}},dir14}"
"Create directories mydir1, mydir2, mydir3, and mydir4 with permissions set to 700" -> mkdir -m 700 mydir1 mydir2 mydir3 mydir4
"Create subdirectories subdir1, subdir2, and subdir3 inside dir1 and dir2 inside mydir1, mydir2, and mydir3 with verbose output" -> "mkdir -v mydir{1..3}/{dir1,dir2}/subdir1/subdir2/subdir3"
"Create directory dir1 with subdirectory dir2, its subdirectory dir3, its subdirectory dir4, its subdirectory dir5, its subdirectory dir6, its subdirectory dir7, its subdirectories dir8, dir9, dir10, dir11, dir12, dir13, dir14, and dir15, and subdirectory dir16" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13/{dir14,dir15}}}}}}},dir16}"
"Create directories mydir1, mydir2, mydir3, and mydir4 with permissions set to 600" -> mkdir -m 600 mydir1 mydir2 mydir3 mydir4
"Create subdirectories subdir1, subdir2, subdir3, and subdir4 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2/subdir3/subdir4"
"Create directory dir1 with its subdirectory dir2 and its subdirectory dir3, its subdirectories dir4, dir5, dir6, dir7, dir8, dir9, dir10, dir11, dir12, dir13, dir14, dir15, dir16, and dir17, and their subdirectories dir18 and dir19" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13/{dir14,dir15/{dir16,dir17}}}}}}}}/{dir18,dir19}}"
"Create directories mydir1, mydir2, mydir3, mydir4, and mydir5 with permissions set to 644" -> mkdir -m 644 mydir1 mydir2 mydir3 mydir4 mydir5
"Create subdirectories subdir1, subdir2, subdir3, and subdir4 inside dir1 and dir2 inside mydir1, mydir2, and mydir3 with verbose output" -> "mkdir -v mydir{1..3}/{dir1,dir2}/subdir1/subdir2/subdir3/subdir4"
"Create directory dir1 with its subdirectory dir2 and its subdirectory dir3, its subdirectories dir4, dir5, dir6, dir7, dir8, dir9, dir10, dir11, dir12, dir13, dir14, dir15, dir16, dir17, dir18, and dir19" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13/{dir14,dir15/{dir16,dir17/{dir18,dir19}}}}}}}}}}"
"Create directories mydir1, mydir2, mydir3, mydir4, and mydir5 with permissions set to 700" -> mkdir -m 700 mydir1 mydir2 mydir3 mydir4 mydir5
"Create subdirectories subdir1, subdir2, subdir3, subdir4, and subdir5 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2/subdir3/subdir4/subdir5"
"Create directory dir1 with its subdirectory dir2 and its subdirectory dir3, its subdirectories dir4, dir5, dir6, dir7, dir8, dir9, dir10, dir11, dir12, dir13, dir14, dir15, dir16, dir17, dir18, dir19, dir20, and dir21" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13/{dir14,dir15/{dir16,dir17/{dir18,dir19/{dir20,dir21}}}}}}}}}}}}"
"Create directories mydir1, mydir2, mydir3, mydir4, and mydir5 with permissions set to 750" -> mkdir -m 750 mydir1 mydir2 mydir3 mydir4 mydir5
"Create subdirectories subdir1, subdir2, subdir3, subdir4, subdir5, and subdir6 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2/subdir3/subdir4/subdir5/subdir6"
"Create directory dir1 with its subdirectory dir2 and its subdirectory dir3, its subdirectories dir4, dir5, dir6, dir7, dir8, dir9, dir10, dir11, dir12, dir13, dir14, dir15, dir16, dir17, dir18, dir19, dir20, dir21, dir22, and dir23" -> "mkdir -p dir1/{dir2/{dir3/{dir4,dir5/{dir6,dir7/{dir8,dir9/{dir10,dir11/{dir12,dir13/{dir14,dir15/{dir16,dir17/{dir18,dir19/{dir20,dir21/{dir22,dir23}}}}}}}}}}}}}"
"Create directories mydir1, mydir2, mydir3, mydir4, mydir5, and mydir6 with permissions set to 644" -> mkdir -m 644 mydir1 mydir2 mydir3 mydir4 mydir5 mydir6
"Create subdirectories subdir1, subdir2, subdir3, subdir4, subdir5, subdir6, and subdir7 inside dir1, dir2, and dir3 inside mydir with verbose output" -> "mkdir -v mydir/{dir1,dir2,dir3}/subdir1/subdir2/subdir3/subdir4/subdir5/subdir6/subdir7"
Creates a new temporary file with newfile prefix. -> mktemp newfile
Creates a temporary directory with test-dir prefix. -> mktemp test-dir
Creates a new temporary file with file prefix in the /tmp/ directory. -> mktemp -p /tmp/ file
Creates a new temporary directory in the /var/tmp/ directory. -> mktemp -d /var/tmp/
Creates a new temporary file with test prefix in the /home/user/ directory. -> mktemp /home/user/test
Creates a new temporary file with newfile prefix and displays the file name without creating it. -> mktemp -u newfile
Displays the file name that will be created with newfile prefix without creating it. -> mktemp --dry-run newfile
Creates a new temporary file in the system temporary directory with a random name. -> mktemp -t
Creates a new temporary file with test prefix and .txt suffix. -> mktemp --suffix .txt test
Creates a new temporary file with newfile prefix and suppresses output messages. -> mktemp -q /tmp/newfile
Creates a new temporary file with temp prefix in the ~/test-dir/ directory. -> mktemp -p ~/test-dir/ temp
Creates a new temporary file in the /mnt/data-dir/ directory. -> mktemp --tmpdir=/mnt/data-dir/
Creates a new temporary file in the /var/tmp/ directory with a random name. -> mktemp -p /var/tmp/ -t
Creates a new temporary file with test- prefix and a unique suffix. -> mktemp test-XXXX
Creates a new temporary directory with testdir- prefix and a unique suffix. -> mktemp -d /tmp/testdir-XXXX
Creates a new temporary file with a unique name and displays its name without creating it. -> mktemp -u /tmp/tmp.XXXXXXXXXX
Creates a new temporary file with backup prefix and .bak suffix. -> mktemp --suffix=.bak backup
Creates a new temporary directory in the /mnt/data-dir/ directory. -> mktemp -d --tmpdir=/mnt/data-dir/
Creates a new temporary directory with tempdir- prefix and a unique suffix in the ~/test/ directory. -> mktemp -d -p ~/test/ tempdir-XXXX
Creates a new temporary file with archive- prefix and a unique suffix with .tar.gz extension in the /tmp/ directory. -> mktemp /tmp/archive-XXXXXX.tar.gz
Creates a new temporary file in the system temporary directory with a random name and .log suffix. -> mktemp -t --suffix=.log
Creates a new temporary file with backup- prefix and a unique suffix in the ~/test/backup/ directory. -> mktemp -p ~/test/backup/ backup-XXXXXX
Creates a new temporary file with backup prefix and .bak suffix and displays the file name without creating it. -> mktemp -u --suffix=.bak backup
Creates a new temporary directory in the system temporary directory with a random name. -> mktemp -d -t
"Creates a new temporary file with progname_ prefix, a unique suffix and displays the file name without creating it in the /var/tmp/ directory." -> mktemp -p /var/tmp/ -u progname_XXXXXXXXXX
Creates a new temporary directory with newdir- prefix and a unique suffix in the /tmp/ directory. -> mktemp -p /tmp/newdir-XXXX -d
Creates a new temporary directory in the current directory with a random name. -> mktemp --directory
Creates a new temporary directory in the /var/tmp/ directory with a random name. -> mktemp -t -d /var/tmp/
Creates a new temporary directory in the /tmp/ directory with a random name. -> mktemp -p /tmp/ -t -d
Creates a new temporary directory in the current directory with _temp suffix. -> mktemp --suffix=_temp --directory
Creates a new temporary file with temp_ prefix and a unique suffix and suppresses output messages in the ~/test/ directory. -> mktemp -q -p ~/test/ -t temp_XXXXXX
Creates a new temporary directory with archive- prefix and a unique suffix in the /mnt/dir/ directory. -> mktemp --tmpdir=/mnt/dir/ -d -t archive-XXXXXX
Creates a new temporary file with a unique name and displays its name without creating it in the /mnt/ directory. -> mktemp -u -t /mnt/data.XXXXXXXXXX
Creates a new temporary file with test- prefix and a unique suffix in the /mnt/tmp/ directory. -> mktemp test-XXXXX --tmpdir=/mnt/tmp/
"Creates a new temporary file with testfile prefix, a unique suffix and displays the file name without creating it in the /var/tmp/ directory." -> mktemp -p /var/tmp/ -t -u testfileXXXXXX
Creates a new temporary directory with a random name and .txt suffix in the /mnt/tempdir/ directory. -> mktemp --suffix=.txt -t -d /mnt/tempdir/
Creates a new temporary file with back- prefix and a unique suffix and displays the file name without creating it in the /mnt/backup/ directory. -> mktemp -u --tmpdir=/mnt/backup/ back-XXXXXX
Creates a new temporary directory with test- prefix and a unique suffix with -d suffix in the /tmp/ directory. -> mktemp -d /tmp/test-XXXXX-d
Displays the file name that will be created with filename prefix and a unique suffix without creating it in the /var/tmp/ directory. -> mktemp -p /var/tmp/ --dry-run --tmpdir=/mnt/data/ filename.XXXXXX
Creates a new temporary directory in the /mnt/logs/ directory with a random name. -> mktemp -t -d --tmpdir=/mnt/logs/
Creates a new temporary file with .config_ prefix and a unique suffix and displays the file name without creating it in the /home/user/ directory. -> mktemp -p /home/user/ -u .config_XXXXXXXXXXXX
Creates a new temporary directory with tempdir- prefix and a unique suffix with .txt suffix in the /mnt/temp-data/ directory. -> mktemp --suffix=.txt -d --tmpdir=/mnt/temp-data/ tempdir-XXXXXX
Creates a new temporary directory in the system temporary directory with a random name. -> mktemp -t -d --directory
Creates a new temporary directory with a random name and _test suffix in the /tmp/ directory. -> mktemp --suffix=_test -t -d --tmpdir=/tmp/
"Creates a new temporary file with appfile prefix, .log suffix and displays the file name without creating it in the /var/tmp/ directory." -> mktemp -p /var/tmp/ -u --suffix=.log appfile
Creates a new temporary directory with a unique name and displays its name without creating it in the ~/ directory. -> mktemp -u -d ~/backup.XXXXXXXXXX
Creates a new temporary directory in the /mnt/temp/ directory with __data suffix. -> mktemp --directory --suffix=__data --tmpdir=/mnt/temp/
Creates a new temporary file with app- prefix and a unique suffix and displays the file name without creating it in the /var/tmp/ directory. -> mktemp -u -p /var/tmp/ app-XXXXXX
Creates a new temporary directory with temp prefix and .txt suffix in the ~/test/ directory with a random name. -> mktemp --suffix=.txt -p ~/test/ -d -t temp
Creates a new temporary directory in the /mnt/ directory with a random name. -> mktemp -t -d -p /mnt/
Creates a new temporary directory in the current directory with _log suffix. -> mktemp -d --directory --suffix=_log
Creates a new temporary file with data_ prefix and a unique suffix and displays the file name without creating it in the ~/test/ directory. -> mktemp -p ~/test/ -t -u data_XXXXXXXX
Creates a new temporary file with testfile prefix and .txt suffix in the /mnt/ directory. -> mktemp -p /tmp/ --suffix=.txt --tmpdir=/mnt/ testfile
Creates a new temporary file with logfile_ prefix and a unique suffix in the /home/user/ directory. -> mktemp -t /home/user/logfile_XXXXXX
"Creates a new temporary directory with tempdata- prefix, a unique suffix and -d suffix in the /mnt/tempdata/ directory." -> mktemp --directory --tmpdir=/mnt/tempdata/ tempdata-XXXXXX-d
Creates a new temporary directory with backup prefix and a unique suffix and displays the directory name without creating it in the /mnt/backup/ directory. -> mktemp -d -u --tmpdir=/mnt/backup/ backup
Displays the file name that will be created with testdata prefix and .txt suffix without creating it in the system temporary directory. -> mktemp --suffix=.txt --dry-run -t testdata
Creates a new temporary directory with a random name and _logs suffix in the /mnt/logs/ directory. -> mktemp -d -t --suffix=_logs --tmpdir=/mnt/logs/
Creates a new temporary directory with /mnt/data_ prefix and a unique suffix and displays the directory name without creating it. -> mktemp -u -d /mnt/data_XXXXXXXXXX
Creates a new temporary file with datafile_ prefix and a unique suffix and displays the file name without creating it in the ~/test/ directory. -> mktemp -p ~/test/ -t -u datafile_XXXXXX
"Creates a new temporary file with testfile prefix, .txt suffix and displays the file name without creating it in the /mnt/ directory." -> mktemp --suffix=.txt -d -p /mnt/ -u testfile
"Creates a new temporary directory with backup_ prefix, a unique suffix and -d suffix in the /mnt/ directory." -> mktemp -d -t -p /mnt/ backup_XXXXXXXXXX-d
Creates a new temporary directory with a random name and _logs suffix in the /mnt/logs/ directory. -> mktemp --directory --tmpdir=/mnt/logs/ --suffix=_logs
Creates a new temporary file with data prefix and _data suffix in the ~/test/ directory with a random name. -> mktemp -p ~/test/ -t --suffix=_data data
Creates a new temporary directory with backupdir_ prefix and a unique suffix and displays the directory name without creating it in the /mnt/ directory. -> mktemp -p /mnt/ -u -t backupdir_XXXXXX
Creates a new temporary directory with tempdir_ prefix and a unique suffix in the /mnt/data/ directory with a random name. -> mktemp --tmpdir=/mnt/data/ -d -t tempdir_XXXXXX
Creates a new temporary directory with /mnt/backup_ prefix and a unique suffix and displays the directory name without creating it. -> mktemp -u -d /mnt/backup_XXXXXXXXXX
Creates a new temporary file with a random name and __logs suffix in the /mnt/ directory. -> mktemp -t --suffix=__logs --tmpdir=/mnt/
Displays the file name that will be created with logs_ prefix and a unique suffix without creating it in the /mnt/logs/ directory. -> mktemp -p /mnt/logs/ --dry-run --tmpdir=/mnt/ logs_XXXXXX
Creates a new temporary directory with a random name and __data suffix in the /tmp/ directory. -> mktemp -d -t -p /tmp/ --suffix=__data
Creates a new temporary file with log_ prefix and a unique suffix and displays the file name without creating it in the ~/test/ directory. -> mktemp -p ~/test/ -u -t log_XXXXXXXXXX
"Creates a new temporary directory with backupdata- prefix, a unique suffix and -d suffix in the /mnt/datafiles/ directory." -> mktemp -d -t -p /mnt/datafiles/ backupdata-XXXXXXXXXX-d
Creates a new temporary directory with backup__ prefix and a random name in the /mnt/ directory. -> mktemp --directory -t -p /mnt/ backup__
Creates a new temporary file with datafile prefix and _logs suffix in the /mnt/logs/ directory with a random name. -> mktemp --suffix=_logs --tmpdir=/mnt/logs/ -t datafile
Creates a new temporary file with app_ prefix and a unique suffix and displays the file name without creating it in the ~/test-dir/ directory. -> mktemp -p ~/test-dir/ -u -t app_XXXXXXXXXX
Displays the directory name that will be created with a random name without creating it in the /mnt/data/ directory. -> mktemp --tmpdir=/mnt/data/ --dry-run --directory
Creates a new temporary directory with datafiles prefix and __data suffix in the /mnt/ directory. -> mktemp -d -t -p /mnt/ --suffix=__data datafiles
Displays the file name that will be created with testlog prefix and _log suffix without creating it in the /mnt/ directory. -> mktemp --suffix=_log --tmpdir=/mnt/ --dry-run testlog
Displays the directory name that will be created with temp prefix and _data suffix without creating it in the ~/test/ directory. -> mktemp -p ~/test/ --directory --dry-run --suffix=_data temp
Creates a new temporary directory with backupdata_ prefix and a unique suffix in the /mnt/datafiles/ directory with a random name. -> mktemp -d -t -p /mnt/datafiles/ backupdata_XXXXXXXXXX
Creates a new temporary directory with applog_ prefix and a unique suffix and displays the directory name without creating it in the /mnt/logs/ directory. -> mktemp -p /mnt/logs/ -t -d -u applog_XXXXXXXXXX
Creates a new temporary directory with testdir- prefix and a unique suffix in the /mnt/datafiles/ directory with a random name. -> mktemp --directory --tmpdir=/mnt/datafiles/ -t testdir-XXXXXX
Creates a new temporary file with appfile prefix and _app suffix and displays the file name without creating it in the ~/test/ directory. -> mktemp -p ~/test/ -t -u --suffix=_app appfile
Creates a new temporary file with backup prefix and a random name in the /mnt/datafiles/ directory. -> mktemp -t -p /mnt/datafiles/ backup
Displays the file name that will be created with test prefix and _testfile suffix without creating it in the /mnt/ directory. -> mktemp --suffix=_testfile --dry-run --tmpdir=/mnt/ test
Creates a new temporary directory with logs prefix and _logs suffix in the /mnt/ directory with a random name. -> mktemp -d -t -p /mnt/ --suffix=_logs logs
"Creates a new temporary directory with backupdir_ prefix, a unique suffix and -d suffix and displays the directory name without creating it in the /mnt/datafiles/ directory." -> mktemp -p /mnt/datafiles/ -t -d -u backupdir_XXXXXX-d
Displays the directory name that will be created with tmpfile prefix and _log suffix without creating it in the /mnt/ directory. -> mktemp --suffix=_log --directory --tmpdir=/mnt/ --dry-run tmpfile
Creates a new temporary file with data_ prefix and a unique suffix and displays the file name without creating it in the /mnt/ directory. -> mktemp -u -t -p /mnt/ data_XXXXXXXXXX
Creates a new temporary directory with app prefix and a unique suffix and displays the directory name without creating it in the ~/test-dir/ directory. -> mktemp -p ~/test-dir/ -d -t -u app/
Creates a new temporary file with backup_ prefix and a unique suffix in the /mnt/logs/ directory with a random name. -> mktemp -t -p /mnt/logs/ backup_XXXXXXXXXX
Creates a new temporary directory with backup prefix and _backup suffix in the /mnt/datafiles/ directory with a random name. -> mktemp --directory --tmpdir=/mnt/datafiles/ --suffix=_backup backup
Creates a new temporary directory with applog prefix and a unique suffix and displays the directory name without creating it in the /mnt/logs/ directory. -> mktemp -p /mnt/logs/ -d -t -u applog/
"Creates a new temporary file with /mnt/datafile- prefix, a unique suffix and _data suffix in the /mnt/ directory." -> mktemp --suffix=_data --tmpdir=/mnt/ -t /mnt/datafile-XXXXX
"Creates a new temporary directory with backupdata- prefix, a unique suffix and a random name in the /mnt/datafiles/ directory." -> mktemp -d -t -p /mnt/datafiles/ --directory -u backupdata-XXXXXX
Rename file1 as file2. -> mv file1 file2
Move file1 to folder. -> mv file1 folder
Rename folder1 as folder2. -> mv folder1 folder2
Move file1 from folder1 to folder2. -> mv folder1/file1 folder2
Move all files and directories from folder to folder2. -> mv folder/* folder2
Merge folder1 into folder2. -> mv -T folder1 folder2
Create a backup of file when overwriting in folder. -> mv -b file folder
Force overwrite of file in folder. -> mv -f file folder
Prompt before overwrite of file in folder. -> mv -i file folder
Do not overwrite existing file in folder. -> mv -n file folder
Update file only when source is newer than destination in folder. -> mv -u file folder
Display verbose output of file moved to folder. -> mv -v file folder
Create a numbered backup of file when overwriting in folder. -> mv --backup=numbered file folder
Create a timestamped backup of file when overwriting in folder. -> mv --backup=t file folder
Do not overwrite existing file in folder. -> mv --no-clobber file folder
Force overwrite of file in folder. -> mv --force file folder
Prompt before overwrite of file in folder. -> mv --interactive file folder
Update file only when source is newer than destination in folder. -> mv --update file folder
Display verbose output of file moved to folder. -> mv --verbose file folder
Create a backup of file with a specified suffix when overwriting in folder. -> mv -S suffix file folder
Move file1 and file2 to folder. -> mv -t folder file1 file2
Do not overwrite existing file in folder. -> mv -c file folder
Preserves original attributes of file in folder. -> mv -p file folder
Move all files in current directory to folder. -> mv * folder
Move all PNG files in current directory to folder. -> mv \*.png folder
Move file to folder with fully qualified path. -> mv /path/to/file folder
Move file to folder in home directory. -> mv ~/file folder
Move file to folder in home directory. -> mv file ~/folder
Rename folder1 as folder2 and all its contents. -> mv -R folder1 folder2
Move all files and directories from folder to folder2 with prompt before overwrite. -> mv -i folder/* folder2
Create backups of file1 and file2 with a specified suffix when overwriting. -> mv -S suffix file1 file2
Update file in folder2 only when source is newer. -> mv -u folder1/file folder2
Display verbose output of file moved from folder1 to folder2. -> mv -v folder1/file folder2
Create backups of all files and directories being overwritten in folder2. -> mv -b folder1/* folder2
Do not overwrite existing file in folder2. -> mv -n folder1/file folder2
Move all files and directories from folder1 to folder2. -> mv -t folder2 folder1/*
Move all files and directories from folder1 to folder2 and retain their original names. -> mv -R folder1/* folder2
Update files and directories in folder2 only when source is newer. -> mv -u folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2. -> mv -v folder1/* folder2
Prompt before overwriting existing files and directories in folder2. -> mv -i folder1/* folder2
Create backups of all files and directories being overwritten and retain their original names. -> mv -b -t folder2 folder1/*
Display verbose output of all files and directories moved from folder1 to folder2 and retain their original names. -> mv -v -R folder1/* folder2
Update files and directories in folder2 only when source is newer with prompt before overwrite. -> mv -u -i folder1/* folder2
Create backups of all files and directories being overwritten with a specified suffix. -> mv -S suffix -b folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 and retain their original names. -> mv -v -t folder2 folder1/*
Update files and directories in folder2 only when source is newer and create backups of all overwritten files. -> mv -u -b folder1/* folder2
Prompt before overwriting existing files and directories in folder2 and retain their original names. -> mv -i -t folder2 folder1/*
Do not overwrite existing files and directories in folder2 and retain their original names. -> mv -n -R folder1/* folder2
Force overwrite existing files and directories in folder2 and retain their original names. -> mv -f -t folder2 folder1/*
Create backups of all files and directories being overwritten with a specified suffix and retain their original names. -> mv -S suffix -t folder2 folder1/*
Preserves original attributes of all files and directories moved from folder1 to folder2. -> mv -p -R folder1/* folder2
Update file in folder2 only when source is newer and create backups of all overwritten files. -> mv -b -u folder1/file folder2
Display verbose output of file moved from folder1 to folder2 without overwriting an existing file. -> mv -v -n folder1/file folder2
Prompt before overwriting and create backups of all overwritten files in folder2. -> mv -i -b folder1/* folder2
Move all files and directories from folder1 to folder2 and retain their original names. -> mv -t folder2/ folder1/*
Display verbose output of file moved from folder1 to folder2 and force overwrite of existing file. -> mv -v -f folder1/file folder2
Update files and directories in folder2 only when source is newer and retain their original names. -> mv -u -t folder2 folder1/*
Prompt before overwriting existing files and directories with a specified backup suffix in folder2. -> mv -S suffix -i folder1/* folder2
Rename all files and directories in folder1 as folder2 and create backups of all overwritten files. -> mv -R -b folder1/* folder2
Display verbose output of file moved from folder1 to folder2 and create backups of all overwritten files with a specified suffix. -> mv -v -S suffix folder1/file folder2
Prompt before overwriting existing files and directories in folder2 and retain their original names. -> mv -i -t folder2/ folder1/*
Force overwrite existing files and directories in folder2 and retain their original names. -> mv -f -R folder1/* folder2
Preserves original attributes of all files and directories moved from folder1 to folder2 with prompt before overwrite. -> mv -p -i -t folder2/ folder1/*
Update files and directories in folder2 only when source is newer with prompt before overwrite and retain their original names. -> mv -u -t -i folder1/* folder2
"Do not overwrite existing files and directories in folder2 and retain their original names, but create backups of all overwritten files with a specified suffix." -> mv -S suffix -n -R folder1/* folder2
Force overwrite existing files and directories in folder2 with a specified suffix and retain their original names. -> mv -S suffix -f -t folder2 folder1/*
Display verbose output of all files and directories moved from folder1 to folder2 with backups of all overwritten files with a specified suffix and retain their original names. -> mv -v -S suffix -t folder2/ folder1/*
Update files and directories in folder2 only when source is newer with prompt before overwrite and create backups of all overwritten files. -> mv -b -u -i folder1/* folder2
Do not overwrite existing files and directories in folder2 and retain their original names. -> mv -n -t folder2/ folder1/*
Do not overwrite existing files and directories in folder2 with backups of all overwritten files with a specified suffix and retain their original names. -> mv -S suffix -n -t folder2 folder1/*
Display verbose output of all files and directories moved from folder1 to folder2 without overwriting existing files and directories in folder2. -> mv -v -n -R folder1/* folder2
Preserves original attributes of all files and directories moved from folder1 to folder2 and display verbose output while retaining their original names. -> mv -p -v -R folder1/* folder2
Do not overwrite existing files and directories in folder2 with prompt before overwrite and retain their original names. -> mv -n -i -t folder2/ folder1/*
Update file in folder2 only when source is newer and display verbose output without overwriting an existing file. -> mv -u -v -n folder1/file folder2
Force overwrite existing files and directories and create backups of all overwritten files in folder2. -> mv -f -b folder1/* folder2
Prompt before overwriting and create backups of all files and directories with a specified suffix in folder2. -> mv -S suffix -i -R folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 with backups of all overwritten files with a specified suffix and prompt before overwrite. -> mv -v -S suffix -i folder1/* folder2
Do not overwrite existing files and directories in folder2 and update files and directories only when source is newer. -> mv -n -u folder1/* folder2
Move all files and directories from folder1 to folder2 and retain their original names with prompt before overwrite. -> mv -t -i -R folder1/* folder2
"Update files and directories in folder2 only when source is newer and do not overwrite existing files and directories, but retain their original names." -> mv -u -t -n folder1/* folder2
Force overwrite existing files and directories with a specified backup suffix in folder2. -> mv -S suffix -f -R folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 without overwriting existing files and directories in folder2 with prompt before overwrite. -> mv -v -n -t folder2 folder1/*
Do not overwrite existing files and directories in folder2 with backups of all files and directories with a specified suffix in folder1 and prompt before overwrite. -> mv -S suffix -i -n folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 while preserving their original attributes and retaining their original names. -> mv -v -p -R folder1/* folder2
Do not overwrite existing files and directories in folder2 with prompt before overwrite and retain their original names. -> mv -n -t -i folder1/* folder2
Force overwrite existing files and directories in folder2 and display verbose output while retaining their original names. -> mv -f -v -t folder2 folder1/*
Do not overwrite existing files and directories in folder2 with backups of all files and directories with a specified suffix in folder1 and prompt before overwrite. -> mv -S suffix -n -i folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 with force overwrite and prompt before overwrite. -> mv -v -f -i folder1/* folder2
Update file in folder2 only when source is newer and create backups of all overwritten files with a specified suffix. -> mv -S suffix -u folder1/file folder2
Display verbose output of all files and directories moved from folder1 to folder2 with backups of all overwritten files with a specified suffix and retain their original names. -> mv -v -S suffix -t folder2 folder1/*
Update files and directories in folder2 only when source is newer with prompt before overwrite and retain their original names. -> mv -i -u -t folder2 folder1/*
Create backups of all files and directories being overwritten with prompt before overwrite and retain their original names in folder2. -> mv -b -t -i folder1/* folder2
Display verbose output of file moved from folder1 to folder2 with force overwrite and create backups of all overwritten files with a specified suffix. -> mv -v -f -S suffix folder1/file folder2
Update file in folder2 only when source is newer and do not overwrite existing file but retain its original name. -> mv -u -t -n folder1/file folder2
Force overwrite existing files and directories in folder2 with prompt before overwrite and retain their original names. -> mv -f -i -R folder1/* folder2
Move all files and directories from folder1 to folder2 with backups of all files and directories with a specified suffix and prompt before overwrite. -> mv -S suffix -t -i folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 without overwriting existing files and directories in folder2 but create backups of all overwritten files with a specified suffix. -> mv -v -S suffix -n folder1/* folder2
"Do not overwrite existing files and directories in folder2 while preserving the original attributes of all files and directories moved from folder1 to folder2, and retain their original names." -> mv -n -p -R folder1/* folder2
"Update files and directories in folder2 only when source is newer with prompt before overwrite and do not overwrite existing files and directories, but retain their original names." -> mv -i -u -n folder1/* folder2
Display verbose output of all files and directories moved from folder1 to folder2 with update of files and directories only when source is newer with retention of their original names. -> mv -v -u -t folder2/ folder1/*
Ping Google.com 5 times -> ping google.com -c 5
Ping server.local indefinitely -> ping server.local
Ping 8.8.8.8 through eth0 interface -> ping 8.8.8.8 -I eth0
Ping 192.168.0.1 10 times -> ping -n 10 192.168.0.1
Ping server.local with 1000 byte packet size -> ping -s 1000 server.local
Quiet mode: don't display statistics -> ping -q google.com
Ping 192.168.1.1 every 2 seconds -> ping -i 2 192.168.1.1
Ping 192.168.1.1 2 times -> ping -c 2 192.168.1.1
Don't fragment packet -> ping -M do google.com
Ping Google.com with 10 second deadline -> ping -w 10 google.com
Ping server.local with 50 byte packet size -> ping -s 50 server.local
Record route (IPv6) -> ping -R google.com
Verbose mode: show packets -> ping -v server.local
Ping local machine 10 times -> ping -n 10 localhost
Ping example.com 5 times -> ping -c 5 www.example.com
Ping server.local through eth0 interface -> ping -I eth0 server.local
Ping Google.com forever -> ping -t google.com
Debug mode: show packets in hexdump format -> ping -D server.local
Flood ping to 192.168.1.1 -> ping -f 192.168.1.1
Set source IP to 192.168.0.2 and ping Google.com -> ping -S 192.168.0.2 google.com
Ping Google.com with 1 second timeout -> ping -W 1 google.com
Ping local machine 3 times -> ping -c 3 localhost
Ping server.local with 50 byte packet size -> ping -l 50 server.local
Ping Google.com and retransmit 5 times -> ping -r 5 google.com
Audible mode: beep on successful ping -> ping -A server.local
Ping 192.168.0.1 with 10 byte data size -> ping -m 10 192.168.0.1
Flood ping with 1000 byte packet size -> ping -f -s 1000 server.local
Broadcast ping on local network -> ping -b 192.168.0.255
Ping 192.168.1.1 and resolve hostname -> ping -n -a 192.168.1.1
Ping server.local with 2 packets of 1000 byte size -> ping -c 2 -s 1000 server.local
Ping Google.com through eth1 interface and 3 times -> ping -I eth1 -c 3 google.com
Ping 8.8.8.8 3 times and display only summary -> ping -q -c 3 8.8.8.8
"Ping 192.168.0.1 every 1 second, 10 times" -> ping -i 1 -c 10 192.168.0.1
Set want fragmentation bit -> ping -M want google.com
Ping 192.168.0.1 with 5 second timeout -> ping -w 5 192.168.0.1
Ping server.local with 3 packets of 50 byte size -> ping -c 3 -s 50 server.local
Record route to Google.com (one-hop) -> ping -R -c 1 google.com
Ping server.local with 500 byte packet size -> ping -s 500 server.local
Ping server.local and show packet in hexdump format -> ping -D -c 1 server.local
Flood ping with 50 byte packet size -> ping -f -s 50 192.168.1.1
Ping Google.com with source IP 192.168.0.2 and 2 packets -> ping -S 192.168.0.2 -c 2 google.com
Ping Google.com with 2 second timeout and 5 times -> ping -W 2 -c 5 google.com
Ping server.local indefinitely and 3 times -> ping -t -c 3 server.local
Record route to Google.com (5 hops) -> ping -R -c 5 google.com
Ping local machine 5 times and display only summary -> ping -q -c 5 localhost
"Ping 192.168.1.1 every 5 seconds, 5 times" -> ping -i 5 -c 5 192.168.1.1
Set don't fragment bit -> ping -M dont google.com
Ping Google.com with 3 second timeout and 2 times -> ping -w 3 -c 2 google.com
Ping server.local with 2 packets of 500 byte size -> ping -c 2 -s 500 server.local
Record route to server.local (3 hops) -> ping -R -c 3 server.local
Ping local machine with 1 second timeout and 3 times -> ping -W 1 -c 3 localhost
Ping 192.168.0.1 and display retransmission count -> ping -r -c 5 192.168.0.1
Ping Google.com with 50 byte data size -> ping -m 50 google.com
Flood ping to server.local with 500 byte packet size -> ping -f -s 500 server.local
Ping 192.168.0.1 through eth0 interface and 5 times -> ping -I eth0 -c 5 192.168.0.1
Ping 192.168.1.1 5 times and display only summary -> ping -q -c 5 192.168.1.1
Ping Google.com every 10 seconds and 2 times -> ping -i 10 -c 2 google.com
Ping server.local with 100 byte packet size -> ping -s 100 server.local
Ping Google.com twice and show packet in hexdump format -> ping -D -c 2 google.com
Flood ping with 100 byte packet size -> ping -f -s 100 192.168.1.1
Ping server.local with source IP 192.168.0.2 and 3 packets -> ping -S 192.168.0.2 -c 3 server.local
Ping Google.com with 3 second timeout and 3 times -> ping -W 3 -c 3 google.com
Ping server.local indefinitely and 5 times -> ping -t -c 5 server.local
Record route to Google.com (2 hops) -> ping -R -c 2 google.com
Ping local machine 2 times and display only summary -> ping -q -c 2 localhost
"Ping 192.168.1.1 every 2 seconds, 10 times" -> ping -i 2 -c 10 192.168.1.1
Set want fragmentation bit -> ping -M wantfrag google.com
Ping 192.168.0.1 with 2 second timeout and 5 times -> ping -w 2 -c 5 192.168.0.1
Ping server.local with 2 packets of 100 byte size -> ping -c 2 -s 100 server.local
Record route to server.local (one-hop) -> ping -R -c 1 server.local
Ping local machine with 1 second timeout and 2 times -> ping -W 1 -c 2 localhost
Ping 192.168.0.1 and display retransmission count -> ping -r -c 2 192.168.0.1
Ping Google.com with 100 byte data size -> ping -m 100 google.com
Flood ping to server.local with 1000 byte packet size -> ping -f -s 1000 server.local
Ping 192.168.0.1 through eth0 interface and 3 times -> ping -I eth0 -c 3 192.168.0.1
Ping 192.168.1.1 2 times and display only summary -> ping -q -c 2 192.168.1.1
Ping Google.com every 5 seconds and 3 times -> ping -i 5 -c 3 google.com
Ping server.local with 200 byte packet size -> ping -s 200 server.local
Ping local machine and show packet in hexdump format -> ping -D -c 1 localhost
Flood ping with 200 byte packet size -> ping -f -s 200 192.168.1.1
Ping Google.com with source IP 192.168.0.2 and 2 packets -> ping -S 192.168.0.2 -c 2 google.com
Ping Google.com with 2 second timeout and 2 times -> ping -W 2 -c 2 google.com
Ping server.local indefinitely and 2 times -> ping -t -c 2 server.local
Record route to Google.com (4 hops) -> ping -R -c 4 google.com
Ping local machine 4 times and display only summary -> ping -q -c 4 localhost
"Ping 192.168.0.1 every 4 seconds, 4 times" -> ping -i 4 -c 4 192.168.0.1
Set want fragmentation bit -> ping -M wantfrag google.com
Ping Google.com with 4 second timeout and 4 times -> ping -w 4 -c 4 google.com
Ping server.local with 4 packets of 200 byte size -> ping -c 4 -s 200 server.local
Record route to server.local (2 hops) -> ping -R -c 2 server.local
Ping local machine with 1 second timeout and 1 time -> ping -W 1 -c 1 localhost
Ping 192.168.0.1 and display retransmission count -> ping -r -c 1 192.168.0.1
Ping Google.com with 200 byte data size -> ping -m 200 google.com
Flood ping to server.local with 2000 byte packet size -> ping -f -s 2000 server.local
Ping 192.168.0.1 through eth0 interface and 4 times -> ping -I eth0 -c 4 192.168.0.1
Ping 192.168.1.1 1 time and display only summary -> ping -q -c 1 192.168.1.1
Ping Google.com every 3 seconds and 2 times -> ping -i 3 -c 2 google.com
Ping server.local with 300 byte packet size -> ping -s 300 server.local
Ping Google.com thrice and show packet in hexdump format -> ping -D -c 3 google.com
Flood ping with 300 byte packet size -> ping -f -s 300 192.168.1.1
Move file1 to dir1 -> put file1 dir1
Recursively copy dir1 to dir2 -> put -r dir1 dir2
Copy file1 to /home/user/dir1 -> put file1 /home/user/dir1
Copy file1 with preserve mode -> put -p file1 dir1
Verbose copy file1 to dir1 -> put -v file1 dir1
Interactively copy file1 to dir1 -> put -i file1 dir1
Copy file1 only if it is newer than dir1 -> put -u file1 dir1
Copy file1 to dir1 with 10 seconds timeout -> put -t 10 file1 dir1
Do not overwrite existing file in dir1 -> put -n file1 dir1
Preserve file extension when copying file1 to dir1 -> put -E file1 dir1
Move all files in current directory to dir1 -> put * dir1
Preserve mode and recursively copy dir1 to dir2 -> put -pR dir1 dir2
Force copy of file1 to dir1 -> put -f file1 dir1
Copy file1 to dir1 with new name file2 -> put file1 dir1/file2
Copy file1 and strip leading directory components -> put -s file1 dir1
Copy file1 with executable mode to dir1 -> put -x file1 dir1
Copy file1 and make a backup of existing file in dir1 -> put -b file1 dir1
Follow symbolic links when copying file1 to dir1 -> put -H file1 dir1
Copy file1 with context to dir1 -> put -Z file1 dir1
Copy file1 and keep source file ownership to dir1 -> put -U file1 dir1
Copy file1 only if it differs from dir1 -> put -c file1 dir1
Copy file1 and preserve the timestamp of the source file -> put -e file1 dir1
Copy file1 with compression level 9 to dir1 -> put -z 9 file1 dir1
Move dir1 to dir2 -> put dir1 dir2
Copy all files in dir1 to dir2 -> put -A dir1 dir2
Copy file1 with sparse support to dir1 -> put -S file1 dir1
Copy file1 with permission mask to dir1 -> put -m file1 dir1
Copy file1 with date preservation to dir1 -> put -D file1 dir1
Follow symbolic links and copy file1 to dir1 -> put -L file1 dir1
Copy file1 and preserve group ownership to dir1 -> put -g file1 dir1
Do not overwrite existing file and show verbose output when copying file1 to dir1 -> put -n -v file1 dir1
Recursively copy dir1 to dir2 with verbose output -> put -r -v dir1 dir2
Preserve mode and show verbose output when copying file1 to dir1 -> put -p -v file1 dir1
Copy file1 only if it is newer than dir1 and show output only when copying differs -> put -u -c file1 dir1
Show verbose output and timeout in 5 seconds when copying file1 to dir1 -> put -v -t 5 file1 dir1
Preserve mode and recursively copy dir1 to dir2 with verbose output -> put -pR -v dir1 dir2
Interactively and show verbose output when copying file1 to dir1 -> put -i -v file1 dir1
Force copy and show verbose output when copying file1 to dir1 -> put -f -v file1 dir1
Copy file1 and strip leading directory components with verbose output -> put -s -v file1 dir1
Copy file1 with executable mode and show verbose output to dir1 -> put -x -v file1 dir1
Copy file1 and make a backup of existing file in dir1 with verbose output -> put -b -v file1 dir1
Follow symbolic links and show verbose output when copying file1 to dir1 -> put -H -v file1 dir1
Copy file1 with context and show verbose output to dir1 -> put -Z -v file1 dir1
Copy file1 and keep source file ownership with verbose output to dir1 -> put -U -v file1 dir1
Copy file1 only if it differs from dir1 with verbose output -> put -c -v file1 dir1
Copy file1 and preserve the timestamp of the source file with verbose output -> put -e -v file1 dir1
Copy file1 with compression level 9 and show verbose output to dir1 -> put -z 9 -v file1 dir1
Copy all files in dir1 with verbose output to dir2 -> put -A -v dir1 dir2
Copy file1 with sparse support and show verbose output to dir1 -> put -S -v file1 dir1
Copy file1 with permission mask and show verbose output to dir1 -> put -m -v file1 dir1
Copy file1 with date preservation and show verbose output to dir1 -> put -D -v file1 dir1
Follow symbolic links and show verbose output when copying file1 to dir1 -> put -L -v file1 dir1
Copy file1 and preserve group ownership with verbose output to dir1 -> put -g -v file1 dir1
Do not overwrite existing file and copy only if it is newer than dir1 -> put -n -u file1 dir1
Recursively copy dir1 to dir2 and force copy -> put -r -f dir1 dir2
Preserve mode and interactively copy file1 to dir1 -> put -p -i file1 dir1
Timeout in 5 seconds and copy file1 only if it differs from dir1 -> put -t 5 -c file1 dir1
Copy file1 and strip leading directory components with executable mode to dir1 -> put -s -x file1 dir1
Copy file1 and make a backup of existing file in dir1 and follow symbolic links -> put -b -H file1 dir1
Copy file1 and keep source file ownership and force copy to dir1 -> put -U -f file1 dir1
Copy file1 only if it differs from dir1 and preserve the timestamp of the source file -> put -c -e file1 dir1
Copy dir1 to dir2 with compression level 9 and preserve mode -> put -z 9 -pR dir1 dir2
Copy all files in dir1 to dir2 and copy only if it is newer than dir2 -> put -A -u dir1 dir2
Copy file1 with sparse support and executable mode to dir1 -> put -S -x file1 dir1
Copy file1 with permission mask and date preservation to dir1 -> put -m -D file1 dir1
Follow symbolic links and make a backup of existing file in dir1 when copying file1 -> put -L -b file1 dir1
Copy file1 and preserve group ownership only if it differs from dir1 -> put -g -c file1 dir1
Do not overwrite existing file and copy file1 with compression level 9 to dir1 -> put -n -z 9 file1 dir1
Recursively copy dir1 to dir2 with 5 seconds timeout -> put -r -t 5 dir1 dir2
Copy file1 only if it is newer than dir1 and force copy to dir1 -> put -u -f file1 dir1
Preserve mode and copy file1 without leading directory components to dir1 -> put -p -s file1 dir1
Follow symbolic links and preserve the timestamp of the source file when copying file1 to dir1 -> put -H -e file1 dir1
Copy file1 only if it differs from dir1 and force copy to dir1 -> put -c -f file1 dir1
Copy file1 with executable mode and compression level 9 to dir1 -> put -x -z 9 file1 dir1
Copy file1 and preserve group ownership only if it is newer than dir1 -> put -g -u file1 dir1
Copy dir1 to dir2 with preserve mode and 5 seconds timeout -> put -t 5 -pR dir1 dir2
Copy file1 with date preservation and make a backup of existing file in dir1 -> put -D -b file1 dir1
Verbose copy with preserve mode of dir1 to dir2 -> put -v -pR dir1 dir2
Interactively copy file1 only if it is newer than dir1 -> put -i -u file1 dir1
Copy file1 with compression level 9 and preserve mode to dir1 -> put -z 9 -p file1 dir1
Copy file1 and preserve the timestamp of the source file and do not overwrite existing file in dir1 -> put -e -n file1 dir1
Timeout in 5 seconds and copy file1 only if it is newer than dir1 -> put -t 5 -u file1 dir1
Follow symbolic links and copy file1 to dir1 without overwriting existing file -> put -H -n file1 dir1
Copy file1 with executable mode and preserve mode to dir1 -> put -x -p file1 dir1
Copy file1 and preserve group ownership and strip leading directory components to dir1 -> put -g -s file1 dir1
Copy file1 only if it differs from dir1 with compression level 9 to dir1 -> put -c -z 9 file1 dir1
Copy file1 with sparse support and make a backup of existing file in dir1 -> put -S -b file1 dir1
Timeout in 5 seconds and force copy file1 to dir1 -> put -t 5 -f file1 dir1
Verbose copy all files in dir1 to dir2 -> put -v -A dir1 dir2
Recursively copy dir1 to dir2 without overwriting existing files in dir2 -> put -r -n dir1 dir2
Preserve mode and make a backup of existing file in dir1 when copying file1 -> put -p -b file1 dir1
Copy file1 only if it is newer than dir1 with compression level 9 to dir1 -> put -u -z 9 file1 dir1
Preserve mode and copy file1 with sparse support to dir1 -> put -p -S file1 dir1
Follow symbolic links and copy file1 only if it differs from dir1 -> put -H -c file1 dir1
Timeout in 5 seconds and copy file1 only if it differs from dir1 with verbose output -> put -t 5 -c -v file1 dir1
Copy file1 and preserve the timestamp of the source file with sparse support to dir1 -> put -e -S file1 dir1
Do not overwrite existing files and recursively copy dir1 to dir2 -> put -n -r dir1 dir2
Copy file1 with compression level 9 to dir1 and make a backup of existing file in dir1 -> put -z 9 -b file1 dir1
Preserve mode and do not overwrite existing file in dir1 when copying file1 -> put -p -n file1 dir1
Copy file1 only if it is newer than dir1 with compression level 9 and copy only if it differs from dir1. -> put -u -z 9 -c file1 dir1
Print current directory. -> pwd
Print symbolic path. -> pwd -L
Print physical path. -> pwd -P
Print directory path. -> pwd /home/user
Print directory path. -> pwd /home/user/Downloads
Print directory path. -> pwd /home/user/Documents
Print directory path. -> pwd /home/user/Pictures
Print directory path. -> pwd /home/user/Public
Print directory path. -> pwd /home/user/Templates
Print directory path. -> pwd /home/user/Videos
Print directory path. -> pwd /etc
Print directory path. -> pwd /bin
Print directory path. -> pwd /sbin
Print directory path. -> pwd /usr
Print directory path. -> pwd /var
Print directory path. -> pwd /tmp
Print directory path. -> pwd /dev
Print directory path. -> pwd /sys
Print directory path. -> pwd /proc
Print directory path. -> pwd /root
Print directory path. -> pwd /mnt
Print directory path. -> pwd /media
Print directory path. -> pwd /opt
Print directory path. -> pwd /usr/bin
Print directory path. -> pwd /usr/sbin
Print directory path. -> pwd /usr/local/bin
Print directory path. -> pwd /usr/local/sbin
Print directory path. -> pwd /usr/share
Print directory path. -> pwd /usr/lib
Print directory path. -> pwd /usr/include
Print directory path. -> pwd /usr/src
Print directory path. -> pwd /usr/local
Print directory path. -> pwd /usr/share/doc
Print directory path. -> pwd /usr/share/man
Print directory path. -> pwd /usr/share/info
Print directory path. -> pwd /usr/share/locale
Print directory path. -> pwd /usr/share/fonts
Print directory path. -> pwd /usr/share/themes
Print directory path. -> pwd /usr/share/icons
Print directory path. -> pwd /usr/share/backgrounds
Print directory path. -> pwd /usr/share/sounds
Print directory path. -> pwd /usr/share/applications
Print directory path. -> pwd /usr/share/templates
Print directory path. -> pwd /usr/share/videos
Print directory path. -> pwd /usr/share/zoneinfo
Print directory path. -> pwd /usr/share/mime
Print directory path. -> pwd /usr/share/gnome-shell
Print directory path. -> pwd /usr/share/gnome
Print directory path. -> pwd /usr/share/kde4
Print directory path. -> pwd /usr/share/backgrounds/gnome
Print directory path. -> pwd /usr/share/backgrounds/kde4
Print directory path. -> pwd /usr/share/icons/gnome
Print directory path. -> pwd /usr/share/icons/kde4
Print directory path. -> pwd /usr/share/themes/gnome
Print directory path. -> pwd /usr/share/themes/kde4
Print directory path. -> pwd /usr/include/linux
Print directory path. -> pwd /usr/include/openssl
Print directory path. -> pwd /usr/include/python2.7
Print directory path. -> pwd /usr/include/netinet
Print directory path. -> pwd /usr/include/SDL2
Print directory path. -> pwd /usr/share/applications/mimeinfo.cache
Print directory path. -> pwd /usr/bin/curl
Print directory path. -> pwd /usr/bin/chromium-browser
Print directory path. -> pwd /usr/bin/firefox
Print directory path. -> pwd /usr/bin/gedit
Print directory path. -> pwd /usr/bin/gimp
Print directory path. -> pwd /usr/bin/git
Print directory path. -> pwd /usr/bin/java
Print directory path. -> pwd /usr/bin/gcc
Print directory path. -> pwd /usr/bin/clang
Print directory path. -> pwd /usr/share/locale/en
Print directory path. -> pwd /usr/share/locale/zh_CN
Print directory path. -> pwd /usr/share/locale/de
Print directory path. -> pwd /usr/share/locale/es
Print directory path. -> pwd /usr/share/locale/fr
Print directory path. -> pwd /usr/share/locale/ja
Print directory path. -> pwd /usr/share/locale/ko
Print directory path. -> pwd /usr/share/locale/pt_BR
Print directory path. -> pwd /usr/share/locale/ru
Print directory path. -> pwd /usr/share/locale/tr
Print directory path. -> pwd /var/log
Print directory path. -> pwd /var/cache
Print directory path. -> pwd /var/lib
Print directory path. -> pwd /var/spool
Print directory path. -> pwd /var/run
Print directory path. -> pwd /var/tmp
Print directory path. -> pwd /var/backups
Print directory path. -> pwd /var/games
Print directory path. -> pwd /var/local
Print directory path. -> pwd /var/mail
Print directory path. -> pwd /var/opt
Print directory path. -> pwd /var/www
Print directory path. -> pwd /var/lib/mysql
Print directory path. -> pwd /var/log/apache2
Print directory path. -> pwd /var/log/syslog
Print directory path. -> pwd /var/cache/apt
Print directory path. -> pwd /var/cache/fontconfig
Print directory path. -> pwd /var/spool/cron/crontabs
Print directory path. -> pwd /var/run/utmp
Print directory path. -> pwd /var/run/dbus
remove a file. -> rm file.txt
remove a directory and its contents recursively. -> rm -r directory
remove a file forcefully. -> rm -f file.txt
remove a directory and its contents recursively forcefully. -> rm -rf directory
remove all files with the .txt extension. -> rm *.txt
prompt for confirmation before removing a file. -> rm -i file.txt
prompt for confirmation before removing a directory and its contents recursively. -> rm -ir directory
remove an empty directory. -> rm -d directory
display a message for each file removed. -> rm -v file.txt
display a message for each file and directory removed recursively. -> rm -rv directory
prompt for confirmation before removing more than three files at once. -> rm -I file.txt
remove a directory and its contents recursively. -> rm -R directory
remove all files starting with file and ending with .txt. -> rm file*.txt
completely remove all files and directories from the root directory (DO NOT RUN THIS COMMAND). -> rm -rf /
securely remove a file by overwriting it before deleting. -> rm -P file.txt
display the help menu for the rm command. -> rm --help
remove a file even if it is read-only. -> rm -A file.txt
forcefully remove a specific file from a directory. -> rm -f directory/file.txt
remove multiple directories and their contents recursively. -> rm -Rf directory1 directory2 directory3
remove a directory and its contents recursively. -> rm -r directory/
remove all files and directories in the Downloads folder. -> rm -r /home/user/Downloads/*
display a message for each file removed with the .txt extension. -> rm -v *.txt
remove all temporary files ending with ~. -> rm *~
remove a directory and its contents recursively from the parent directory. -> rm -rf ../directory
"remove all data sent to the null device, discarding it." -> rm /dev/null
remove all contents from multiple directories recursively. -> rm -rf directory1/* directory2/* directory3/*
remove all files and directories in the current directory and its subdirectories. -> rm -rf ./*
prompt for confirmation before removing all files in a directory. -> rm -ri directory/*
remove a directory even if it contains read-only files. -> rm -df ~/directory
remove all files with the .txt extension in the Downloads folder. -> rm -r /home/user/Downloads/*.txt
display a message for each file and directory removed recursively forcefully. -> rm -vrf directory
remove all files and directories in the Downloads folder recursively. -> rm -rf /home/user/Downloads/*
display a message for each file removed with the .txt extension. -> rm -v -- *.txt
remove multiple directories and their contents recursively forcefully. -> rm -fr directory1 directory2 directory3
remove all files and directories in the log directory. -> rm -r /var/log/*
forcefully remove a specific file in the log directory. -> rm -f /var/log/messages
display a message for each file and directory removed recursively forcefully. -> rm -rvf directory1 directory2 directory3
remove an empty directory. -> rm -d /home/user/emptydir
prompt for confirmation before removing all files with the .txt extension. -> rm -i *.txt
completely remove all files and directories from the root directory (DO NOT RUN THIS COMMAND). -> rm -fr /
remove a directory and its contents recursively forcefully. -> rm -r --force directory
remove all files and directories in a directory including hidden files. -> rm -rf directory/.
prompt for confirmation before removing all files in a directory. -> rm -i ~/directory/*
remove all files and directories in the log directory recursively forcefully. -> rm -fr /var/log/*
remove multiple empty directories. -> rm -d dir1 dir2 dir3
remove a nested directory and its contents recursively. -> rm -r -p directory1/directory2
forcefully remove all files starting with messages in the log directory. -> rm -f /var/log/messages*
completely remove all files and directories from the root directory without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -rf --no-preserve-root /
"remove all files starting with a, b or c in a directory." -> rm -r directory/[abc]*
prompt for confirmation before removing a directory and its contents recursively. -> rm -i -r directory/
remove multiple empty directories. -> rm -d /home/user/dir1 /home/user/dir2 /home/user/dir3
completely remove all files and directories from the root directory without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -fr --no-preserve-root /
remove all files with the .txt extension in a directory and its subdirectories. -> rm -r directory/**/*.txt
remove all files and directories in a three-level directory structure under the /var directory. -> rm -rf /var/*/*/*
prompt for confirmation before removing more than three files at once. -> rm -I file1.txt file2.txt file3.txt
remove a deeply nested directory and its contents recursively. -> rm -r -p directory1/directory2/directory3
remove multiple empty directories and display a message for each one. -> rm -d -v directory1 directory2 directory3
remove all files with the .txt extension in a directory. -> rm -rf directory/*.txt
remove all files in a directory except for specific ones. -> rm -rf directory/!(file1.txt|file2.txt|file3.txt)
prompt for confirmation before removing a directory and its contents recursively. -> rm -i -R directory
remove multiple empty directories forcefully. -> rm -d -rf directory1 directory2 directory3
prompt for confirmation before removing all files starting with file and ending with .txt. -> rm -ri file*.txt
display a message for each file and directory removed from the root directory recursively without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -fr -v --no-preserve-root /
forcefully remove all files with the .txt extension in a directory. -> rm -vf directory/*.txt
remove a deeply nested directory and its contents recursively and display a message for each directory. -> rm -r -p -v directory1/directory2/directory3
forcefully remove all files in a directory except for specific ones. -> rm -f -r directory/!(file1.txt|file2.txt|file3.txt)
prompt for confirmation before removing all .txt files in subdirectories of a directory. -> rm -ri directory/*/*.txt
prompt for confirmation before removing multiple empty directories. -> rm -d -ir directory1 directory2 directory3
securely remove a directory and its contents recursively by overwriting them before deleting. -> rm -r -P directory
display a message for each file and directory removed from the /data directory recursively forcefully. -> rm -rvf /data/*
forcefully remove all directories starting with directory and display a message for each one. -> rm -f -r -v directory*
prompt for confirmation before removing all .txt and .pdf files in the current directory. -> "rm -ri {*.txt,*.pdf}"
prompt for confirmation before removing multiple empty directories and display a message for each one. -> rm -d -irv directory1 directory2 directory3
remove all .tar.gz files in the backup directory from the parent directory and display a message for each one. -> rm -rfv ../backup/*.tar.gz
remove all files starting with a or b in a nested directory. -> rm -r directory1/directory2/[ab]*
completely remove all files and directories from the root directory without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -rf --no-preserve-root /*
display a message for each file and directory removed forcefully starting with directory. -> rm -v -f -r directory*
prompt for confirmation before removing all .txt files in subdirectories of a directory and display a message for each one. -> rm -irv directory/*/*.txt
remove a deeply nested directory and its contents recursively and display a message for each directory removed. -> rm -r -p -v directory1/directory2/directory3/directory4
prompt for confirmation before removing all .log files modified more than 7 days ago in the current directory and its subdirectories. -> rm -iv $(find . -type f -name '*.log' -mtime +7)
forcefully remove a specific device file. -> rm -fv /dev/sdc
prompt for confirmation before removing all files and directories from the root directory without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -ri --no-preserve-root /
forcefully remove multiple directories and display a message for each one. -> rm -r -f -v directory1 directory2 directory3
forcefully remove all .txt and .pdf files in a directory. -> "rm -r -f --include=""*.txt"" --include=""*.pdf"" directory"
forcefully remove all files in a directory except for .txt and .pdf files. -> "rm -r -f --exclude=""*.txt"" --exclude=""*.pdf"" directory"
remove a nested directory and its contents recursively and display a message for each directory removed. -> rm -r -p -v directory1/*/directory2
display a message for each file and directory removed from the root directory recursively without preserving file ownership (DO NOT RUN THIS COMMAND). -> rm -rfv / --no-preserve-root
prompt for confirmation before removing all files in a directory except for .pdf files and display a message for each file removed. -> "rm -irv --exclude=""*.pdf"" directory/*"
prompt for confirmation before removing all files starting with file and ending with .txt. -> rm -fi file*.txt
prompt for confirmation before forcefully removing multiple empty directories. -> rm -d -irf directory1 directory2 directory3
forcefully remove specific files in a directory and display a message for each file removed. -> "rm -r -f -v directory/{file1.txt,file2.txt,file3.txt}"
forcefully remove all files in a directory excluding specific ones. -> "rm -r -f --exclude-directory={dir1,dir2,dir3} directory"
forcefully remove all .txt and .pdf files in a directory. -> "rm -r -f --include='{*.txt,*.pdf}' directory"
forcefully remove all files in a directory excluding .txt and .pdf files. -> "rm -r -f --exclude='{*.txt,*.pdf}' directory"
remove nested directories and display a message for each directory removed. -> "rm -r -p -v directory1/*/{directory2,directory3}"
forcefully remove all files and directories from the root directory recursively without preserving file ownership excluding specific ones (DO NOT RUN THIS COMMAND). -> "rm -rfv --no-preserve-root / --exclude={""/home/*"",""/var/*""}"
prompt for confirmation before removing all .txt and .pdf files in a directory and display a message for each one. -> "rm -irv --include='{*.txt,*.pdf}' directory/*"
forcefully remove multiple directories and display a message for each one removed. -> rm -r -f -v directory1 directory2 directory3
forcefully remove all files in a directory excluding specific directories and file types. -> "rm -r -f --exclude-directory={dir1,dir2,dir3} --exclude='{*.txt,*.pdf}' directory"
forcefully remove all .txt and .pdf files in a directory excluding specific directories. -> "rm -r -f --include='{*.txt,*.pdf}' --exclude-directory={directory1,directory2} directory"
Remove directory foo. -> rmdir foo
Remove directory bar. -> rmdir bar/
Remove directory dir1 verbosely. -> rmdir -v dir1
Remove directory proj1. -> rmdir proj1/
Remove directory a/b/c/ with parents. -> rmdir -p a/b/c/
Remove folder named folder. -> rmdir folder
Force remove directory dir2/. -> rmdir -f dir2/
Remove docs directory. -> rmdir docs
Ignore non-empty directory and remove dir3/. -> rmdir --ignore-fail-on-non-empty dir3/
Remove directory named source. -> rmdir source/
Remove directory archive/2020/dec/ with parents. -> rmdir -p archive/2020/dec/
Remove music directory. -> rmdir music/
Remove /home/user/temp/ directory verbosely with parents. -> rmdir -v -p /home/user/temp/
Remove videos directory. -> rmdir videos
Remove directory a/b/c/d/e/f/ with parents. -> rmdir -p a/b/c/d/e/f/
Remove images directory. -> rmdir images/
Remove /var/log/2020/oct/ directory verbosely with parents. -> rmdir -v -p /var/log/2020/oct/
Remove tmp directory. -> rmdir tmp
Recursively force remove directory dir4/. -> rmdir -rf dir4/
Remove software directory. -> rmdir software/
Remove directory code/2020/jan/ with parents. -> rmdir -p code/2020/jan/
Remove docs directory. -> rmdir docs/
Remove /var/www/html/ directory verbosely with parents. -> rmdir -v -p /var/www/html/
Remove music-videos directory. -> rmdir music-videos/
Remove directory a/b/c/d/e/f/g/h/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/
Remove log directory. -> rmdir log/
Remove /usr/bin/ directory verbosely with parents. -> rmdir -v -p /usr/bin/
Remove workdocs directory. -> rmdir workdocs
Force remove directory dir5/ verbosely. -> rmdir -f -v dir5/
Remove books directory. -> rmdir books/
Remove directory downloads/2020/nov/ with parents. -> rmdir -p downloads/2020/nov/
Remove docs directory. -> rmdir docs/
Remove /usr/local/bin/ directory verbosely with parents. -> rmdir -v -p /usr/local/bin/
Remove pictures directory. -> rmdir pictures
Remove directory a/b/c/d/e/f/g/h/i/j/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/
Remove downloads directory. -> rmdir downloads/
Remove /etc/sysconfig/ directory verbosely with parents. -> rmdir -v -p /etc/sysconfig/
Remove data directory. -> rmdir data/
Force remove directory dir6/ verbosely. -> rmdir -f -v dir6/
Remove images directory. -> rmdir images/
Remove directory library/2020/nov/ with parents. -> rmdir -p library/2020/nov/
Remove docs directory. -> rmdir docs/
Remove /etc/nginx/ directory verbosely with parents. -> rmdir -v -p /etc/nginx/
Remove movies directory. -> rmdir movies
Remove directory a/b/c/d/e/f/g/h/i/j/k/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/
Remove public directory. -> rmdir public/
Remove /usr/share/ directory verbosely with parents. -> rmdir -v -p /usr/share/
Remove backlogs directory. -> rmdir backlogs/
Force remove directory dir7/ verbosely. -> rmdir -f -v dir7/
Remove directory library/2020/dec/ with parents. -> rmdir -p library/2020/dec/
Remove docs directory. -> rmdir docs/
Remove /etc/httpd/ directory verbosely with parents. -> rmdir -v -p /etc/httpd/
Remove reports directory. -> rmdir reports/
Remove directory a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/
Remove backups directory. -> rmdir backups/
Remove /var/www/ directory verbosely with parents. -> rmdir -v -p /var/www/
Remove oldfiles directory. -> rmdir oldfiles/
Force remove directory dir8/ verbosely. -> rmdir -f -v dir8/
Remove directory archives/2020/nov/ with parents. -> rmdir -p archives/2020/nov/
Remove docs directory. -> rmdir docs/
Remove /etc/ssh/ directory verbosely with parents. -> rmdir -v -p /etc/ssh/
Remove backups directory. -> rmdir backups/
Remove directory a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/
Remove archives directory. -> rmdir archives/
Remove /var/log/nginx/ directory verbosely with parents. -> rmdir -v -p /var/log/nginx/
Remove test directory. -> rmdir test/
Force remove directory dir9/ verbosely. -> rmdir -f -v dir9/
Remove directory uploads/2020/nov/ with parents. -> rmdir -p uploads/2020/nov/
Remove docs directory. -> rmdir docs/
Remove /opt/lampp/ directory verbosely with parents. -> rmdir -v -p /opt/lampp/
Remove temp directory. -> rmdir temp/
Remove directory a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/ with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/
Remove scripts directory. -> rmdir scripts/
Remove /var/lib/mysql/ directory verbosely with parents. -> rmdir -v -p /var/lib/mysql/
Remove backup directory. -> rmdir backup/
Force remove directory dir10/ verbosely. -> rmdir -f -v dir10/
Remove directory backups/2020/nov/ with parents. -> rmdir -p backups/2020/nov/
Remove docs directory. -> rmdir docs/
Remove /var/www/html/sample/ directory verbosely with parents. -> rmdir -v -p /var/www/html/sample/
Remove git directory. -> rmdir git/
Remove directory a1/b2/c3/ with parents. -> rmdir -p a1/b2/c3/
Remove files directory. -> rmdir files/
Remove /var/named/ directory verbosely with parents. -> rmdir -v -p /var/named/
Remove logs directory. -> rmdir logs/
Force remove directory dir11/ verbosely. -> rmdir -f -v dir11/
Remove directory backups/2020/dec/ with parents. -> rmdir -p backups/2020/dec/
Remove docs directory. -> rmdir docs/
Remove /var/www/html/test/ directory verbosely with parents. -> rmdir -v -p /var/www/html/test/
Remove backup1 directory. -> rmdir backup1/
Remove directory a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/1/2/3/4/5/6/7/8/9 with parents. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/1/2/3/4/5/6/7/8/9
Remove downloads directory. -> rmdir downloads/
Remove /var/lib/pgsql/ directory verbosely with parents. -> rmdir -v -p /var/lib/pgsql/
Remove archives directory. -> rmdir archives/
Remove directory backups/2020/dec/ recursively. -> rmdir -p backups/2020/dec/
Remove tmp directory. -> rmdir tmp/
Remove /var/www/html/demo/ directory verbosely with parents. -> rmdir -v -p /var/www/html/demo/
Remove backup2 directory. -> rmdir backup2/
Remove directory a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15 recursively. -> rmdir -p a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/1/2/3/4/5/6/7/8/9/10/11/12/13/14/15
Remove archives directory. -> rmdir archives/
Remove /usr/tmp/ directory verbosely with parents. -> rmdir -v -p /usr/tmp/
Connect to host1 with user1 -> ssh user1@host1
Generate RSA key pair -> ssh-keygen -t rsa
Copy public key to host -> ssh-copy-id user@host
Enable X11 forwarding -> ssh -X user@host
Copy file.txt to /directory on host -> scp file.txt user@host:/directory
Mount remote directory to local -> sshfs user@host:/remote /local
Add identity (private key) to SSH agent -> ssh-add id_rsa
Start interactive sftp session -> sftp user@host
Connect to host on port 2222 -> ssh -p 2222 user@host
Sync remote directory to local -> rsync -r user@host:/remote /local
Add host key to known_hosts -> ssh-keyscan host >> ~/.ssh/known_hosts
Forward port 8080 to localhost:80 -> ssh -L 8080:localhost:80 user@host
Mount remote directory with specific user and group -> "sshfs -o allow_other,uid=1000,gid=1000 user@host:/remote /local"
Generate ed25519 key pair -> ssh-keygen -t ed25519
Enable X11 forwarding with compression -> ssh -X -C user@host
Copy folder and its contents to /directory on host -> scp -r folder/ user@host:/directory/
Mount remote directory with specific identity file -> sshfs -o IdentityFile=~/.ssh/id_rsa user@host:/remote /local
List identities (private keys) in SSH agent -> ssh-add -l
Change directory in sftp session -> sftp> cd /directory
Connect to host with specific identity file -> ssh -o IdentityFile=~/.ssh/id_rsa2 user@host
Sync remote directory with compression -> rsync -avz user@host:/remote /local
Add host key on port 2222 to known_hosts -> ssh-keyscan -p 2222 host >> ~/.ssh/known_hosts
Mount remote directory as superuser -> sudo sshfs user@host:/remote /local
Forward port 8080 to localhost:80 in background -> ssh -fNT -L 8080:localhost:80 user@host
Automatically reconnect when connection is lost -> sshfs -o reconnect user@host:/remote /local
Generate DSA key pair -> ssh-keygen -t dsa
Set connection timeout to 10 seconds -> ssh -o ConnectTimeout=10 user@host
Copy file.txt from host to current directory -> scp user@host:/remote/file.txt .
Mount remote directory with specific umask -> sshfs -o umask=022 user@host:/remote /local
Close multiplexed SSH connections -> ssh -O exit user@host
Remove all identities (private keys) from SSH agent -> ssh-add -D
Download file.txt from remote sftp session -> sftp> get file.txt
Copy specific public key to host -> ssh-copy-id -i id_rsa.pub user@host
Sync remote directory with compression and exclude *.bak files -> rsync -az user@host:/remote /local --exclude '*.bak'
Add RSA host key to known_hosts -> ssh-keyscan -t rsa host >> ~/.ssh/known_hosts
Mount remote directory with specific user and group names -> "sshfs -o uid=username,gid=groupname user@host:/remote /local"
Set log level to VERBOSE -> ssh -o LogLevel=VERBOSE user@host
Copy file.txt to /directory on host on port 2222 -> scp -P 2222 file.txt user@host:/directory/
Start dynamic port forwarding on port 8080 -> ssh -D 8080 user@host
Mount remote directory with specific ssh command -> sshfs -o ssh_command='ssh -v' user@host:/remote /local
Convert ed25519 public key to PEM format -> ssh-keygen -f ~/.ssh/id_ed25519.pub -e -m pem
Send keepalive packets every 30 seconds -> ssh -o ServerAliveInterval=30 user@host
Upload file.txt to remote sftp session -> sftp> put file.txt
Copy specific public key to host for DSA authentication -> ssh-copy-id -i id_dsa.pub user@host
Sync remote directory with compression and exclude files listed in exclude-list.txt -> rsync -avz --exclude-from 'exclude-list.txt' user@host:/remote /local
Add ECDSA host key to known_hosts -> ssh-keyscan -t ecdsa host >> ~/.ssh/known_hosts
Mount remote directory with specific group ID file -> sshfs -o gidfile=/etc/group user@host:/remote /local
"Connect to destination via jumphost with user1, using netcat" -> ssh -o ProxyCommand='ssh user1@jumphost nc %h %p' user2@destination
Copy folder and its contents from host to current directory -> scp -r user@host:/remote/folder/ .
Start multiplexed SSH connections with control socket -> ssh -M -S ~/.ssh/control_socket user@host
Check RSA public key fingerprint with SHA-256 -> ssh-keygen -E sha256 -lf ~/.ssh/id_rsa.pub
Enable TCP keepalive -> ssh -o TCPKeepAlive=yes user@host
Change local directory in sftp session -> sftp> lcd /local
Copy ed25519 public key to host on port 2222 -> ssh-copy-id -i ~/.ssh/id_ed25519.pub -p 2222 user@host
Sync remote directory with compression and delete extraneous files in local directory -> rsync -az --delete user@host:/remote /local
Generate ECDSA key pair -> ssh-keygen -t ecdsa
Disable known hosts checking -> ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@host
Copy folder and its contents from host on port 2222 to current directory -> scp -P 2222 -r user@host:/remote/folder/ .
Mount remote directory with specific identity file and allow other users -> "sshfs -o allow_other,IdentityFile=~/.ssh/id_rsa user@host:/remote /local"
Set maximum number of keepalive packets before connection is terminated -> ssh -o ServerAliveCountMax=3 user@host
Print local working directory in sftp session -> sftp> lpwd
Add all identities (private keys) matching '*key*' to SSH agent -> ssh-add ~/.ssh/*key*
"Sync remote directory with compression, using only file size for changes" -> rsync -az --size-only user@host:/remote /local
Check ed25519 public key fingerprint with SHA-512 -> ssh-keygen -E sha512 -lf ~/.ssh/id_ed25519.pub
Start SSH connection multiplexing with specific parameters -> ssh -o ControlMaster=yes -o ControlPath='/tmp/ssh-%r@%h:%p' -o ControlPersist=600 user@host
Copy file using specific identity file to /directory on host -> scp -i id_rsa file user@host:/directory
Forward ports 8080 and 3306 to localhost:80 and localhost:3306 on host -> ssh -L 8080:localhost:80 -L 3306:localhost:3306 user@host
"Mount remote directory with specific user and group ownership, as well as allowing access to other users" -> "sshfs -o slave,user=user1,group=group1,user_allow_other host2:/remote /local"
Connect to host with specific user and identity file -> ssh -o User=user1 -o IdentityFile=~/.ssh/user1.key user@host
Print local working directory in sftp session (alias for pwd command) -> sftp> lpwd
Copy ECDSA public key to host on port 2222 -> ssh-copy-id -i ~/.ssh/id_ecdsa.pub -p 2222 user@host
"Sync remote directory with compression, exclude CVS directories and delete extraneous files after sync" -> rsync -az --exclude=CVS --delete-after user@host:/remote /local
Generate RSA key pair with 4096-bit key length -> ssh-keygen -t rsa -b 4096
Set log level to QUIET -> ssh -o LogLevel=QUIET user@host
Copy folder and its contents from host using specific identity file to current directory -> scp -r -i ~/.ssh/mykey user@host:/remote/folder/ .
Mount remote directory with specific user ownership and allow other users access -> "sshfs -o slave,allow_other user@host:/remote /local"
Disable known hosts checking and connect as root user with specific identity file -> ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o IdentityFile=~/.ssh/root.key root@host
List files in remote directory and save to local files.txt -> sftp> ls > files.txt
Lock SSH agent with passphrase -> ssh-add -x
Sync remote directory with time stamps preserved and compression -> rsync -rtz user@host:/remote /local
Check RSA public key fingerprint with MD5 hash -> ssh-keygen -E md5 -lf ~/.ssh/id_rsa.pub
Disable password authentication and enable public key authentication -> ssh -o PasswordAuthentication=no -o PubkeyAuthentication=yes user@host
Copy file.txt using specific identity file and on port 2222 to /directory on host -> scp -P 2222 -i id_rsa2 file.txt user@host:/directory/
"Connect to destination via jumphost with user1, using nested SSH commands and forward ports 8080 and 3306" -> ssh -L 8080:localhost:80 -L 3306:localhost:3306 user1@jumphost ssh user2@destination
Mount remote directory and follow symbolic links -> sshfs -o follow_symlinks user@host:/remote /local
Start SSH connection multiplexing and forward port 1234 to host2:5678 via host1 in background -> ssh -o ControlMaster=yes -o ControlPath='/tmp/ssh-%r@%h:%p' -o ControlPersist=600 -fNL 1234:host2:5678 user1@host1
Upload all .txt files in local directory to remote directory -> sftp> mput *.txt
Enable agent forwarding -> ssh-add -X
Sync remote directory with compression and delete files excluded in exclude-list.txt -> rsync -az --delete-excluded user@host:/remote /local --exclude-from 'exclude-list.txt'
Generate ed25519 key pair with comment my@email.com -> "ssh-keygen -t ed25519 -C ""my@email.com"""
Set log level to DEBUG3 -> ssh -o LogLevel=DEBUG3 user@host
Copy folder and its contents from host using specific identity file and on port 2222 to current directory -> scp -r -i ~/.ssh/mykey -P 2222 user@host:/remote/folder/ .
"Mount remote directory with specific user ownership, allow other users access, and specific identity file" -> "sshfs -o slave,allow_other,IdentityFile=~/.ssh/user.key user@host:/remote /local"
"Disable known hosts checking, connect to destination via jumphost with user1 using netcat, and connect as user2" -> ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ProxyCommand='ssh user1@jumphost -W %h:%p' user2@destination
Print remote working directory in sftp session -> sftp> pwd
Add all identities (private keys) matching '*key*' to SSH agent with 1 hour lifetime -> ssh-add -t 3600 ~/.ssh/*key*
Sync remote directory with compression and use previous backup from /backup/2022-01-01 as source for unchanged files -> rsync -az --link-dest=/backup/2022-01-01 user@host:/remote /local
Set preferred authentications to publickey only -> ssh -o PreferredAuthentications=publickey user@host
Copy folder using specific identity file to /directory on host -> scp -i id_rsa -r folder/ user@host:/directory/
"Mount remote directory with specific user and group ownership, allow other users access, and set specific user and group names." -> "sshfs -o slave,allow_other,uid=username,gid=groupname user@host:/remote /local"
Display status of Documents directory -> stat /home/user/Documents
Display status of passwd file -> stat /etc/passwd
Display status of syslog file -> stat /var/log/syslog
Display custom status format of file.txt in tmp directory -> "stat -c ""%n %s %Y"" /tmp/file.txt"
Follow symbolic links to display status of syslog file -> stat -L /var/log/syslog
Display status of all files in log directory in a terse format -> stat -t /var/log
Display file system status of sda1 device -> stat -f /dev/sda1
"Display name, permissions, and owner/group of home directory" -> "stat -c ""%n %A %U:%G"" /home"
Display time of last access for the syslog file -> stat -r /var/log/syslog
Display time of last write for the syslog file -> stat -W /var/log/syslog
Display SELinux security context of the syslog file -> stat -z /var/log/syslog
"Display name, permissions, owner, group, and number of hard links of user's home directory" -> "stat -c ""%n %a %u %g %h"" /home/user"
"Display name, block size, and number of blocks used by Documents directory" -> "stat -c ""%n %b %B"" /home/user/Documents"
Display name and inode number of the syslog file -> "stat -c ""%n %i"" /var/log/syslog"
Display name and file type (directory) of the var directory -> "stat -c ""%n %F"" /var"
"Display time of last access, modification, and status change of the passwd file" -> "stat -c ""%x %y %z"" /etc/passwd"
"Display name, file system type, and mount point of the sda device" -> "stat -f -c ""%n %T %S"" /dev/sda"
Display name and year of last status change of the syslog file -> "stat -c ""%n %Y"" /var/log/syslog"
"Display name, permissions, and octal representation of permissions of the passwd file" -> "stat -c ""%n %A %a"" /etc/passwd"
Display name and size of sda1 device -> "stat -c ""%n %s"" /dev/sda1"
"Display name, owner, and group of the passwd file" -> "stat -c ""%n %U %G"" /etc/passwd"
Display name and number of CPUs on the system -> "stat -c ""%n %C"" /proc/cpuinfo"
Display name and time of last modification for the passwd file -> "stat -c ""%n %m"" /etc/passwd"
Display name and size in bytes of the passwd file -> "stat -c ""%n %z"" /etc/passwd"
"Display name, permissions, owner, and group of the etc directory" -> "stat -c ""%n %A %U %G"" /etc"
Display status of notes file in user's Desktop directory -> stat /home/user/Desktop/notes
"Display name, permissions, owner, and group of the group file" -> "stat -c ""%n %a %u %g"" /etc/group"
Display name and time of last file write for the syslog file -> "stat -c ""%n %w"" /var/log/syslog"
Display name and time of last file write for the passwd file -> "stat -c ""%n %w"" /etc/passwd"
"Display name, permissions, owner, and group of the bin directory" -> "stat -c ""%n %a %U %G"" /usr/local/bin"
"Display name, owner, group, and size of the Documents directory" -> "stat -c ""%n %u %g %s"" /home/user/Documents"
"Display name, permissions, and inode number of the sdb device" -> "stat -c ""%n %A %i"" /dev/sdb"
"Display name, permissions, owner, and group of the shadow file" -> "stat -c ""%n %a %U %G"" /etc/shadow"
"Display name, file system type, and mount point of the usr directory" -> "stat -c ""%n %T %S"" /usr"
"Display name, permissions, owner, and group of the share directory" -> "stat -c ""%n %a %U %G"" /usr/share"
"Display name, permissions, owner, and group of the bin directory" -> "stat -c ""%n %A %U %G"" /usr/bin"
"Display name, permissions, owner, and group of the sbin directory" -> "stat -c ""%n %a %U %G"" /usr/sbin"
"Display name, permissions, owner, group, and number of hard links of the include directory" -> "stat -c ""%n %a %U %G %h"" /usr/include"
"Display name, permissions, owner, and group of the local include directory" -> "stat -c ""%n %a %U %G"" /usr/local/include"
Display name and owner/group of the Documents directory -> "stat -c ""%n %U:%G"" /home/user/Documents"
"Display name, time of last modification, and size of the bin directory" -> "stat -c ""%n %m %z"" /usr/bin"
"Display name, permissions, owner, and group of the lib directory" -> "stat -c ""%n %a %U %G"" /usr/lib"
"Display name, permissions, owner, and group of the local lib directory" -> "stat -c ""%n %a %U %G"" /usr/local/lib"
"Display name, owner, group, and permissions of the log directory" -> "stat -c ""%n %u %g %a"" /var/log"
Display name and time of last access for the Desktop directory -> "stat -c ""%n %x"" /home/user/Desktop"
"Display name, permissions, owner, and group of the var directory" -> "stat -c ""%n %a %U %G"" /var/"
Display name and file type (directory) of the local directory -> "stat -c ""%n %F"" /usr/local"
"Display name, file system type, and mount point of the var directory" -> "stat -c ""%n %T %S"" /var"
"Display name, permissions, owner, and group of the run directory" -> "stat -c ""%n %a %U %G"" /var/run"
"Display name, time of last modification, and size of the log directory" -> "stat -c ""%n %m %z"" /var/log"
"Display name, permissions, owner, and group of the cache directory" -> "stat -c ""%n %a %U %G"" /var/cache"
"Display name, permissions, owner, group, and number of hard links of the spool directory" -> "stat -c ""%n %a %U %G %h"" /var/spool"
Display name and time of last file write for the cache directory -> "stat -c ""%n %w"" /var/cache"
"Display name, permissions, owner, and group of the local share directory" -> "stat -c ""%n %a %U %G"" /usr/local/share"
Display name and time of last write for the log directory -> "stat -c ""%n %W"" /var/log"
"Display name, permissions, owner, group, and number of hard links of the local directory" -> "stat -c ""%n %a %U %G %h"" /usr/local"
Display name and time of last file write for the bin directory -> "stat -c ""%n %w"" /usr/local/bin"
"Display name, permissions, owner, and group of the local sbin directory" -> "stat -c ""%n %a %U %G"" /usr/local/sbin"
"Display name, inode number, and permissions of the local man directory" -> "stat -c ""%n %i %a"" /usr/local/share/man"
"Display name, time of last access, modification, and status change for the sudoers file" -> "stat -c ""%n %x %y %z"" /etc/sudoers"
"Display name, time of last modification, and size of the tmp directory in var" -> "stat -c ""%n %m %z"" /var/tmp"
"Display name, permissions, owner, and group of the mail directory in var/spool" -> "stat -c ""%n %a %U %G"" /var/spool/mail"
"Display name, permissions, owner, and group of the local man directory" -> "stat -c ""%n %a %U %G"" /usr/local/man"
"Display name, permissions, owner, and group of the lib directory in var" -> "stat -c ""%n %a %u %g"" /var/lib"
"Display name, permissions, owner, and group of the tmp directory in var" -> "stat -c ""%n %a %U %G"" /var/tmp"
"Display name, permissions, owner, and group of the backups directory in var" -> "stat -c ""%n %a %U %G"" /var/backups"
"Display name, time of last modification, and size of the group file" -> "stat -c ""%n %m %z"" /etc/group"
"Display name, permissions, owner, and group of the cron directory in var/spool" -> "stat -c ""%n %a %U %G"" /var/spool/cron"
Display name and time of last file write for the postfix directory in var/spool -> "stat -c ""%n %w"" /var/spool/postfix"
"Display name, permissions, owner, and group of the ldconfig directory in var/cache" -> "stat -c ""%n %a %u %g"" /var/cache/ldconfig"
"Display name, permissions, owner, group, and number of hard links of the apt directory in var/log" -> "stat -c ""%n %a %U %G %h"" /var/log/apt"
"Display name, time of last modification, and size of the null device" -> "stat -c ""%n %m %z"" /dev/null"
"Display name, permissions, owner, and group of the lock directory in var/run" -> "stat -c ""%n %a %U %G"" /var/run/lock"
"Display name, permissions, owner, and group of the screen directory in var/run" -> "stat -c ""%n %a %U %G"" /var/run/screen"
"Display name, permissions, owner, and group of the etc directory in local" -> "stat -c ""%n %a %u %g"" /usr/local/etc"
"Display name, permissions, owner, and group of the mount directory" -> "stat -c ""%n %a %U %G"" /mnt"
"Display name, permissions, owner, and group of the squid directory in var/spool" -> "stat -c ""%n %a %U %G"" /var/spool/squid"
"Display name, owner, and group of the boot directory" -> "stat -c ""%n %u %g"" /boot"
"Display name, time of last modification, and size of the shm directory in run" -> "stat -c ""%n %m %z"" /run/shm"
"Display name, permissions, owner, and group of the apt directory in var/log" -> "stat -c ""%n %a %u %g"" /var/log/apt"
"Display name, permissions, owner, and group of the mail directory in var" -> "stat -c ""%n %a %U %G"" /var/mail"
"Display name, permissions, owner, and group of the screens directory in run" -> "stat -c ""%n %a %U %G"" /run/screens"
"Display name, permissions, owner, and group of the sbin directory in usr" -> "stat -c ""%n %a %u %g"" /usr/sbin"
Display name and year of last status change for the ls command in bin -> "stat -c ""%n %Y"" /bin/ls"
Display name and file capabilities of the libc library -> "stat -c ""%n %M"" /lib/x86_64-linux-gnu/libc.so.6"
"Display name, time of last modification, and size of the crontabs directory in var/spool/cron" -> "stat -c ""%n %m %z"" /var/spool/cron/crontabs"
"Display name, permissions, owner, and group of the lock directory in run" -> "stat -c ""%n %a %U %G"" /run/lock"
"Display name, permissions, owner, and group of the screen directory in run" -> "stat -c ""%n %a %U %G"" /run/screen"
"Display name, permissions, owner, and group of the netinet directory in include" -> "stat -c ""%n %a %u %g"" /usr/include/netinet"
"Display name, permissions, owner, and group of the apt directory in backups" -> "stat -c ""%n %a %U %G"" /var/backups/apt"
"Display name, time of last modification, and size of the man directory in share" -> "stat -c ""%n %m %z"" /usr/share/man"
"Display name, permissions, owner, and group of the active directory in postfix/spool" -> "stat -c ""%n %a %U %G"" /var/spool/postfix/active"
"Display name, permissions, owner, group, and number of hard links of the dpkg directory in var/lib" -> "stat -c ""%n %a %U %G %h"" /var/lib/dpkg"
"Display name, permissions, owner, and group of the apache2 directory in local/etc" -> "stat -c ""%n %a %u %g"" /usr/local/etc/apache2"
"Display name, permissions, owner, and group of the doc directory in share" -> "stat -c ""%n %a %u %g"" /usr/share/doc"
"Display name, permissions, owner, and group of the man1 directory in local/man" -> "stat -c ""%n %a %U %G"" /usr/local/man/man1"
Display name and time of last file write for the opt directory -> "stat -c ""%n %w"" /opt"
"Display name, permissions, owner, and group of the opt directory in etc" -> "stat -c ""%n %a %u %g"" /etc/opt"
"Display name, permissions, owner, and group of the srv directory" -> "stat -c ""%n %a %U %G"" /srv"
Display status of sample directory named a_directory -> "stat -c ""%n %a %U %G"" a_directory"
Display system information. -> top
"Batch mode, keep updating." -> top -b
Command line show. -> top -c
Delay between updates. -> top -d
Show threads. -> top -H
Don't show idle tasks. -> top -i
Show memory in MB. -> top -M
Number of iterations. -> top -n
Specific process ID. -> top -p
Cumulative time view. -> top -S
Sort by field. -> top -s
Specific user’s processes. -> top -U
Specific user's processes. -> top -u
Show version. -> top -v
Wide output. -> top -w
Security context. -> top -Z
Monitor processes in /root. -> top /root
Monitor processes in /home/user. -> top /home/user
Monitor processes in /var/log. -> top /var/log
Update every 3 seconds. -> top -i 3
Monitor process ID 123. -> top -p 123
Delay by 10 seconds. -> top -d 10
Sort by CPU usage. -> top -s cpu
Sort by memory usage. -> top -s mem
Monitor user’s processes. -> top -U user
Monitor user's processes. -> top -u user
Show version 8.0. -> top -v 8.0
Output width of 160. -> top -w 160
Show root's security context. -> top -Z root
Batch mode with delay of 5 seconds. -> top -b -d 5
Command line show with updates every 2 seconds. -> top -c -i 2
Delay by 10 seconds and monitor user's processes. -> top -d 10 -u user
Show threads for process ID 123. -> top -H -p 123
Update every 3 seconds and sort by CPU usage. -> top -i 3 -s cpu
Show top 10 memory consuming processes. -> top -m 10
Show top 5 processes. -> top -n 5
Monitor process IDs 123 and 345. -> "top -p 123,345"
Cumulative time view for process ID 123. -> top -S -p 123
Monitor user's and root's processes. -> top -u user -U root
Output width of 200 and show root's security context. -> top -w 200 -Z root
Monitor processes in /etc directory. -> top /etc
Monitor processes in /usr/bin directory. -> top /usr/bin
Monitor processes in /var/tmp directory. -> top /var/tmp
Batch mode and updates every 5 seconds. -> top -b -i 5
Delay by 15 seconds and sort by memory usage. -> top -d 15 -s mem
Show threads for user’s processes. -> top -H -u user
Update every 3 seconds and output width of 120. -> top -i 3 -w 120
Show memory in MB for user's processes. -> top -M -u user
Show top 10 processes with updates every 2 seconds. -> top -n 10 -i 2
Cumulative time view for process ID 123. -> top -p 123 -S
Sort by CPU usage and monitor user’s processes. -> top -s cpu -U user
Monitor user’s processes and show version 8.0. -> top -u user -v 8.0
Output width of 180 and show apache's security context. -> top -w 180 -Z apache
Monitor processes in /usr/sbin directory. -> top /usr/sbin
Monitor processes in /home/user1/public_html directory. -> top /home/user1/public_html
Monitor processes in /var/lib/mysql directory. -> top /var/lib/mysql
Batch mode with 5 iterations. -> top -b -n 5
Delay by 20 seconds and sort by CPU usage. -> top -d 20 -s cpu
Show threads for root's processes. -> top -H -U root
Update every 3 seconds and monitor user's processes. -> top -i 3 -u user
Show memory in MB for process ID 123. -> top -M -p 123
Show top 15 processes sorted by memory usage. -> top -n 15 -s mem
"Monitor process IDs 123, 345 and 678." -> "top -p 123,345,678"
Sort by CPU usage and output width of 160. -> top -s cpu -w 160
Monitor user's processes and show apache's security context. -> top -u user -Z apache
Show version 7.5 and output width of 200. -> top -v 7.5 -w 200
Output width of 180 and monitor processes in /etc directory. -> top -w 180 /etc
Monitor processes in /usr/share directory. -> top /usr/share
Monitor processes in /home/user2 directory. -> top /home/user2
Monitor processes in /var/named directory. -> top /var/named
Batch mode with 10 second delay and updates every 3 seconds. -> top -b -d 10 -i 3
"Delay by 15 seconds, sort by memory usage and monitor user's processes." -> top -d 15 -s mem -U user
Show threads for process IDs 123 and 345. -> "top -H -p 123,345"
"Update every 3 seconds, sort by CPU usage and monitor user's processes." -> top -i 3 -s cpu -u user
Show memory in MB for root's processes. -> top -M -u root
Show top 20 processes sorted by CPU usage. -> top -n 20 -s cpu
"Cumulative time view for process IDs 123, 345 and 678." -> "top -p 123,345,678 -S"
"Sort by CPU usage, output width of 180 and monitor processes in /usr/sbin directory." -> top -s cpu -w 180 /usr/sbin
Monitor user's processes and show version 8.2. -> top -u user -v 8.2
Show version 7.5 and show apache's security context. -> top -v 7.5 -Z apache
Output width of 160 and monitor processes in /var/tmp directory. -> top -w 160 /var/tmp
Monitor processes in /usr/lib directory. -> top /usr/lib
Monitor processes in /home/user3 directory. -> top /home/user3
Monitor processes in /var/log/apache2 directory. -> top /var/log/apache2
Batch mode with 10 second delay and 3 iterations. -> top -b -d 10 -n 3
"Delay by 20 seconds, sort by CPU usage and monitor user's processes." -> top -d 20 -s cpu -u user
Show threads for user's process with ID 123. -> top -H -u user -p 123
"Update every 3 seconds, sort by memory usage and monitor root's processes." -> top -i 3 -s mem -u root
"Show memory in MB, output width of 180 and monitor processes in /etc directory." -> top -M -w 180 /etc
Show top 25 processes sorted by CPU usage. -> top -n 25 -s cpu
"Monitor process IDs 123, 345 and 678 and sort by CPU usage." -> "top -p 123,345,678 -s cpu"
"Sort by CPU usage, output width of 160 and monitor processes in /usr/share directory." -> top -s cpu -w 160 /usr/share
Monitor user's processes and show nginx's security context. -> top -u user -Z nginx
Show version 8.2 and output width of 200. -> top -v 8.2 -w 200
Output width of 180 and monitor processes in /var/lib/mysql directory. -> top -w 180 /var/lib/mysql
Monitor processes in /usr/include directory. -> top /usr/include
Monitor processes in /home/user4 directory. -> top /home/user4
Monitor processes in /var/log/nginx directory. -> top /var/log/nginx
"5 seconds delay, 5 iterations and sort by memory usage." -> top -d 5 -n 5 -s mem
Show threads for root's process with ID 123. -> top -H -u root -p 123
create empty file -> touch file.txt
create empty directory -> touch folder/
change file access time -> touch -a file.txt
change file modification time -> touch -m file.txt
do not create file -> touch -c file.txt
"create new file, copy modification time from another file" -> touch -r file.txt newfile.txt
create file with specified timestamp -> touch -t 202201011200 file.txt
create file with spaces in the name -> touch file with_spaces.txt
create file with quotes in the name -> touch 'file with quotes.txt'
create file in home directory -> touch ~/file.txt
create file in specified directory -> touch /var/www/file.txt
create multiple files with common prefix and numeric suffixes -> touch file-{1..10}.txt
create multiple files with common suffix and alpha suffixes -> "touch file-{a,b,c}.txt"
create multiple files using wildcard -> touch *.txt
change file timestamp to one day ago -> touch -d '1 day ago' file.txt
change file timestamp to two weeks ago -> touch -d '2 weeks ago' file.txt
change file timestamp to next Monday -> touch -d 'next Monday' file.txt
create file with current timestamp -> touch -t $(date +%Y%m%d%H%M) file.txt
create file in current directory -> touch ./file.txt
create file with lock suffix -> touch file.txt.lock
create file with bak suffix -> touch file.txt.bak
create file with tilde suffix -> touch file.txt~
create file with swp suffix -> touch file.txt.swp
create file with orig suffix -> touch file.txt.orig
create file with save suffix -> touch file.txt.save
create file with old suffix -> touch file.txt.old
create file with new suffix -> touch file.txt.new
create file with tmp suffix -> touch file.txt.tmp
create file with log suffix -> touch file.txt.log
create file with err suffix -> touch file.txt.err
create file with out suffix -> touch file.txt.out
create file with pid suffix -> touch file.txt.pid
create file with lockfile suffix -> touch file.txt.lockfile
create file with stats suffix -> touch file.txt.stats
create file with conf suffix -> touch file.txt.conf
create file with cfg suffix -> touch file.txt.cfg
create file with crt suffix -> touch file.txt.crt
create file with key suffix -> touch file.txt.key
create file with pem suffix -> touch file.txt.pem
create file with pub suffix -> touch file.txt.pub
create file with priv suffix -> touch file.txt.priv
create file with rsa suffix -> touch file.txt.rsa
create file with dsa suffix -> touch file.txt.dsa
create file with ssh suffix -> touch file.txt.ssh
create file with tar suffix -> touch file.txt.tar
create file with zip suffix -> touch file.txt.zip
create file with rar suffix -> touch file.txt.rar
create file with gz suffix -> touch file.txt.gz
create file with bz2 suffix -> touch file.txt.bz2
create file with xz suffix -> touch file.txt.xz
create file with sha suffix -> touch file.txt.sha
create file with md5 suffix -> touch file.txt.md5
create file with asc suffix -> touch file.txt.asc
create file with gpg suffix -> touch file.txt.gpg
create file with sig suffix -> touch file.txt.sig
create file with pubkey suffix -> touch file.txt.pubkey
create file with privkey suffix -> touch file.txt.privkey
create file with backup suffix -> touch file.txt.backup
create file with db suffix -> touch file.txt.db
create file with sqlite suffix -> touch file.txt.sqlite
create file with mysql suffix -> touch file.txt.mysql
create file with postgres suffix -> touch file.txt.postgres
create file with mongo suffix -> touch file.txt.mongo
create file with redis suffix -> touch file.txt.redis
create file with cache suffix -> touch file.txt.cache
create file with locking suffix -> touch file.txt.locking
create file with swapping suffix -> touch file.txt.swapping
create file with logging suffix -> touch file.txt.logging
create file with monitoring suffix -> touch file.txt.monitoring
create file with troubleshooting suffix -> touch file.txt.troubleshooting
treat symbolic link as regular file -> touch -h file.txt
do not update timestamp if file does not exist -> touch -n file.txt
only update access time -> touch -u file.txt
show file updates -> touch -v file.txt
do not create file if it already exists -> touch -x file.txt
change file timestamp to current time -> touch -z file.txt
do not create file if it does not exist -> touch --no-create file.txt
copy timestamp from another file -> touch --reference=file.txt newfile.txt
only update access time -> touch --time=atime file.txt
only update modification time -> touch --time=mtime file.txt
only update creation time -> touch --time=ctime file.txt
change file timestamp to current time -> touch --time=now file.txt
create file with specified timestamp -> touch --time=202201011200 file.txt
show touch help menu -> touch --help
show touch version information -> touch --version
set file size to zero -> touch -S file.txt
create file in default temporary directory -> touch -T file.txt
treat symbolic link as symbolic link -> touch --no-dereference file.txt
do not show file updates -> touch --silent file.txt
create directory recursively -> touch -R folder/
create directory hierarchy and file -> touch -p folder/folder2/file.txt
copy timestamp from another file -> touch --reference-time=file.txt newfile.txt
change file timestamp to one day ago -> touch --date='1 day ago' file.txt
change file timestamp to two weeks ago -> touch --date='2 weeks ago' file.txt
change file timestamp to next Monday -> touch --date='next Monday' file.txt
create file with specified timestamp -> touch --date=@946671600 file.txt
create file with specified timestamp -> touch --date='2022-01-01 12:00:00' file.txt
create file with specified timestamp -> touch --date='2022-01-01T12:00:00Z' file.txt
create file with specified timestamp -> touch --date='2022-01-01T12:00:00-0500' file.txt
create file with specified timestamp -> touch --date='2022-01-01T12:00:00+0800' file.txt
Display directory tree -> tree
Display hidden files -> tree -a
Display directories only -> tree -d
Display one level of directories -> tree -L 1
Display full paths -> tree -f
Don't highlight directories -> tree -i
Print the file type -> tree -p
Print the size of files -> tree -s
Colorize output -> tree -C
Output in JSON format -> tree -J
Print sizes in human readable format -> tree -h
Display only files matching pattern -> "tree -P ""*.txt"""
Don't display files matching pattern -> "tree -I ""*.txt"""
Print version information -> tree -v
Use UTF-8 encoding -> tree --charset utf-8
Display home directory tree -> tree ~
Display tree of /var directory -> tree /var
Display tree of /var/www directory -> tree /var/www
Display tree of /var/log directory -> tree /var/log
Display tree of /etc directory -> tree /etc
Display tree of /usr directory -> tree /usr
Display tree of /home directory -> tree /home
Display tree of /bin directory -> tree /bin
Display tree of /sbin directory -> tree /sbin
Display tree of /lib directory -> tree /lib
Display tree of /lib64 directory -> tree /lib64
Display tree of /boot directory -> tree /boot
Display tree of /proc directory -> tree /proc
Display tree of /sys directory -> tree /sys
Display tree of /usr/local directory -> tree /usr/local
Display tree of /usr/share directory -> tree /usr/share
Display tree of /usr/bin directory -> tree /usr/bin
Display tree of /usr/sbin directory -> tree /usr/sbin
Display tree of /usr/lib directory -> tree /usr/lib
Display tree of /usr/lib64 directory -> tree /usr/lib64
Display tree of /usr/include directory -> tree /usr/include
Display tree of /var/run directory -> tree /var/run
Display tree of /var/lock directory -> tree /var/lock
Display tree of /var/mail directory -> tree /var/mail
Display tree of /var/spool directory -> tree /var/spool
Display tree of /var/cache directory -> tree /var/cache
Display tree of /var/tmp directory -> tree /var/tmp
Display tree of /var/lib directory -> tree /var/lib
Display tree of /var/log/audit directory -> tree /var/log/audit
Display tree of /var/log/journal directory -> tree /var/log/journal
Display tree of /var/log/samba directory -> tree /var/log/samba
Display tree of /var/www/html directory -> tree /var/www/html
Display tree of /etc/systemd directory -> tree /etc/systemd
Display tree of /etc/ssh directory -> tree /etc/ssh
Display tree of /etc/httpd directory -> tree /etc/httpd
Display tree of /etc/nginx directory -> tree /etc/nginx
Display tree of /etc/sysconfig directory -> tree /etc/sysconfig
Display tree of /etc/init.d directory -> tree /etc/init.d
Display tree of /etc/rc.d directory -> tree /etc/rc.d
Display tree of /etc/sysctl.d directory -> tree /etc/sysctl.d
Display tree of /etc/pki directory -> tree /etc/pki
Display tree of /etc/ssl directory -> tree /etc/ssl
Display tree of /etc/modprobe.d directory -> tree /etc/modprobe.d
Display tree of /etc/grub.d directory -> tree /etc/grub.d
Display tree of /etc/skel directory -> tree /etc/skel
Display tree of /run/user/1000 directory -> tree /run/user/1000
Display tree of /run/user/1000/gvfs directory -> tree /run/user/1000/gvfs
Display tree of /run/lock directory -> tree /run/lock
Display tree of /run/shm directory -> tree /run/shm
Display tree of /tmp directory -> tree /tmp
Display tree of /dev directory -> tree /dev
Display tree of /sys/kernel/security directory -> tree /sys/kernel/security
Display tree of /sys/fs directory -> tree /sys/fs
Display tree of /sys/devices directory -> tree /sys/devices
Display tree of /proc/irq directory -> tree /proc/irq
Display tree of /proc/sys directory -> tree /proc/sys
Display tree of /proc/scsi directory -> tree /proc/scsi
Display tree of /proc/bus directory -> tree /proc/bus
Display tree of /proc/net directory -> tree /proc/net
Display tree of /proc/tty directory -> tree /proc/tty
Display tree of /proc/sysvipc directory -> tree /proc/sysvipc
Display tree of a specific process -> tree /proc/$pid
Display tree of /proc/sys/kernel directory -> tree /proc/sys/kernel
Display tree of /proc/sys/net directory -> tree /proc/sys/net
Display tree of /sys/firmware directory -> tree /sys/firmware
Display tree of /sys/power directory -> tree /sys/power
Display tree of /sys/devices/platform directory -> tree /sys/devices/platform
Display tree of /sys/class directory -> tree /sys/class
Display tree of /var/ftp directory -> tree /var/ftp
Display tree of /usr/local/bin directory -> tree /usr/local/bin
Display tree of /usr/local/sbin directory -> tree /usr/local/sbin
Display tree of /usr/local/lib directory -> tree /usr/local/lib
Display tree of /usr/local/include directory -> tree /usr/local/include
Display tree of /usr/local/share directory -> tree /usr/local/share
Display tree of /usr/local/man directory -> tree /usr/local/man
Display tree of /usr/local/games directory -> tree /usr/local/games
Display tree of /usr/local/mysql directory -> tree /usr/local/mysql
Display tree of /usr/X11R6 directory -> tree /usr/X11R6
Display tree of /usr/games directory -> tree /usr/games
Display tree of /usr/include/linux directory -> tree /usr/include/linux
Display tree of /usr/share/man directory -> tree /usr/share/man
Display tree of /usr/share/doc directory -> tree /usr/share/doc
Display tree of /usr/share/locale directory -> tree /usr/share/locale
Display tree of /usr/share/fonts directory -> tree /usr/share/fonts
Display tree of /usr/share/zoneinfo directory -> tree /usr/share/zoneinfo