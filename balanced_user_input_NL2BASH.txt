Display process information twice, waiting one second between each, filtering out the header line.
Calculte and output amount of CPU load taken by all processes belonging to user 'abc'.
Display cumulative CPU usage over 5 seconds.
Display info on most CPU-intensive processes once and exit.
Display information about number of processes in various states.
Display information on CPU usage.
Display numbers of processes in following states: running, sleeping, stopped, and defunct (zombie).
Display process information with full command lines.
Display process information for all processes whose command line contains processname.
Display process information once, adding __CUSTOM_LINE_MARKER at the end of each line.
Display the percentage of CPU usage allocated to user processes.
Display various information about process currently taking the most CPU time.
Find the process currently taking the most CPU time.
Find the process currently taking the most CPU time.
Monitor all processes belonging to user 'abc' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes whose command contains 'http'.
Monitor all processes whose command includes 'java'.
Monitor all processes whose command includes 'process-name'.
Monitor only processes whose command contains string_to_match_in_cmd_line.
Monitor process activity, starting with the last remembered c state reversed: typing c toggles between using process names or full command lines.
Set variable LINE to full process info of process currently taking the most CPU time, squeezing multiple consecutive spaces into one.
Set variable OUTPUT to full process info of process currently taking the most CPU time.
Use 'top' to monitor one process.
Use 'top' to monitor process 'a.out'
Use 'top' to monitor process 'a.out', printing information 100 times.
Use 'top' to monitor the newest instance of ProgramName.
Use 'top' to monitor the newest instance of ProgramName.
Use 'top' to monitor the newest instance of ProgramName.
Use 'top' to monitor the oldest instance of ProgramName.
Send e-mail to your_email@domain.com with subject any subject containing process statistics output by the GNU version of 'top'.
Copy loadable kernel module mymodule.ko to the drivers in modules directory matchig current kernel.
Display all lines containing IP_MROUTE in the current kernel's compile-time config file.
Display current running kernel's compile-time config file.
Look for any instance of HIGHMEM in the current kernel's compile-time config file.
Search for command tail in the maps of the process with PID 2671
Use Midnight Commander's view mode to interactively display the current kernel's compile-time config file.
Display a tree-like view of USB devices, letting the user page through it with the arrow keys, with the Q key to quit.
Display all lines containing PROBES in the current kernel's compile-time config file.
Display all lines containing UTRACE in the current kernel's compile-time config file.
Look for any instance of ds1337 in the modules.alias file matching current kernel release
Page through extended USB information.
Collect process information and display only lines containing pattern specified by variable app_name.
Show the internal memory size used by process whose PID is specified by variable PID.
Show the private address space used by process whose PID is specified by variable PID.
A no-op on filename with sed
Abort the shell or script on the first failed command
Add A new line on top of each *.py files under current directory
Add Added line on top of each *.py files under current directory
Add new. to the beginning of the name of original.filename, renaming it to new.original.filename.
Add new. to the beginning of the name of original.filename, renaming it to new.original.filename.
Add prefix to every non-blank line in file.txt
Add prefix_ to every non-blank line in a.txt
Add a cron job to existing list, without removing existing ones, ro tun scripty.sh at 2:01 am, 3rd day of april (4th month), if that day happens to be a friday (5th day of the week starting with sunday=0).
Add a date time stamp to every line of output in ping google.com
Add a date time stamp to every line of output in ping host
Add a line number to every line in infile
Add a line number to every line in long-file
Add a number prefix followed by ')' to each line in $string
Add content of filename to the existing cron jobs of user user, without removing the previously existing cron jobs.
Add cron lists from file1 and file2 to list of cron jobs, giving errors for any lines that cannot be parsed by crontab.
Add cron lists from filename to list of cron jobs, giving errors for any lines that cannot be parsed by crontab.
Add directory $HOME/Pictures to the directory stack
Add executable permission to java_ee_sdk-6u2-jdk-linux-x64.sh
Add executable permission to pretty-print
Add executable permission to rr.sh
Add execute permission to ComputeDate, col, and printdirections for all users
Add execute permission to all files ending in .sh
Add group write permission to all files and directories in the current directory including hidden files and excluding ..
Add group write permission to all files and directories in the current directory including hidden files and excluding ..
Add group write permission to all files matching * or ...*
Add line numbers to each non-blank line in file starting with number 1000001
Add newline before all 2nd and consequent occurrences of '3d3d' in file 'temp' and write each line from the output to files with prefix 'temp' and numeric suffixes
Add prefix prefix_ to all .jpg files in the current directory
Add prefix like number and ^M${LOGFILE}>  to every non-blank line received on standard input
Add read and execute permission to command node
Add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it.
Add variable TESTVAR with value bbb to a temporary environment, and search for TESTVAR in all variables and their values in the resulting environment.
Adds %Pathname% to the dirs stack (Windows format).
Adds execution permissions on a script ./etc/bash_completion within Homebrew home folder path.
Adjust the timestamp of 'filename' by subtracting 2 hours from it.
Adjust the timestamp of file $filename by subtracting 2 hours from it
Alias cd $(history -p !!:1) as cd-
Allocate a pseudo-terminal and execute screen -r -X ls which executes ls within the screen session on host example.com
Allocate a pseudo-terminal and execute screen -r followed by ls on host example.com
Allocate a pseudo-terminal and execute screen -r on host example.com
Allow all users to execute myscript.sh
Allow all users to execute '$pathToShellmyShell.sh'
Allow anyone to run command Xvfb as the owner of Xvfb
Allow ssh from 127.0.0.1 on port someport through proxy.host to host.in.the.remote.net on port 22
Always answer no to any prompt from <command>
Answer 1 repeatedly until command exits
Answer n to any prompts in the interactive recursive removal of dir1, dir2, and dir3
Answer y to all Are you sure? prompts from command cp * /tmp
Answer y to all prompts of rm -rf foo
Answer y to any prompts in the interactive recursive removal of dir1, dir2, and dir3
Append  | COUNTRY to every line in file
Append & Bytes to the end of every line in $TEMPFILE and format the result as a table
Append <br/> to the end of each line in 1\n2\n3
Append \r on each line of file input and display the printable characters
Append deb blah ... blah to /etc/apt/sources.list as root
Append foo and bar column in file file with values dependent on the current table contents
Append history lines from this session to the history list
Append the contents of .cwdhist file to the current in-memory history list
Append the contents of file.txt to the current in-memory history list
Append the current date in '%Y%m%d_%H%M' format with the basename of $0 and save it to variable 'LOGNAME'
Append the current date in '%d%m%Y-%H-%M' format, '_' and the current username, then save it in 'name' variable
Append the current date to variable 'LBUFFER'
Append the current user to the server access control list for X
Append the date and command ran to /tmp/trace after every command
Append the last modification time of file $arg as the seconds since epoch with a preceding space to the variable 'KEY'
Archive ./dir to user@host:/path via ssh on port 2222 and display progress
Archive ./htmlguide to ~/src/ with resolved symbolic links and delete any extraneous files from ~/src/ not found in ./htmlguide
Archive /home/abc/* to /mnt/windowsabc with human readable output
Archive /home/path to path on host server showing progress and statistics and remove files in the destination not found in the source
Archive /home/user1 to wobgalaxy02:/home/user1 excluding hidden files
Archive /local/path/some_file to /some/path on host server.com authenticating as user usr, compress data during transmission, show progress details.
Archive /media/10001/music/ on host server to local directory /media/incoming/music/ and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission
Archive /media/Incoming/music/ to /media/10001/music/ on host server and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission
Archive /my/dir on host server as user user to the current local directory excluding files ending in .svn
Archive /path/to/application.ini on host source_host to current directory.
Archive /path/to/copy on host remote as user user to /local/path via ssh on port $portNumber
Archive /path/to/copy on host remote.host as user user to /path/to/local/storage updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission
Archive /path/to/copy to /path/to/local/storage on host host.remoted.from as user user updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission
Archive /path/to/files on host remotemachine authentifying as user user and compressing data during transmission, copy symlinks as symlinks.
Archive /path/to/files to /path on host user@targethost with elevated permission on the remote host
Archive /path/to/files to user@targethost:/path
Archive /path/to/files/source to user@remoteip:/path/to/files/destination via ssh on port 2121
Archive /path/to/sfolder to name@remote.server:/path/to/remote/dfolder compressing the data during transmission
Archive /path/to/sfolder to name@remote.server:/path/to/remote/dfolder preserving hard links and compressing the data during transmission
Archive /path/to/sfolder/ to name@remote.server:/path/to/remote/dfolder preserving hard links and compressing the data during transmission
Archive /source and all files under folder/ to /dstfolder/ on host remoteserver as user user without copying files that already exist
Archive /source/backup to /destination with compression during transfer
Archive /top/a/b/c/d to host remote using relative path names
Archive /usr/local/ to /BackUp/usr/local/ on host XXX.XXX.XXX.XXX via ssh and show progress
Archive /var/www/test/ to /var/www/test on host 231.210.24.48 as user ubuntu via ssh using identity file /home/test/pkey_new.pem
Archive <SOURCE_DIR> to rsyncuser@192.168.1.110:/srv/www/prj112/myfolder
Archive _vim/ to ~/.vim suppressing non-error messages and compressing data during transmission
Archive _vimrc to ~/.vimrc suppressing non-error messages and compressing data during transmission
Archive blanktest/ to test/ deleting any files in the destination not found in the source
Archive directory preserving hard links from host remote to the current local directory and keep partial files, handle sparse files efficiently, and itemize changes made
Archive fileToCopy to /some/nonExisting/dirToCopyTO on host ssh.myhost.net via ssh
Archive foo/bar/baz.c to remote:/tmp/ preserving the relative path of foo/bar/baz.c
Archive myfile to /foo/bar/ and create directory /foo/bar/ if /foo/ exists
Archive path/subfolder to path, skipping files that are newer at the destination.
Archive path/to/working/copy to path/to/export excluding files or directories named .svn
Archive somedir/./foo/bar/baz.c to remote:/tmp/ preserving the relative path of foo/bar/baz.c
Archive source to destination via ssh on port PORT_NUMBER
Archive source to destination via ssh with rwX permissions
Archive source to root@remote_server_name:/opt/backups via ssh on port 3382 and compress data during transmission
Archive src to dest via ssh with permissions set to 755
Archive src to dst updating files existing in dst
Archive src to dst without overwriting existing files in dst
Archive src-dir to dest-dir on remote-user@remote-host and delete any files in dest-dir not found in src-dir
Archive src/bar on host foo to local directory /data/tmp
Archive user@host1:/directory/ to user@host2:/directory2/ via ssh and compressing data during transmission
Archive user@remoteip:/path/to/files/ to /local/path via ssh on port $portNumber and compressing data during transmission
Archive all .txt files in the current directory to /path/to/dest keeping partially transferred files
Archive all files in folder1 to copy_of_folder1 specifying to include files info.txt and data.zip
Archive all files beginning with .env or .bash in current directory to user's home directory on host app1, preserving timestamps and skipping files that are newer on app1
Archive all files specified on standard input under /path/to/files to /path on host targethost as user user with escalated privileges
Archive and compress all files in data directory into data.tar.gz
Archive any files changed in the last day from remote_host to local_dir
Archive current directory to /some/path on localhost, using ssh to authentify as user me, only update files that are newer in the source directory.
Archive directory . to server2::sharename/B
Archive directory /mnt/data to /media/WD_Disk_1/current_working_data/, deleting any extraneous files in destination, compress data during copy.
Archive directory symdir to symdir_output preserving symbolic links.
Archive directory tata to directory tata2, compressing data during copy.
Archive directory specified by variable i to /iscsi preserving relative paths.
Archive directory specified by variable myFolder to current directory.
Archive file 'file' with bzip2 tool, store compressed data to a file 'logfile' and also print to screen
Archive files in sorce_dir to target_dir
Archive files in /mnt/source-tmp to /media/destination
Archive key.pub to directory .ssh in user's home directory on host specified by first parameter to function or script, using ssh to connect on port specified by second parameter to function or script, compress data during transmission.
Archive preserving permissions and ownership files in /var/www/ on host user@10.1.1.2 to local /var/www/
Archive showing progress sourcefolder to /destinationfolder excluding thefoldertoexclude
Archive showing progress all files in /media/2TB\ Data/data/music/ to /media/wd/network_sync/music/ excluding files matching *.VOB, *.avi, *.mkv, *.ts, *.mpg, *.iso, *ar, *.vob, *.BUP, *.cdi, *.ISO, *.shn, *.MPG, *.AVI, *.DAT, *.img, *.nrg, *.cdr, *.bin, *.MOV, *.goutputs*, *.flv, *.mov, *.m2ts, *.cdg, *.IFO, *.asf, and *.ite
Archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz
As root, edit the cron job list of user apache using the editor specified by EDITOR environment variable, or default /usr/bin/editor if this variable is not set.
Assign a name when starting a screen session
Assign a name when starting a screen session
Assign a name when starting a screen session
Assign a name when starting a screen session
Assign the alias rm100m to a find command that removes any .tar file larger than 100M.
Assign the alias rm1g to a find command that removes any .tar file larger than a gigabyte.
Assign the alias rm2g to a find command that removes any .tar file larger than 2 gigabytes.
Assign the alias rm5g to a find command that removes any .tar file larger than 5 gigabytes.
Assign the alias rmc to a find command that deletes all core dump files in the currenty directory and below.
Assigns MAC address 00:80:48:BA:d1:30 to interface eth0.
Attach to a not detached screen session. (Multi display mode).
Attaches to 'test1' tmux session.
Attaches to a 'session name' tmux session.
Attempt to connect as root to localhost and copy /home/reportuser/dailyReport.doc to directory /root/dailyReports/20150105/ - this will normally fail because ssh won't accept root connections by default.
Attempt to connect as root via ssh to host IP and copy /root/K to local machine, passing option StrictHostKeyChecking=no to the ssh backend - this will normally fail because ssh servers by default don't accept root logins.
Attempt to connect as root via ssh to host whose IP address or hostname is specified by environment variable IPADDRESS - this will normally fail because ssh servers normally don't accept root logins.
Automatically log into SOME_SITE.COM as user YOUR_USERNAME using password YOUR_PASSWORD
Automatically log into SOME_SITE.COM on port 2400 as user YOUR_USERNAME using password YOUR_PASSWORD
Automatically send y to sudo rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm to automate installation
Automatically spell check file text.txt using aspell command
Automatically spell check file text.txt using ispell command
Automatically spell check file text.txt using ispell command and log the output to out.txt
Backup MySQL database database with username and pswd, compress with gzip and add the time stamp before emailing to me@domain.com
Backup a directory with a zenity progress bar
Bind mount /dev/random on /tmp/fakerandom
Bind mount /original/path on /new/path
Bind mount /something on /new_something
Brings down network interface eth0.
Bypass all prompts by sending return to the install script downloaded from https://raw.github.com/Homebrew/homebrew/go/install
Calculate a list of duplicate md5 sum hashes for all the .java files in the current directory
Calculate md5 checksum of $KEY, take the 1st to 10th character, append them with the string '/tmp/command_cache.' and save the rsultant string to variable FILE
Calculate md5 checksum of $line and save to variable 'md5'
Calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum'
Calculate md5 checksum of the list of all files/dirs in /path recursively including dot files and excluding the patterns 'run', 'sys', 'tmp' and 'proc', then check the checksum against the checksum saved in /tmp/file
Calculate md5 checksum of theDirname
Calculate md5 sum of empty string
Calculate md5 sum of empty string
Calculate md5 sum of file $ecriv
Calculate md5 sum of file $item and save it to variable 'md5'
Calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'
Calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'
Calculate md5 sum of files $source_file and $dest_file
Calculate md5 sums for each files matching 'main.cpp*'
Calculate md5sum of the contents of the archives '/tmp/tst.gz', '/tmp/tst.bz2', '/tmp/tst.lzma' and '/tmp/tst.xz'.
Calculate the crc32 of testring
Calculate the crc32 of testring
Calculate the factorial of 500
Calculate the md5 checksum of the current directory structure and save it in variable SUM
Calculate the md5 sum of a
Calculate the md5 sum of exampleString
Calculate the md5 sum of logdir and print only the hash
Calculate the md5 sum of password
Calculate the md5 sum of submission.cpp with less sensitivity to superficial changes like comments or whitespace
Calculate the md5 sum of yourstring
Calculate the md5 sum of all .py files in /your/dir including content and filenames
Calculate the md5 sum of all *.py files in the current directory
Calculate the md5 sum of all files in /your/dir including content and filenames
Calculate the md5 sum of all files in /your/dir including content and filenames and following symbolic links
Calculate the md5 sum of all files in the current directory with the filename printed first
Calculate the md5 sum of hex byte 61
Calculate the md5 sum of the contents of $FILES
Calculate the md5 sum of the contents of the sorted list of files $FILES
Calculate the md5 sum of the file filename and print only the hash
Calculate the md5 sum of the output of du -csxb /path and compare it against the md5 sum saved in file
Calculate the md5 sum of the tar archive of dir
Calculate the md5sum of the executable file of command cc
Calculate the md5sum of the executable file of command gcc
Calculate the md5sum of the executable file of command 'c++'
Calculate the number of bytes of all the files listed in files.txt
Calculate the sha1 sum and md5 sum of foo
Calculate the sin values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and y.txt
Calculate the sum of all the numbers from -5 to 10
Calculate the sum of all the numbers from -5 to 10
Calculate the sum of all the numbers from 1 to 10
Calculate the sum of all the numbers from 1 to 10
Calculate the sum of all the numbers from 1 to 10
Calculate the sum of all the numbers from 1 to 100000
Calculate the sum of the 7th column of ipcs -mb
Calculate the sum of the numbers in '/file/with/numbers'
Calculate the total amount of memory usage of the current user
Calculate the values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and x.txt
Calculates process depth of process with id $processid, and stores it in a 'depth' variable.
Case-insensitive search all existing environment variables and their values for shell.
Case-insensitive search for error in file report.txt, display one page at a time, waiting for user interaction between each.
Catch output from a script printing to /dev/tty
Change all JPG filename suffixes in current directory to jpeg.
Change all cron jobs running anm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running anm.sh to be run every 10 minutes instead of 5 minutes.
Change all directories under ./bootstrap/cache/ to owner apache and group laravel
Change all directories under ./storage/ to owner apache and group laravel
Change all files with no user under /var/www to have owner root and group apache
Change all occurrences of foo to bar in the file file.txt
Change all variables containing gcc.4.2 to containing gcc64 in the current shell's environment.
Change directory to $dir1 and resolve any symlinks in the resulting path
Change directory to /lib/modules/ of the current kernel release
Change directory to /path/to/pdf
Change directory to parent directory and do not resolve any symlinks in the resulting path
Change directory to the lib directory located two parent directories above the path to command perl
Change directory to the alphabetically last path under the current directory
Change directory to the basename of $1 with .tar.gz removed
Change directory to the current user's home directory
Change directory to the directory containing file path $1
Change directory to the directory containing the oracle executable
Change directory to the directory containing the oracle executable
Change directory to the directory containing the oracle executable
Change directory to the directory containing the current script
Change directory to the directory containing the executable file of command oracle
Change directory to the download directory specified in the current user's user-dirs.dirs file
Change directory to the download directory specified in the current user's user-dirs.dirs file
Change directory to the output of command '~/marker.sh go $@'
Change directory to the parent of the real path of the current script
Change directory to the real path of the current working directory of process $PID
Change directory to the real path of the directory containing the current script
Change directory to the user's home directory
Change every directory under /var/www/html/ to have permissions 775
Change every file under /var/www/html/ to have permissions 664
Change file owner and group of /path/to/yourapp to root and print a diagnostic
Change folder to the one where $0 link target file is located.
Change login shell to the full path of zsh
Change onwer of file to user_name
Change onwer to root and group to wheel of com.xxxx.adbind.plist
Change owner and group of script.sh to root
Change owner of folder to user_name
Change owner of my_test_expect.exp to el
Change owner to $1 and group to httpd of .htaccess
Change owner to $FUID and group to $FGID of $FILE2
Change owner to $user and group to $group of $file
Change owner to bob and group to sftponly of /home/bob/writable
Change owner to root and group to dockerroot of /var/run/docker.sock
Change owner to root and group to wheel of adbind.bash
Change owner to root and group to wheel of bin
Change owner to root and group to www-data of /foobar/test_file
Change ownership of /data/db to the current user
Change ownership of /vol to the current user
Change permissions of .bash_logout, .bashrc, and .profile to 444
Change permissions of .git/hooks/pre-commit to 777
Change permissions of .git/hooks/prepare-commit-msg to 777
Change permissions of /dvtcolorconvert.rb to 755
Change permissions of /usr/bin/wget to 777
Change permissions of mksdcard to 755
Change permissions of directory /home/sshtunnel/ to 555
Change symbolic link $f into a file
Change the group of myfile to friends
Change the owner and group of it to root
Change the owner and group of testfile.txt to root
Change the owner and group of uid_demo to root
Change the owner of $JBOSS_CONSOLE_LOG to $JBOSS_USER
Change the owner of /var/www/html/mysite/images/ to nobody
Change the owner of /var/www/html/mysite/tmp_file_upload/ to nobody
Change the owner of destination_dir to user
Change the owner of process to root
Change the owner of all files in /empty_dir/ to root using at most 10 files at a time
Change the owner of all files in /empty_dir/ to root using at most 10 files at a time
Change the owner of the directory name of $JBOSS_PIDFILE to ${JBOSS_USER} and always return successfully
Change the owner to hduser and group to hadoop of {directory path}
Change the owner to owner and group to nobody of public_html
Change the owner to root and group to specialusers of dir1
Change the owner to user and group to group of files file ...
Change the ownership of /etc/udev/rules.d/51-android.rules to root
Change the ownership of /home/bob to root
Change the ownership of file.sh to root
Change the timestamp of symbolic link somesymlink to current date/time
Change to directory 'foo' and print to terminal all received on standard input
Change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one.
Change to directory listed in file '$HOME/.lastdir'
Change to folder where the oracle binary is.
Change to folder where the oracle binary is.
Change to folder where the oracle binary is.
Change to folder where the oracle binary is.
Change to folder where the oracle binary is.
Change to location of '$TARGET_FILE' file.
Change to parent directory and resolve any symlinks in the resulting path, making the physical path the current one.
Change to the directory containing the oracle executable
Change to the directory of the executable <file>
Change to the directory of the executable python
Change to the directory pointed by variable TAG
Change user to amzadm and group to root of /usr/bin/aws
Changes group ownership of '/etc/btsync/[prefered conf name].conf' to 'btsync'.
Changes group ownership of '/home/www-user/php_user.sh'  to 'www-data'.
Changes group ownership of '/var/run/fcgiwrap.socket' to 'forge'.
Changes group ownership of 'logdir' to 'loggroup'.
Changes group ownership of 'myprog' to 'groupb'.
Changes group ownership of 'myprogram' to ${USER} (the current user)
Changes group ownership of 'public' and 'private' to 'god'.
Changes group ownership of 'public' to 'pub'.
Changes group ownership of 'shared' to 'Workers'.
Changes group ownership of 'target_directory' to 'target_group'.
Changes group ownership of /sys/class/gpio/export and /sys/class/gpio/unexport to 'gpio'.
Changes the group of defined file.
Changes to the directory where 'ssh' executable is located.
Check if $FILE_PATH exists on $HOST
Check if $file contains DOS line endings
Check if /path/to/dir is a nfs mount point
Check if /path/to/file exists on remote_host
Check if /path/to/file exists on remote host host
Check if \[$VLABEL\] is mounted and save the result in variable AMV
Check if server1 and server2 have the same list of RPMs installed
Check if ~/mnt/sdc1 is mounted
Check if $path_in_question is mount point of filesystem
Check if 'nullglob' shell option is enabled, and if so, saves its status in 'is_nullglob' variable.
Check if *RBENV* variable is defined in global environment
Check if *RBENV* variable is defined in tmux session 'sessname' environment.
Check if RBENV is defined in the current tmux session environment
Check if a drive is mounted to nfs
Check if a drive with UUID $UUID is mounted
Check if a drive with UUID 09b8f1ab-8d4b-4c5f-b395-40be09c090b0 is mounted
Check if a drive with UUID 09b8f1ab-8d4b-4c5f-b395-40be09c090b0 is mounted on /media/WD_Disk_1
Check if command c++ and command g++ are equal
Check if content of all top-level *.txt files in the current directory contain only unique lines
Check if current shell is running within a 'screen' process.
Check if current system is running in 64-bit addressing.
Check if process ID 1 exists and current user has permission to send it signals.
Check if the contents of file subset is a subset of file set
Check if the file somelink links to exists
Check md5sum of directory /path against the checksum saved in file 'file'
Check that the master SSH control socket my-ctrl-socket to jm@sampledomain.com is running
Check that the master ssh connection officefirewall is running
Check the bit width of static library libsomefile.a
Check the environment variables generated by switching to the root account.
Check whether $path_in_question is a mount point
Check whether /full/path is a mount point with no output and using the exit code
Check whether current terminal is opened in a screen session.
Check which package the sort command belongs to in rpm
Checks compressed file integrity.
Checks that 'monit' user is in 'www-data' group.
Checks your Homebrew system for potential problems.
Clean up all zombie processes by instantly killing their parent process with SIGKILL signal.
Clean up all zombie processes by sending SIGTERM signal to their parent process, which requests them to terminate.
Clean up the output of unzip -l and print only the jar files
Clear the in-memory history
Clear the in-memory history and read from the current history file
Clear the terminal's search history
Clears terminal screen.
Clears the terminal screen.
Clone the permissions of $srcdir to $dstdir
Clone the permissions of $srcdir to $dstdir on OSX
Close the current screen session
Close the master SSH control socket my-ctrl-socket to jm@sampledomain.com
Collapse double slashes in variable dir into a single one.
Combine every two lines of standard input
Compare $source_file and $dest_file line by line
Compare current.log and previous.log line by line and print lines containing regex pattern >\|<
Compare fastcgi_params and fastcgi.conf line by line, output 3 lines of unified context, and print the C function the change is in
Compare file1 and file2 line by line with 3 lines of unified context
Compare column 3 with column 2 of the next line in file and format output as a table
Compare each file in repos1/ and repos2/, treat absent files as empty, ignore differences in whitespace and tab expansions, and print 3 lines of unified context
Compare files A1 and A2 with 3 lines of unified context and print lines beginning with +
Compare files 'file1' and 'file2' and print in three columns strings unique for first file, second file, and common ones
Compare files in /tmp/dir1 and /tmp/dir2, treat absent files as empty and all files as text, and print 3 lines of unified context
Compare files in /tmp/dir1 and /tmp/dir2, treating absent files as empty and all files as text
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones
Compare text hello and goodbye line by line
Compare the contents of /bin and /usr/bin line by line
Compare the contents of gzip-ompressed files file1 and file2
Compares two listings 'ls' and 'ls *Music*', showing only strings that unique for first listing.
Compose filepath as folder path where file $SRC is located, and lowercase filename of $SRC file, and save it in 'DST' variable
Compose filepath as folder path where file $f is located, and lowercase filename of $f file, and save it in 'g' variable
Composes full process tree with process id numbers, and prints only those strings that contain 'git'.
Compress Hello world, base64 encode, and save to variable FOO
Compress archive.tar
Compress hello world and save to variable hey
Compress my_large_file with gzip and split the result into files of size 1024 MiB with prefix myfile_split.gz_
Compress mysqldbbackup.sql with gzip and email it with subject MySQL DB to backup@email.com
Compress $file file using gzip
Compress a file named '{}' in the current directory
Compress all .txt files in all sub directories with gzip
Compress all files with '.txt' extension under current directory
Compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in .log
Compress and display the gzipped filenames of every file on the system that is greater than 100000 bytes and ends in .log
Compress and display the original filename of every file on the system that is greater than 100000 bytes and ends in .log
Compress every file in the current directory that matches *cache.html and keep the original file
Compress from standard input and print the byte count preceded with 'gzip.'
Compress from standard input with gzip
Compress the base64 encoded first 200 characters of /dev/urandom as input to uuencode
Compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout
Compresses all files in a current folder (not recursively).
Compresses all files listed in array $*, executing in background.
Compresses file 'example.log' keeping original file in place.
Compute difference between two dates
Concatenate all PDF files under current directory into all.pdf
Concatenate with a space every other line in input.txt
Connect as ssh user specified by variable USER to host whose IP address or host name is specified by HOST, and copy remote file specified by variable SRC to location on local host specified by variable DEST, disabling progress info but enabling debug info.
Connect to $USER_AT_HOST using connection sharing on $SSHSOCKET and request the master to exit
Connect to host $USER_AT_HOST in master mode in the background without executing any commands and set the ControlPath to $SSHSOCKET
Connect to host ${HOSTNAME} as user ${USERNAME} and execute ${SCRIPT} non-interactively
Connect to host hostname as user username, automatically add the host key to the list of known hosts, and execute pwd; ls non-interactively
Connect to host remotehost as ssh user user to copy remote file /location/KMST_DataFile_*.kms to current directory on local host.
Connect to host server_b as ssh user user and copy local file /my_folder/my_file.xml to server_b's directory /my_new_folder/.
Connect to host 'hostname' as user 'username' by forcing host key confirmation
Connect to port 1234 of specified IP address or hostname as ssh user user, and copy all visible files in /var/www/mywebsite/dumps/ on this host to local directory /myNewPathOnCurrentLocalMachine - this directory must already exist on local host.
Connect to port 2222 of example.com as ssh user user, and copy local file /absolute_path/source-folder/some-file to remote directory /absolute_path/destination-folder
Connect via ssh to your.server.example.com and recursively copy directory /path/to/foo on this host to direcotry /home/user/Desktop on local host, using blowfish cipher algorithm.
Constantly write y to backingfile as a background process
Continuously answer y to any prompt from mv ...
Continuously convert 20131202 into 2013 12 02 and print the result
Continuously output y at a rate of 10 bytes per second
Continuously print 123456789 and line buffer the output via grep for input to { head -n 1; head -n 1; }
Continuously print the seconds since Unix epoch and the ping time to google.com
Continuously send Y to input of command-that-asks-for-input
Continuously send Yes plus newline to the program ./ittp-update.sh
Continuously send a then b to script.py
Continuously send ok plus newline to the program recalcitrant.php
Continuously send y as input to ./MyScript.sh and ignore standard error
Continuously send y as input to cat which outputs to more
Continuously send y to all prompts of command rm
Continuously send y to input of command
Continuously send y to input of command-that-asks-for-input
Continuously send ping requests to broadcast address 10.10.0.255 and print the IP addresses who respond
Continuously write Hidden over the entire /dev/sdb disk
Continuously write Hidden separated by null terminators over the entire /dev/sdb disk
Continuously write Hidden separated by spaces over the entire /dev/sdb disk
Continuously write UUUUUUUUUUUUUUUUU without newlines to /dev/to/overwrite
Convert /usr/share/man/man1/man.1.gz to html
Convert 1199092913 to dotted decimal IPv4 address
Convert 595a into characters and then print the hexadecimal and printable characters of each byte
Convert ; separated list luke;yoda;leila to new line separated list
Convert abc to a string of hexadecimal bytes
Convert some random\nbytes to % separated hexadecimal byte values
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert all characters in $a to lower case and save to variable b
Convert all characters in $a to upper case and save to variable b
Convert all characters in standard input to lower case
Convert relative path /x/y/../../a/b/z/../c/d into absolute path with resolved symbolic links
Convert relative symbolic link $link to absolute symbolic link
Convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results
Convert the content of variable 'CLEAN' to small letters
Convert the contents of foo.md to GitHub style markdown and display with lynx
Convert the contents of infile from dos to unix style text and display the result as printable characters or backslash escapes
Convert the contents of 'var1' variable to lowercase
Convert the first 1024 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 16 characters in /dev/random to a single hexadecimal value
Convert the string $myArray into a bash array using ; delimiters
Copies $project_dir/iTunesArtwork, to the 'Payload/iTunesArtwork', rewriting files if necessary.
Copies ${FILE} to COLLECT folder with unique name formatted like 'job_XXXXXXXXX'.
Copies '[MacVim_source_folder]/src/MacVim/mvim' to the  '/usr/local/bin', printing info message on each operation.
Copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files.
Copies 'src' to 'dest' preserving overwriting the existing files.
Copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.
Copies defined file to the target folder without overwriting existing files.
Copies file '/boot/config-`uname -r`' to the  '.config', printing info message and prompting before owerwriting files.
Copies file 'file.dat' to each top-level directory in the current directory.
Copies file 'file.txt' to each top-level directory in the current directory.
Copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'.
Copies file 'fileName.txt' to each of directories listed in the 'allFolders.txt' list.
Copies file 'test' to each of directories like './fs*/*'.
Copies files 'src/prog.js' and 'images/icon.jpg' with fully-defined path to '/tmp/package' directory.
Copies newest file under the current folder to the '/tmp/'
Copy *.cc, *.h, and SConstruct to rsync://localhost:40001/bledge_ce using blocking IO
Copy ./export recursively to /path/to/webroot preserving permissions
Copy /Users/username/path/on/machine/ to username@server.ip.address.here:/home/username/path/on/server/ and convert encoding from UTF-8-MAC to UTF-8
Copy /home/username/path/on/server/ to username@your.ip.address.here:/Users/username/path/on/machine/ and convert encoding from UTF-8 to UTF-8-MAC
Copy /new/x/y/z/ over the network to user@remote:/pre_existing/dir/ preserving the directory hierarchy
Copy /path/to/source to '/path/to/dest' in remote username@computer
Copy 6.3.3/6.3.3/macosx/bin/mybinary to ~/work/binaries/macosx/6.3.3/ and create directory ~/work/binaries/macosx/6.3.3/ if ~/work/binaries/macosx/ exists
Copy file from REMOTE into local clipboard
Copy fileName.txt to all directories listed in allFolders.txt - names may not contain spaces.
Copy local_file to user@host:remote_file via ssh protocol, saving partially transferred files, and showing progress
Copy local_file to user@host:remote_file via ssh protocol, saving partially transferred files, and showing progress
Copy some_file_name to destination_directory and change ownership to someuser:somegroup
Copy source recursively to destination excluding path1/to/exclude and path2/to/exclude
Copy src to dest if src is newer than dest
Copy src/prog.js and images/icon.jpg to /tmp/package keeping relative path names
Copy src/prog.js and images/icon.jpg to /tmp/package/ keeping relative path names
Copy %PATH% variable on Windows to clipboard
Copy '/path/to/source' from remote username@computer to local /path/to/dest
Copy a large sparse file sparse-1 to sparse-1-copy
Copy all directories recursively from source/ to destination/ excluding all files
Copy all directories recursively from source/ to destination/ excluding all files
Copy all files in /path/to/local/storage to /path/to/copy on host remote.host authenticating as user user
Copy all files in the current directory except those containing 'Music' to '/target_directory'.
Copy all files matching *.sh in $from/* to root@$host:/home/tmp/ compressing data during transmission
Copy and always overwrite all files in /zzz/zzz to /xxx/xxx
Copy current working directory to clipboard
Copy current working directory to clipboard
Copy default SSH public key to somehost as user myname
Copy entire directory structure from dir1 as a subdirectory of dir2, omitting any file or directory named exclude.
Copy entire directory structure from dir1 as a subdirectory of dir2, omitting empty directories, special files and any directory named exclude.
Copy file exist from directory /file/that to a new file named file in /location/for/new
Copy file 'src' to 'dest', except if 'dest' already exists.
Copy file in current directory of local host to host remote, connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer.
Copy file linked to by bar.pdf to bar.pdf
Copy file linked to by file to file
Copy file or directory 'gtest' from directory 'include' in current directory to /usr/include, preserving ownerships and permissions.
Copy file or folder linked to by file to file
Copy files printed by any_command_what_produces_relative_path_names to /new/parent/dir preserving the directory hierarchy
Copy local file $1 to host $2 into host directory $3
Copy local file file via ssh to remote host path /directory/
Copy permissions from version2/somefile to version1/somefile
Copy recursively /source/backup to /destination preserving symbolic links, modification times, and permissions
Copy recursively tata/ to tata2/ and remove read, write, and execute permission for other
Copy specific sub-directories company1/ and company1/unique_folder1 from user@server.com:/path/to/old/data/ to /path/to/new/data via ssh
Copy src_dir recursively to dest_dir, but without overwriting existing files.
Copy the 3 specified files to /tmp/package, preserving/creating directory structure of each file as specified on command line.
Copy the entire /lib and /usr directory including symlinks from pi@192.168.1.PI to $HOME/raspberrypi/rootfs and delete files after the transfer
Copy the entire directory tree under t1 to t2, do not create a containing t1 directory in t2.
Copy the executable python2.7 in $PATH to myenv/bin/python
Copy the file foo.sh into /path/to/cotainer of the docker container
Copy the file foo.sh into /tmp of the docker container
Copy the owner and group from file.txt to $tempfile
Copy the owner and group of oldfile to newfile
Copy the owner and group of originalfile to newfile
Copy the standard output of a bash session to /var/log/bash.out.log
Count lines that are neither blanks nor comments in a file 'foo.pl'
Count non-blank lines in a file 'foo.c'
Count non-blank lines in a file 'foo.c'
Count number of A records of domain '$domain' on nameserver '$server' and save value in 'result' variable
Count number of lines for each file containing ASCII text under git repository.
Count number of lines in Sample_51770BL1_R1.fastq.gz
Count number of lines in all files matching *R1*.fastq.gz
Count number of occurences of 123 in the string 123 123 123 (ie. 3)
Count number of users logged in
Count the number of X characters in infile
Count the number of x characters in filename
Count the number of areas that differ in file1 and file2 with 0 lines of unified context
Count the number of differing lines in file1 and file2
Count the number of differing lines in file1 and file2 with 0 lines of unified context
Count the number of equal lines in file1.txt and file2.txt
Count the number of equal lines in sorted files ignore.txt and input.txt
Count the number of lines in /dir/file.txt
Count the number of lines in /etc/fstab
Count the number of lines in myfile.txt
Count the number of lines in testfile wrapped to fit in a width of $COLUMNS characters
Count the number of lines in all .php files in the current directory tree
Count the number of lines in all .php files in the current directory tree using bash for Windows
Count the number of lines in all .txt files
Count the number of lines in the current git repository
Count the number of matches for the regex '\<exception\>'  in all *.txt files under /usr/share/doc/ directory
Count the number of non localhost users
Count the number of open files for PID $PYTHONPID every 2 seconds
Count the number of times each person is logged in on the system
Count the number of times that a single -----------\n separated record contains both A=2 and dummy=2 and the number of records that do not have dummy=2 in compressed file file.gz
Count the number of times that a single -----------\n separated record contains both A=2 and dummy=2 in compressed file file.gz
Count the number of unique duplicate lines in file1 and file2 combined
Count the number of unique lines in sorted file a.txt compared to sorted file b.txt
Count the number of users logged in
Count the number of users logged in minus one
Count the occurrence of 2 in the string '1 1 2 2 2 5'
Count the total number of lines in all HTML files under /usr/src that contain string foo
Count total number of lines in all *txt files  in current directory
Count used space on device /dev/sda in megabytes
Counts all *.mod files in a /boot/grub/ folder.
Counts all business days in a current month.
Counts all lines in $i file.
Counts all non-blank lines in the $i file.
Counts all top-level files in a current folder.
Counts lines in each *.cpp, *.c, *.h file.
Counts lines in each *.php file.
Counts lines in each *.php file.
Counts lines in each *.php file.
Counts lines in each of *.php files in a current folder and subfolders and prints total count as well.
Counts lines in file $FILE.
Counts lines in file $FILE.
Counts lines in file $file and prints number only.
Counts lines in file $file ignoring '//' commented lines, lines with spaces only and empty lines.
Counts lines in file 'file1' and shows progress bar while doing.
Counts lines in file 'filename' ignoring empty lines and lines with spaces only.
Counts lines in file file1 and shows progress bar while doing.
Counts lines in file file1 and shows progress bar while doing.
Counts lines in file file1 and shows progress bar while doing.
Counts lines in file fileName ignoring empty lines and lines with spaces only.
Counts lines of 'command' output.
Counts lines of 'file' file.
Counts lines of /dir/file.txt file.
Counts lines of /dir/file.txt file.
Counts lines of /etc/fstab file.
Counts lines of all *.txt files in a current folder.
Counts lines of myfile.txt file.
Counts lines with all-cased word 'null' in file 'myfile.txt'.
Counts non-blank lines in all *.py files in a current folder.
Counts non-empty lines in file fileName.
Counts number of lines returned by curl request.
Counts number of lines with 'OK' in file 'filename'.
Counts number of occurences of all ip addresses in 'ip_addresses' file, and prints all addresses with number of occurences in a descending order.
Counts number of processors and saves in variable NUMCPU.
Counts the number of lines in each *.cs file in a git repository.
Counts the number of lines in each *.hpp or *.cpp file in a git repository.
Counts the number of lines in each *.java file in a git repository.
Counts the number of lines in each *.swift or *.mm file in a git repository, escaping any space in filename.
Counts the number of lines in each file but png|jpg|ico files in a git repository.
Counts the number of lines in each file in a git repository, if file names may contain spaces.
Counts the number of lines in each file in a git repository.
Counts the number of lines in each file in a git repository.
Counts the number of lines in each file in a git repository.
Counts the number of lines in each file in a git repository.
Counts the number of lines in only text files in a git repository.
Counts the total number of lines in all the files in a git repository.
Counts total line number of all *.php file in a current folder and subfolders.
Counts total number of lines in a git repository.
Create 1000 files each file having a number from 1 to 1000 named file000 to file999
Create 256 directories named from '00' to 'ff', each containing 256 subdirectories named '00' to 'ff'.
Create 5 empty .txt files
Create 6-letter named temporary directory in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmp'
Create 6-letter named temporary file in a folder path $file1, and save the path to it in a variable 'tmpfile'
Create 6-letter named temporary file in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmpfile'
Create 998 directories one inside another with sequential names folder1, folder2, ... folder998 and create an additional folder named 'folder9991000' inside the last 'folder998' directory
Create MD5 message digest of /path/to/source/file starting at byte 100 until the 250th byte
Create a compressed archive from www and split the contents into files of at most 1073741824 bytes and use prefix www-backup.tar.
Create a compressed archive named 'my_directory.tar.gz' with files inside directory 'my_directory' without including the directory entry 'my_directory' itself
Create a compressed archive of /home and split the contents into files with at most 4000 MiB each and use prefix /media/DRIVENAME/BACKUPNAME.tgz
Create a directory named 'alpha_real' in the current directory
Create a full path symbolic link $newlink from a relative path symbolic link $origlink
Create a hard link named my-hard-link to myfile.txt
Create a local SSH tunnel from localhost port 16379 to localhost port 6379 using key keyfile.rsa and disables the interactive shell
Create a named screen session
Create a named screen session
Create a named screen session
Create a named screen session
Create a named screen session
Create a new RSA key for ssh with no passphrase, store it in ~/.ssh/id_rsa without prompting to overwrite if this file exists, and minimize output from ssh-keygen.
Create a new directory existing-dir/new-dir/ on host node
Create a new window in an existing screen session and run a script
Create a rsa key of 2048 bits with comment michael and store it in file key.
Create a rsa key with comment specified by variable APP and passphrase specified y SSHKEYPASS.
Create a sorted unique list of new or modified files comparing old/ and new/
Create a ssh key and store it in the file ~/.ssh/apache-rsync
Create a ssh key of RSA type, and prompt for a filename to store it, presenting the default for this type of key as $HOME/.ssh/id_rsa
Create a ssh key with no passphrase and store it in outfile.
Create a ssh tunnel on local port 2222 through bridge.example.com to remote.example.com port 22 without executing any commands and run in the background
Create a symbolc link in the current directory to target
Create a symbolc link named latest to the last modified file or directory in target-directory
Create a symbolc link named public_html to current/app/webroot under the current working directory
Create a symbolic link in directory ~/newlinks for each file listed in results2.txt
Create a symbolic link in target directory ~/newlinks to $source
Create a symbolic link in the current directory for each .jpg file under dir
Create a symbolic link in the current directory for each hidden file or directory in git-stuff/home/ excluding . and ..
Create a symbolic link in the current directory to $file
Create a symbolic link in the current directory to ../config/init
Create a symbolic link named $1/link to the current working directory
Create a symbolic link named $1/link to the existing full and real path of $2
Create a symbolic link named $HOME/bin/ to $HOME/downloads/fnord
Create a symbolic link named $SYMLINK to $ACTUAL_DIR
Create a symbolic link named $tmpdir/bam to the full path of command bam2 found in $PATH
Create a symbolic link named ${DESTINATION}${file} to ${TARGET}${file}
Create a symbolic link named .bash_profile to .bashrc
Create a symbolic link named .profile to git-stuff/home/profile without dereferencing .profile
Create a symbolic link named /lib/libc.so.0 to /lib/libc.so.6
Create a symbolic link named /usr/bin/my-editor to /usr/share/my-editor/my-editor-executable and attemp to hard link directories
Create a symbolic link named /usr/local/bin/subl to /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl
Create a symbolic link named foo to /var/cache/apt/archives/bash_4.3-14ubuntu1_amd64.deb
Create a symbolic link named temp to newtarget
Create a symbolic link named wh to $wh
Create a symbolic link named ~/bin/subl to /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl
Create a symbolic link named ~/bin/subl to /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl
Create a symbolic link named the basename of $file to $file
Create a symbolic link relative to link location named $dest_dir/$orig_name to $orig_dest
Create a symbolic link to $file named /tmp/allfiles
Create a symbolic link to file /usr/bin/perl named with escaped characters /usr/local/bin/perl\r\n
Create a symbolic lnk named $1/link to $dir
Create a symolic link in /usr/local/ to /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
Create a symolic link in /usr/local/bin/ to /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
Create a symolic link in /usr/local/bin/ to /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl
Create a table containing all information from S43.txt and S44.txt, merging lines where the first field of both files matches, and keeping the line that starts with Gene at the start of the file.
Create a table from '111 22 3\n4 555 66\n' with columns separated by a single space
Create a tar archive of all regular files modified in the last 24 hours
Create a temporary directory and go into it.
Create a variable CDATE in the current shell that contains the date in '%Y-%m-%d %H:%M:%S' format , and a variable EPOCH that contains the seconds since epoch
Create a variable FOO_BACKWARDS containing oof.
Create all directories in the path specified by variable $javaUsrLib as super user
Create all directories in the path specified by variable $tempWork
Create an empty file 'last.check' in directory pointed by variable log_dir, with specified timestamp.
Create an empty file specified by variable correctFilePathAndName
Create an empty file called emptyfile.c
Create an empty file with a carriage return character in its name.
Create an empty file with a carriage return character in its name.
Create an empty index.html, or update its timestamp if it already exists.
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Create directorie'some/path' as required in the current directory
Create directories /tmp/x/y/z/ on remote host before copying $source to user@remote:/tmp/x/y/z/
Create directory dir2
Create empty file named with full timestamp (year/month/day/hour/minute/second).
Create empty files with names matching each word in variable correctFilePathAndName
Create intermediate directories b and c as required and directory c
Create intermediate directories full, path as required and directory to
Create intermediate directories tmp as required and directories real_dir1 and real_dir2
Create intermediate directories x and p as required and create q
Create intermediate directories as required
Create intermediate directories as required and directory  /my/other/path/here
Create intermediate directories as required and directory /tmp/test/blah/oops/something
Create intermediate directories as required and directory project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}
Create intermediate directories as required directory{1..3} and subdirectory{1..3} and directories subsubdirectory1 and subsubdirectory2
Create intermediate directories foo and bar as required and directory foo/bar/baz
Create intermediate directories ~/foo/bar/ as required and directories baz, bif, bang
Create intermediate directoriy path2 as required and directories a..z
Create master SSH control socket my-ctrl-socket in the background with no terminal or command execution with connection forwarding from localhost port 50000 to localhost port 3306 via jm@sampledomani.com
Create md5sum of a directory
Create new crontab set for user 'test' including $job and only jobs from current crontab of 'test' user that don`t contain $command
Create new crontab set including $job and only jobs from current crontab that don`t contain $command
Create ssh tunnel through genja.org connecting localhost port 4444 to raptor.lan port 22
Create symbolic link $1/link to the absolute path of $2
Create the directory '.npm-global' in the user's home directory(~).
Create the directory '.npm-packages' in the user's home directory($HOME)
Creates 5-letter random file name and saves it in 'rand_str' variable.
Creates alias for network interface 'eth0' with IP address '192.0.2.55' and network mask '255.255.255.255'.
Creates detached tmux session named 'cf'.
Creates file by template 'aws-sync-XXXXX' in a current folder and stores file name in a 'dir' variable.
Creates file with random 10-byte size content.
Creates full path with parents, that matches to folder path extracted from $f variable.
Creates path as current folder path and folder that contains $0 file, and saves result in 'script_dir' variable.
Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.
Creates temporary directory in '/tmp/' folder and saves path to it in 'my_tmp_dir' variable.
Creates temporary directory with name formatted like .daemonXXXXXXX in /tmp/ folder, and saves path to it in 'TMPDIR' variable.
Creates temporary file and saves path to it in 'content_dir1' variable.
Creates temporary file and saves path to it in 'content_dir2' variable.
Creates temporary file and saves path to it in 'fif2' variable.
Creates temporary file and saves path to it in a 'tmpfile' variable.
Creates temporary file and saves path to it in a 'tmpfile' variable.
Creates temporary file by template provided in option '-t'.
Creates temporary file in $appdir variable with name formatted like expression in variable ${template}, and saves path to it in 'launcherfile' variable.
Creates temporary file in TMPDIR folder or /tmp/ if TMPDIR is not defined, named by template ${tempname}.XXXXXX, and saves path to new file in  a TMPPS_PREFIX variable.
Creates temporary file in a TMPDIR folder or /tmp folder if TMPDIR doesn`t defined, with file name like current shell name and '-XXXXX'-formatted suffix, and saves created path to the 'tempFile' variable.
Creates temporary file in a TMPDIR folder with name like tmp.XXXXXXXXXX.
Creates temporary file in a current folder and saves path to it in 'f' variable.
Creates temporary file in a current folder with name formatted like 'templateXXXXXX', and saves path to it in 'tempfile' variable.
Creates temporary file in default folder and saves path to it in 'source' variable.
Creates temporary file name and saves path to it in 'TMP_FILE' variable.
Creates temporary file with appended suffix '.cmd' and saves path to it in 'LGT_TEMP_FILE' variable.
Creates temporary file with file name formatted like /tmp/gnuplot_cmd_$(basename ${0}).XXXXXX.gnuplot and saves path to it in a variable 'gnuplotscript'.
Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script1' variable.
Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script2' variable.
Creates temporary file with name formatted like 'emacs-manager.XXXXXX' in '/tmp/' folder and saves path to it in 'tmp_file' variable.
Creates temporary file with name formatted like expression in variable ${PROG}, and saves path to it in 'mytemp' variable.
Creates temporary file, replacing XXXXXXXXXXXXXXXXXXXXXXX with equal length suffix.
Creates temporary folder and save path to that in a TMPDIR variable.
Creates temporary folder and saves path to it in 'other' variable.
Creates temporary folder and saves path to it in 'td' variable.
Creates temporary folder and saves path to it in a 'tempd' variable.
Creates temporary folder in /tmp/ with 10-letter suffux.
Creates temporary folder in TMPDIR or in '/tmp/', and stores path to created folder in 'dir' variable.
Creates temporary folder in TMPDIR or in '/tmp/', and stores path to created folder in 'tmpdir' variable.
Creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable.
Creates temporary folder in a TMPDIR folder or /tmp folder if TMPDIR doesn`t defined, with folder name like current shell name and 10-letter suffix, and saves created path in 'mydir' variable.
Creates temporary folder like '/tmp/tardir-XXXXXX' with 6-letter suffix and saves its path in 'tmpdir' variable.
Creates temporary folder relative to directory '/path/to/dir'.
Creates temporary folder within TMPDIR, with name like current shell name and 10-letter suffix.
Creates temporary folder within a $mnt_dir folder and saves path to it in a 'rsync_src' variable.
Creates temporary folder, and saves current folder path   joined with created temporary folder path in 'tdir' variable.
Cut all remote paths from HTTP URLs received from standard input keeping only the protocol identifier and host name, of the form http://example.com
Cut all remote paths from HTTP URLs received from standard input keeping only the protocol identifier, host name, and trailing slash, of the form http://example.com/
Cut off three last symbols from string '1234567890  *'
Cuts off last part from the path $dir, and deletes resulted folder if empty.
Cuts off last two parts from the path $dir, and deletes resulted folder if empty.
DNS lookup of the current host
Decompress /file/address/file.tar.gz to standard output
Decompress file2.txt and file1.txt and print lines in file1.txt that match the 5th tab separated field in file2.txt
Decompress path/to/test/file.gz to standard output and save all lines matching my regex and not matching other regex to files with a 1000000 line limit
Decompress path/to/test/file.gz to standard output and save all lines matching my regex to files with a 1000000 line limit
Decompress path/to/test/file.gz to standard output and save all lines matching my regex to files with a 1000000 line limit
Decompress ${set1[@]} files with gzip
Decompress 'file.gz'
Decompress 'file.gz' to standard output and execute the output in bash
Decompress and extract '/usr/src/redhat/SOURCES/source-one.tar.gz'
Decompress and extract 'archive.tar.gz' into '/destination'
Decompress and extract 'libxml2-sources-2.7.7.tar.gz'
Decompress and sort $part0 and $part1 of files in different processes
Decompress and unarchive hello-0.2.tar.gz
Decompresses file 'xac.bz2', redirecting output to standard out.
Decompresses file.
Delete \n\r from yourfile.txt
Delete all '-' character from $1 and save the resultant string to variable 'COLUMN'
Delete all .svn subdirectories under current directory
Delete all but the most recent 5 files
Delete all but the most recent X files in bash
Delete all files named 'sample' under '/home/user/Series' directory tree with superuser privilege
Delete all files/directories named 'sample' under '/home/user/Series/' directory tree as super user
Delete all lines in file that contain pattern, using temp as temporary working file (ie. shouldn't exist).
Delete all lines matching pattern to match in ./infile and make a backup with suffix .bak
Delete all lines matching pattern in filename
Delete all lines matching some string here in yourfile
Delete all non digits from index $i in bash array depsAlastmodified and print the hex dump as characters
Delete all shared memory and semaphores for the current user on linux
Delete all shared memory and semaphores for the current user on sun
Delete characters in columns 36 through 40 from the output of finger
Delete characters in columns 36 through 40 from the output of finger
Delete current cron job list, and use those in yourFile.text
Delete empty lines from standard input
Delete every second line from output of seq 10
Delete everything except the control characters in foobar\n\337 and dump the remaining characters
Delete history entry at offset, defined in first argument of executed script
Delete line 2 in numbered file file and renumber
Delete newlines from output of 'hg st -R $path' and save to variable var
Delete the 4th tab separated column from the output of finger
Delete the commands 1006 through 1008 from history
Delete the files under the current working directory with inode numbers specified on standard input
Delete the first line of $FILE using intermediate file $FILE.tmp
Delete the line containing start plus the next 4 lines from standard input
Delete the oldest file with '.tgz' or '.gz' extension under '/home/backups' directory tree
Deletes empty folder 'nonsense_dir'.
Delimit standard input with : and display as a table
Determine DISPLAY variable for the session when logged in via SSH
Determine if /full/path exists on a mounted file system.
Determine if the kernel is 32 bit or 64 bit
Determine if user $USER is logged in
Determine the user associated with stdin
Disable X11 forwarding and execute cd yourRemoteDir; ./yourRemoteScript.sh </dev/null >/dev/null 2>&1 in the background on remoteServer
Disable exiting the shell on error
Disable jobs running in their own process group in the shell
Disable wildcard expansion and name globbing
Disables overwriting existing files
Disables shell option 'compat31'.
Disables shell option 'dotglob'.
Disables shell option 'nocasematch'.
Disables shell option 'nullglob'.
Discard the first letter from every line in $line and calculate the md5 sum of the remaining
Display /tmp/file as a table of width 30 with columns filled before rows
Display infile as printable characters or backslash escapes
Display 'file.txt' all occurrences of foo replaced by bar, letting the user interactively page through the result.
Display 12345 backwards
Display 798 backwards
Display IP address and login time of the current user's session
Display PHP info one page at a time, pausing for user interaction after each page.
Display a binary file as a sequence of hex codes
Display a character dump of oldfile
Display a detailed listing of the current directory, pausing for user input after each page.
Display a dump of file as floating point values of double size
Display a dump of standard input as floating point values of double size
Display a garbled ascii-art of a cow saying hello backwards
Display a named character dump of test.sh
Display a sorted count of all the characters in filename
Display all available header information for the executable file of command tail
Display all environment variables, functions, and aliases, pausing for user interaction after each page of output.
Display all files in the current directory tree that match *foo
Display all lines contained in 'dax-weekly.csv' in reverse order.
Display all lines contiaining 'funcname' in system map file matching current kernel.
Display all lines in 'file' containing 'something', pausing for user input after each page.
Display all variables with names starting with derby in a Window's command line
Display an amount of processes running with a certain name
Display an infinite number of lines consisting of y, until the user presses the Q key.
Display an infinite number of lines consisting of y, until the user presses the Q key.
Display bash function definition of foobar
Display bash function definition of foobar
Display compter's hostname
Display current system's kernel name, kernel release and version, and machine architecture
Display detailed usage help of the 'cp' command.
Display difference between one.txt and two.txt side-by-side.
Display differences between /destination/dir/1 and /destination/dir/2 excluding XML files.
Display differences between /destination/dir/1 and /destination/dir/2 excluding files that match any pattern in file exclude.pats.
Display differences between /destination/dir/1 and /destination/dir/2 excluding files with names ending with extensions '.foo', '.bar' and '.baz'
Display differences between /tmp/test1 and /tmp/test2 side-by-side.
Display differences between /tmp/test1 and /tmp/test2.
Display differences between a and b side-by-side
Display differences between directories dir1 and dir2, treating absent files as empty.
Display differences between directories dir1 and dir2.
Display differences between directories dir1 and dir2.
Display differences between directories repos1 and repos2, ignoring changes due to tab expansion, white spaces and treating absent files as empty.
Display differences between file1 and file2 side-by-side.
Display differences between files a.txt and b.txt side-by-side and do not output common lines.
Display differences between files dir1.txt and dir2.txt.
Display differences between list of files in /bin and /usr/bin.
Display differences between output of two programs, 'a' and 'b', residing in the current working directory.
Display differences in /tmp/ksh-9725.log when compared to /tmp/ksh-9781.log
Display each line in file.txt backwards
Display environment variable _ of the current shell
Display file type description of 'file-name' based on contents.
Display file type information for all instances of file in the current PATH.
Display file.txt with lines numbered, and page interactively through the result.
Display file.txt with lines numbered, and page interactively through the result.
Display hardware platform, ie. x86_64 even if current kernel uses 32-bit addressing.
Display hostname.
Display human-readable file type description of ascii.txt
Display human-readable file type description of utf8.txt
Display in an optimized way file status for all regular files in the current directory tree suppressing error messages
Display infinite scroll of random ASCII art
Display infinite scroll of random ASCII art
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by spaces)
Display kernel name, release, and version.
Display kernel release name.
Display last 100 lines of file-with-line-too-long.txt, waiting for user input after each page.
Display list of files ending with '.txt' in the current folder to the terminal twice and output it to the text file txtlist.txt
Display machine architecture, ie. x86_64
Display mime type of file specified by variable file
Display mimetype of myfile.txt.
Display name and value of 'variable' if it exists.
Display only first and second dot-separated numbers of kernel version, ie. 4.4
Display only first and second dot-separated numbers of kernel version, ie. 4.4
Display only line numbers listed in 'file_of_line_numbers from file 'source'.
Display only mimetype of myfile.txt, without the filename.
Display operating system type, ie. GNU/Linux
Display permissions, user, group, and full path for each file in the current directory tree
Display permissions, user, group, and full path for each file in the current directory tree as a list
Display smbios/DMI information, pausing for user interaction between pages of output.
Display source and mount point of the file system containing /some/path.
Display standard input as a table with ${tab} separators
Display standard input as octal bytes
Display standard input as printable characters or backslash escapes with no addressing radix
Display summary of each specified file in human readable form
Display summary of each specified file in human readable form
Display system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.
Display the 'bash' manpage, going to the first occurence of \' sequence of characters.
Display the content of YourFile.txt, waiting for user input at each page.
Display the content of YourFile.txt, waiting for user input at each page.
Display the content of file f in home directory if it exists and is executable
Display the contents of file formatted into a table, removing duplicate lines where the first 12 characters are duplicates, and display the number of occurrences at the beginning of each line.
Display the contents of myfile located in the current directory.
Display the contents of sample_0001.gz with lk=1& removed
Display the contents of text
Display the contents of 'your_file' wrapping lines to maximum 80 characters, and waiting for user interaction after each page.
Display the contents of /var/log/syslog one page at a time, pausing for user interaction between each.
Display the contents of file 'filename' excluding lines starting with # or empty/space-only lines, waiting for user interaction after each page.
Display the contents of variable a converted to lowercase.
Display the current directory tree except files or directories starting with 3rd
Display the differences between file1.cf and file2.cf side-by-side with a width of 150 characters
Display the entire contents of 'file', replacing only the very first instance of old with new.
Display the entire file system in a tree-like format
Display the file size of file '/data/sflow_log' in bytes
Display the file type description of /bin/bash, ie. symbolic link, ELF executable, etc.
Display the first 10 lines of the byte hex dump with no file offset data for /bin/ls
Display the first 32 bytes in foo as printable characters with 16 characters per line
Display the host's ECDSA fingerprint using the md5 hasing algorithm.
Display the host's ECDSA fingerprint using the sha256 hasing algorithm.
Display the last 3 characters of variable foo.
Display the last colon-separated field of variable 'var'
Display the last dot-separated field, in this case com.
Display the last slash-separated part of each filename path in file.txt
Display the last slash-separated part of path, in this case example.
Display the last space-separated field of each line in file.txt
Display the mimetype of filename
Display the mount point of a device file $path
Display the named characters in Test\rTesting\r\nTester\rTested
Display the named characters in line1\r\nline2
Display the named characters in line1\r\nline2
Display the output of ls for an 80 character wide display
Display the sizes and filepaths of all files/directories sorted in ascending order of size
Display the sizes and filepaths of all files/directories sorted in descending order of size
Display total apparent size of a file
Display unique names of logged in users
Display users who are currently logged in
Display variable 'var' without leading and trailing whitespace.
Display what flags mount points are mounted with
Display which package the command command belongs to in dpkg
Display who is logged on and what they are doing
Displays Homebrew’s install path.
Displays a tree of all process alongside their command line arguments.
Displays calendar for a previous, current and next month.
Displays calendar of a previous, current and next month for December of 2120 year.
Displays details about package 'zsh'.
Displays info about users currently in system.
Displays information about all network interfaces in system, including inactive ones.
Displays information about grc formula.
Displays line count in 'filename' every 2 seconds.
Displays process tree of 'pppd' process.
Displays process tree of a process with id 'PID', showing parent process and processes id.
Displays status of currently active network interfaces.
Displays the count of of each unique line read from standard input
Displays what package provides value 'zsh'.
Do not immediately exit the shell if a command fails
Do not mark variables and function which are modified or created for export to the environment of subsequent commands
Download Louis Theroux's LA Stories using rsync over ssh
Download http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz, unzip it, and view the output in less
Download http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1 and convert encoding to windows-1251 and print only printable characters
Download https://s3.amazonaws.com/sampletest/sample.tar.gz, unzip it, and untar it replacing filenames with old to new
Download 10 web pages http://example.com/?page${i}.html at most 2 at a time with ${i} ranging from 1 to 10
Download 10000 web pages https://www.example.com/page{}.html 100 at a time where {} ranges from 1 to 10000
Dump /dev/ttySomething in both hex and text
Dump FILENAME as 2 byte wide hexadecimal numbers
Dump a\0b as hexadecimal bytes
Dump file as ASCII characters
Dump filename as 2 byte wide hexadecimal and printable characters
Dump input_file as a 2 byte hexadecimal, character, and octal value and view the contents in less
Dump myDB via pg_dump and compress to myDB.sql.gz
Dump testscript.sh as 2 byte hexadecimale, printable characters, and octal values
Dump a MySQL database over a compressed SSH tunnel and use it as input to mysql
Dump all MySQL databases over an ssh tunnel to user@yoursever.com and use it as input to mysql
Dump the character output of echo 'hi'
Dump the character output of 'echo `echo Ho ho ho`'
Duplicate directory tree under /mnt/usr/lib to /usr but creating symlinks to files instead of copying them.
Dynamically defines tmux session name to attach to.
ERROR - Probably means -pgoDt (capital D)
ERROR - need to add -a or -r for recursive copy
ERROR - this is for DOS
ERROR - will overwrite the executable if it's not a symlink.
Echo each command before running
Edit current user's cron job list with editor specified by EDITOR environment variable, or default /usr/bin/editor if EDITOR is not set.
Edit the cron job list for user 'wwwrun' using default editor specified by the EDITOR environment variable, or /usr/bin/editor if no default editor is specified.
Eliminates partially duplicate lines by column, keeping the last occurrence
Email an alert message containing the IP address of the SSH connection with attachment tmpfile to user@example.com
Enable history and history expansion within a script
Enable history expansion in a script
Enable history in a script
Enables 'dotglob' shell option.
Enables 'globstar' shell option.
Enables 'nullglob' shell option.
Enables shell option 'autocd'.
Enables shell option 'cdable_vars'.
Enables shell option 'cmdhist'.
Enables shell option 'compat31'.
Enables shell option 'direxpand'.
Enables shell option 'expand_aliases'.
Enables shell option 'failglob'.
Enables shell option 'histappend'.
Enables shell option 'lastpipe'.
Enables shell option 'lithist'.
Enables shell option 'nocaseglob'.
Enables shell option 'nocasematch'.
Enables shell option 'nullglob'.
Enables shell option 'progcomp'.
Enables shell option 'promptvars'.
Enables shell options 'expand_aliases', 'extglob', 'xpg_echo'.
Enables shell options 'extglob' and 'progcomp'
Enables shell options 'nullglob' and 'dotglob'.
Ensure all 5 of UEDP0{1..5}_20120821.csv files exist, creating empty files for any missing ones (updates the file's timestamps)
Erase user's cron jobs and add one cron job to run script every minute.
Evaluate the output of recursively changing the owner and group of /data/* to mongodb
Examines the path expanded by variable $FILENAME to see if it is a symlink and if so, sets SOURCE_DIR to the location of the link itself.
Exchanges the top two directories in the dirs stack.
Execute ${MD5} on all files found under ${1}, numerically sort the results, and save to variable DATA
Execute ./my_script.sh every 3 seconds and highlight the differences in successive runs
Execute /some/directory/myprogram ignoring output in the background on target machine user@target
Execute /wherever/whatever in the background on target machine user@host
Execute 1 and write output to standard output and file ${LOG_FILE}
Execute 1 and write standard output and error to standard output and file ${LOG_FILE}
Execute 2 and write output to standard output and file ${LOG_FILE}
Execute awk -F, '$1 ~ /F$/' on contents of file.gz
Execute bash -c 'python -m unittest discover |& pyrg' in a shell with color support every second
Execute bash -c your_script every 2 seconds
Execute cat /tmp/iostat.running every 10 seconds
Execute cd ${REMOTE_PATH}; mkdir -p $i on host $SERVER as user $USER and connect standard input to /dev/null
Execute cd /some/directory/myprogram in the background on target machine user@target and write standard output and standard error to foo.out and foo.err
Execute chown -R ask:ask /www/askapache.com in the background on server askapache
Execute chown -R ask:ask /www/askapache.com in the background on server askapache
Execute chown -R ask:ask /www/askapache.com in the background on server askapache with a niceness of 19
Execute date every second
Execute dropbox-cli status every second
Execute du -s path every 300 seconds
Execute elinks -dump file.html every 2 seconds
Execute generate_commands and run the resulting commands in the current shell.
Execute killall -USR1 dd every minute
Execute ls -l data.temp every 2 seconds
Execute ls -l every 0.5 seconds
Execute ls -l every 2 seconds
Execute ls -l every 2 seconds
Execute ls -l every 2 seconds and highlight the differences in runs
Execute ls -l on host something as user root
Execute ls every 2 seconds
Execute ls every second
Execute lynx -dump http://dslrouter/stats.html every 10 seconds
Execute myscript.rb with the first argument as the current host name and the second file.txt
Execute myscript.rb with the first argument as the current host name and the second file.txt
Execute mysqladmin -u root -pXXXXX processlist | grep tablename every second and append output to /root/plist.log
Execute ps -C java -o pcpu,state,cputime,etimes every second
Execute ps -mo pid,tid,%cpu,psr -p \`pgrep BINARY-NAME\` every half second displayed with no title and highlighting the differences
Execute ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\` every half second displayed with no title and highlighting the differences
Execute ps aux | grep php every second
Execute script.awk on file and format the output as a table
Execute sleep 30; touch nohup-exit in the background on target machine REMOTE
Execute ssh raptor.lan hostname\; uptime on server genja.org
Execute tail file | grep pattern every 2 seconds
Execute wget -qO-  http://fake.link/file.txt | tail every 5 seconds
Execute wget -qO-  http://fake.link/file.txt every 5 seconds
Execute xbacklight -set 0% && sleep 20 && xbacklight -set 100% every 1200 seconds
Execute '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i (jpg|bmp|png|gif)$`' every 300 seconds and display without title
Execute 'bash -c python -m unittest discover |& pyrg' every second and display with color support
Execute 'echo -e \033[31mHello World\033[0m' every without color support 2 seconds
Execute 'echo -e \tHello World' every 2 seconds
Execute 'python -m unittest discover 2>&1 | pyrg' every second and display with color support
Execute 'tail -f -n 50 mylogfile.txt | ccze' every 5 seconds and display with color support
Execute 'top -n1 | grep mysql' every 2 seconds and highlight the differences between runs
Execute 'tput setaf 1; echo foo' with color support every 2 seconds
Execute /usr/bin/find with $* arguments
Execute /usr/bin/find with $* arguments where current directory is the first argument
Execute `find -type f | egrep -i (jpg|bmp|png|gif)$` every 300 seconds and display without title
Execute all arguments to a shell script and write the output to console and $FILE
Execute all commands in /path/to/commands-inc.sh on server remote as user user
Execute all commands in commands-to-execute-remotely.sh on server blah_server
Execute awk command '{ ...}' on compressed file FILE
Execute awk script script.awk on File2 and File1 and format output as a table
Execute awk script script.awk that exists in $PATH with argument arg1
Execute awk script script.awk with 2 arguments both file.txt and format the output as a table
Execute command $cmd_str on host $SERVER as user $USER
Execute command tssh MYBOXES N where N ranges from 0 to 20
Execute commands from $file in the current shell.
Execute find with $@ arguments
Execute python script test.py with LD_PRELOAD=./linebufferedstdout.so and write the output to console and append to test.out
Execute the SSH command and kill it after 5 seconds
Execute the first instance of parallel found in the PATH, passing it all parameters received by the script/function
Execute the ruby script genrc.rb which will output a filename, and interpret this file in the current shell.
Executes 'cd /' in a subshell created by a pipeline of built-in function 'true'.
Executes 'echo $ret' in a subshell that is opened by command 'true'.
Executes 'sleep 10' in a subshell created by a pipeline of built-in function 'true'.
Executes 'true'. then makes 'xargs' fail executing 'false' and return 123 exit code.
Executes command 'cd ~/server' in an opened tmux session 'cf'.
Executes tmux commands that are stored in the '$tmux_command' variable, and then attaches to the tmux session.
Exit the shell immediately if an error is encountered
Exit the shell immediately if an error is encountered
Exit the shell immediately if an error is encountered, treat references to unset variables as errors, disable overwriting existing files, and use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands
Exit the shell on the first error encountered
Exit the shell on the first error encountered
Exits from login shell.
Exits from process with exit code 255.
Exits from screen session.
Exits from script with exit code 1.
Exits the entire bash script with defined status code N.
Expand bash array myargs as arguments to mv
Expands `whoami` as current user name, and adds resulted path to the directory stack.
Export full path of command git to variable git
Export variable JAVA_HOME as symlink resolved absolute path of /usr/bin/javac with /bin/javac removed
Export variable JAVA_HOME as symlink resolved absolute path of the 2nd parent directory name of java
Export variable JAVA_HOME as symlink resolved absolute path of two parent directories above /usr/bin/javac
Export variable PS1 as the current username @ the hostname
Extract 8 bytes as an unsigned integer that is $o offset into $pkg
Extract 8 bytes as an unsigned integer that is $o offset into $rpm
Extract all gzip-compressed files from tar archives beginning with 'myfiles_split.tgz_*'
Extract and print hostname and protocol part from URL like http://www.suepearson.co.uk/product/174/71/3816/.
Extract any line in f1 or f2 which does not appear in the other
Extract any line in file1 or file2 which does not appear in the other
Extract any line in file1.txt which does not appear as the first ; delimited entry in file2.txt
Extract any line in fileA which does not appear as the first word of any line in fileB
Extract any line in set1 which does not appear in set2
Extract any line in sorted file A that does not appear in B, C, or D
Extract data from HTML table in mycode.html
Extract files from archive 'archive.tar'
Extract five digits sequence from a filename with x number of alphanumeric characters followed by the five digit sequence surrounded by a single underscore on either side then another set of x number of alphanumeric characters.
Extract host name part from URL.
Extract number from $filename of the form something_12345_else and set the variable number to this number.
Extract path and query part from URL
Extract protocol and host name from URL.
Extract protocol part from URL.
Extract rpm foo.rpm
Extract rpm libstdc++-4.9.2-1.fc21.x86_64.rpm
Extract rpm packagename
Extract tar.gz archive and go into the directory that would normally be created by extracting it.
Extract the contents of Input.txt.gz, list the unique first comma separated field prefixed by the number of occurrences
Extract the contents of rpm php-5.1.4-1.esp1.x86_64.rpm
Extract the second-to-last slash-separated path component, ie. 90_2a5 in this case.
Extract two semicolon-separated fields from specified strings, output them separated by a space.
Extract, sort and print only group names from /etc/group.
Extracts 258 lines beginning from line 16482 of in.sql and saves them to out.sql
Extracts a bz2 file.
Extracts single file 'filename' from bzip2-compressed tarball archive.tbz.
Fetch 'stackoverflow.com' domain IP addresses from dig DNS lookup
Fetch a script from the web and interpert it in the current shell, without writing the script to disk.
Fetch a script from the web, and interpret it in the current shell.
Fetches the newest version of Homebrew and all formulae from GitHub and perform any necessary migrations.
File files.txt contains a list of files, copy all files listed to host remote, connecting as ssh user user, and copying the files to this user's home directory - this will not work with files/directory names containing spaces.
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers.
File 'save_pid.txt' contains a process ID, instantly kill this process with SIGKILL signal.
Filter /path/to/logfile for any lines containing the specified date, paging interactively through the output.
Filter contents of 'file' through awk commands written in script.awk, display the result.
Filter out current date in current time zone from the GMT+30 and GMT+20 representations of current date and show the last one
Filter the contents of 'file' through sed commands written in 'commandfile', displaying the result.
Filter the cron list of user user through my_wonderful_sed_script and re-apply the resulting output.
Filters only directories from long file listing of a current directory, and prints their names.
Filters only directories from long file listing of the current directory
Filters only directories from long file listing of the current directory
Filters only directories from long file listing of the current directory.
Filters only directories including hidden ones from long file listing of a current directory, and prints their names.
Filters out all comment linesfrom /etc/launchd.conf and pipes the output to launchctl.
Filters out all comments from the output of the command crontab -u $user -l ignoring errors
Filters out strings beginning with '#' from all files in current folder, and prints file name before each line.
Filters out strings, using the extended regexp pattern '^#|^$|no crontab for|cannot use this program' from $USERTAB
Filters unique lines by matching against the first column of a .csv file
Find .c and .h files in the current directory tree and print line numbers and lines containing #include
Find .c and .h files in the current directory tree and print lines containing #include
Find file.xml under the current directory and change directory to its parent
Find file.xml under the current directory and change directory to its parent
Find '.java' files with checksum 0bee89b07a248e27c83fc3d5951213c1 in the current directory
Find .cpp files that differs in subdirectories PATH1 and PATH2.
Find 10 largest files in the current directory and its subdirectories
Find a hostname that resolves to IP '173.194.33.71'
Find a size of only the target directory in MB format
Find a used disk space of a target directory and files inside of it
Find absolute path of command with PID $pid
Find all $1 files/directories under current directory and enter into the parent directory of the first one found
Find all $1 files/directories under current directory and enter into the parent directory of the first one found
Find all *.foo files under current directory and print their contents
Find all *.foo files under current directory and print their contents
Find all *.gz files under asia and emea directory and print their names and line counts to file_count.txt
Find all *.htm files under current directory and change their names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format
Find all *.ogg files/directories in entire file system
Find all *.php files under current directory and change their permission to 640
Find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments
Find all *.xml.bz2 files under current directory and run the command find_graph with -build_graph, $i.graph and $i as it's arguments where $i is expanded to each file path
Find all *shp* directories under current directory and move all regular files inside those directories to ../shp_all/
Find all *shp* directories under current directory and move their contents to ../shp_all/
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found
Find all directories in level 1 down the $queue directory
Find all directories named postgis-2.0.0 under / directory
Find all directories that do not contain main.cpp
Find all directories under /path/to/Dir and set their permission to 755
Find all directories under /path/to/base/dir and change their permission to 755
Find all directories under /var/www directory and set their permission to 755
Find all directories under /var/www/some/subset and set their SGID bit
Find all directories under foldername directory and set their permission to 755
Find all files in current directory excluding hidden files and put the output into full_backup_dir variable
Find all files in current directory excluding hidden files, archive them and put the output into variable  full_backup_dir
Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed
Find all files in current directory that were modified less than 1 day ago excluding hidden files and put the output to full_backup_dir variable
Find all files modified on Mar 4 and unzip and search their contents for 12345
Find all files named 'aaa.txt' under current directory tree and display their contents
Find all files on local host whose name contains labra and copy them to remote  host 11.11.11.11 connecting as ssh user masi and copying the files to the Desktop directory this user's home directory - this will not work with file/path names containing spaces.
Find all files under /path/to/Dir and set their permission to 644
Find all files under /path/to/base/dir and change their permission to 644
Find all files under /var/www directory and set their permission to 644
Find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$' in their names with locale set to default C locale
Find all files under current directory with their timestamp and paths and print a sorted list
Find all files under foldername directory and set their permission to 644
Find all files/directories 1 level down the current directory that are enlisted in file 1
Find all files/directories 1 level down the ~/bin/FilesDvorak/ directory and redirect the sorted output to file b
Find all files/directories in level 1 down the $queue directory with all positional parameters appended with the find command
Find all files/directories named orm.properties in entire file system
Find all files/directories under  current directory and rename them by replacing all blank spaces with _ in their paths
Find all files/directories under ${CURR_DIR} directory
Find all files/directories under /export/home/someone directory in a remote host and upload the files/directories to ftp://somehost/tmp/
Find all files/directories under /export/home/someone directory in a remote host and upload the files/directories to ftp://somehost/tmp/
Find all files/directories under /export/home/someone directory in a remote host and upload the files/directories to ftp://somehost/tmp/
Find all files/directories under /home/foo/public_html/ that were modified less than 60 minutes ago
Find all files/directories under /non-existent/directory directory with ~/bin/find
Find all files/directories under /var/www/some/subset and change their owner and group to www-data
Find all files/directories under current directory and put the output into full_backup_dir variable
Find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar
Find all files/directories under current directory without descending into './bookshop/mediaimg', '*/CVS*', './files', './images/cms', './internal', './limesurvey171plus_build5638' and './gallery2' paths, then run cvs command with 'status' and each path as arguments and redirect the output to output.txt fle
Find all files/directories with '.in' extension in the directory $directory and its subdirectories
Find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output
Find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output
Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines.
Find all lines matching $USER in file and number the output
Find all regular files under $FILES_PATH directory tree and save the output to 'FILES' variable
Find all regular files under /home/www and replace every occurrences of 'subdomainA' with 'subdomainB' in those files (may produce 'agument too long' error)
Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files
Find all strings matching pattern ^${KEY}${DELIMITER} in $FILE file and print rest of string after $DELIMITER
Find all test1.h files under current directory
Find all test2.h files under current directory
Find all top level directories under /home that doesn't contain a file/directory named 'bin'
Find all top level directories under current directory that doesn't contain a file/directory named 'bin'
Find all xml files under current directory and archive them to .bz2 archives
Find all xml files under current directory and archive them to .bz2 archives
Find and delete all files with a used disk size of 0
Find and kill a process by name
Find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.
Find apparent size of a target directory
Find disk usage of all files inside the directory
Find disk used space of only the target directory
Find file size in blocks
Find file size in bytes
Find files with 002 permission in entire file system and print them with the string 'has world write permissions' printed at last
Find files with pattern *[!0-9][1-9].txt  and execute chmod and ls command with AND condition then sort the output
Find number of different rows between File1 and File2.
Find process terminal displaying the searching process
Find strings with 'Features' in /var/run/dmesg.boot' file
Find the erl executable in $PATH and read the RELEASES file to extract the erlang release number
Find the directory with least access time under current directory and assign it to $filename
Find the first file/directory under $DIR which matches the $TMP_DIR in its path
Find the process id of mysql
Find the process id of mysql
Find users whose names begin with ab and ends with 1
Find users whose names begin with ab or whose terminal from which they are logged in ends with 1
Finds $a pattern in a $b string, and returns exit code 0 if found, suppressing any visible output.
Finds IP address of 'en0' network interface.
Finds IP address of 'eth0' network interface.
Finds IP address of default network interface.
Finds IP address of system network interface, that belongs to 192.168.111 subnet.
Finds IP addresses of all network interfaces.
Finds IP addresses of all network interfaces.
Finds PIDs of all running processes, gets executable binary of each process, and prints containing folder of each binary.
Finds PIDs of ssh sessions of all logged in users.
Finds all folders that contain 'ssh' file and have 'bin' in path.
Finds all logged in users.
Finds all php processes running in system.
Finds all strings with parent folder of path '$path' in 'file', and saves result in 'x' variable.
Finds all user session in system, and shows sorted user names with number of sessions of each user.
Finds all users logged in via ssh.
Finds binaries names in a list of running processes and prints containing folder of each binary.
Finds binaries names in a list of running processes and prints containing folder of each binary.
Finds binaries names in a list of running processes and prints containing folder of first 10 binaries.
Finds file 'Subscription.java' and changes to containing folder.
Finds file 'Subscription.java' and changes to containing folder.
Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files.
Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and saves location of such files to 'directories' variable.
Finds if 'subversion' package is installed in system.
Finds if environment variable like 'DUALCASE' exists in environment.
Finds matched text in defined path recursively, but not follows symlinks.
Finds name of a current month and saves it in a 'month' variable.
Finds number of available updates.
Finds only parts of echoed string that match with regex 'run-parts (-{1,2}\S+ )*\S+', and saves them in $match variable, each matched part on a separate line.
Finds out what groups a current user has.
Finds out what groups a given user has.
Finds real time report in a 'sleep 1' command execution statistic.
Finds recursion-related options of a 'grep' utility.
Finds recursively all files having extension .c, .h in '/path/' that contain 'pattern', and prints matched strings with string number and file name.
Finds recursively all files in '/path/' excluding folders dir1, dir2 and all like *.dst, that contain 'pattern', and prints matched strings with string number and file name.
Finds recursively all files in '/path/' that contain 'pattern', and prints matched strings with string number and file name.
Finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name.
Finds recursively and following symlinks from root folder all files that contain text-to-find-here and prints files names.
Finds shell options like 'checkjobs' with their state.
Finds shell options with 'login' in name.
Finds string beginning with 'IFS' in a 'set' output.
Finds strings like texthere recursively in all files of a current folder regarding all symlinks.
Finds strings matching pattern '^fields=\\\|^var=' in a 'set' output.
Finds strings with 'TEXT' from *.log files and prints all but first field from any space-delimited string.
Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot.
Finds strings with dot-separated sequence of numbers, and prints part of that sequence before the second and third dot.
Finds strings with dot-separated sequence of numbers, and prints part of that sequence between the first and second dot.
Finds strings with text searched-string recursively in all files of current folder and prints names of files with matched strings.
Finds strings with text searched-string recursively in all files of current folder.
Finds the folder where temporary files would be written to, and save path to it in a 'TMPDIR' variable.
Finds the folder where temporary files would be written to.
Finds total lines count of all *.php files in a current folder and subfolders.
Finds total lines count of few types of files in a current folder and subfolders.
Finds users with X session in system and puts the result in USERS variable.
Finds users with X session in system and puts the result into USERS variable
Follow symbolic links for the full path of lshw
Follows symbolic link $BASH_SOURCE, and prints path to its target.
For all users in the system who have their cron jobs display user name and crontab.
For each item in array alpha, display the basename, that is the part following the last slash, or the whole item if no slash is present.
For each line in 'file', print result =  followed by the line backwards.
For each line in 'file', print result =  followed by the line backwards.
For each line in file2 whose first field appears as a first field in file1, print an output line constructed following the specified -o format.
For each line in list.txt, output the line adding FAIL if the same line appears in fail.txt, and PASS otherwise - lines in fail.txt must be in the same order as they appear in list.txt.
For each line of colon-separated information in files 'empsal' and 'empname' whose first field matches in both files, output: first field of empname, second field of empname, fourth field of empname, and third field of empsal.
For each line of the sorted output of both file1 and file2, print lines whose first field of file2 does not appear as first field of file1.
For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv
For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv - both files must be sorted first.
For each line which has a common first field in test.1 and test.2, output the first 2 fields of test.2 and the field 2 and 3 of test.1
For each line whose first field is the same in file1 and file2, output the common first field followed by all other fields in file1 and file2.
For each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file.
For each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 7.
Force create a hard link in /usr/local/bin to findpdftext
Force create a hard link named non_secret_file.txt to secret_file.txt
Force create a hard link named '/home/user/Musik/youtube converted/aesthesys~ I Am Free, That Is Why I'''m Lost..mp3' with target '/home/user/Musik/mix-2012-13/aesthesys~ I Am Free, That Is Why I'''m Lost..mp3'
Force create a symbolc link named /usr/local/bin/fpdf to /usr/local/bin/findpdftext
Force create a symbolc link named /usr/local/bin/fpt to /usr/local/bin/findpdftext
Force create a symbolc link named new_dir to /other/dir without dereferencing new_dir
Force create a symbolc link named softlink_name to source_file_or_directory_name without dereferencing softlink_name
Force create a symbolic link as a file named /usr/lib/jvm/default-java to $default_java_dir with verbose output
Force create a symbolic link in /usr/bin/ for each file matching $javaUsrLib/jdk1*/bin/*
Force create a symbolic link named $* to the canonical absolute path of $1
Force create a symbolic link named $lines to $c without dereferencing $lines
Force create a symbolic link named $pdir to $pluginpath with verbose output
Force create a symbolic link named currentDir to newDir without dereferencing currentDir
Force create a symbolic link named id_rsa to $keyname
Force create a symbolic link named mylink with target /apps/myapps/new/link/target
Force create a symbolic link to $f in ~/my-existing-links/ with name the basename of $f
Force create a symbolic link without dereferencing named $SYMLINK_PATH to $lastModified
Force create a symbolic link without dereferencing named alpha to alpha_2
Force create a symbolic link without dereferencing named mylink to dir2
Force decompress all files into '/etc'
Force pseudo tty allocation on connection to somehost and execute ~/bashplay/f
Force pseudo-terminal allocation to run sudo <cmd> on remotehost
Force remove all files and folders in the physical current working directory
Force tty allocation and execute ./script.py on host foo
Forcefully remove files *~important-file
Forcibly create symbolic links in target directory ~/staging for all files located in directory ~/mirror
Forcibly create symlink named as '/cygdrive/c/Users/Mic/mypics' to the directory '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/'
Forcibly removes ${temp} file.
Forcibly removes all files like '*.bak' and '*~'
Forcibly removes files  '/tmp/stored_exception', '/tmp/stored_exception_line', '/tmp/stored_exception_source'
Format $line as a table
Format file.txt as space separated columns 28 characters in width
Format input as alternating rows in a table
Format and print the time string @133986838 according to the default time format
Format bash array ${arr} in columns
Format bash array ${arr} in columns
Format contents of file as a table
Format each line as 3 columns based on extraneous columns
Format email message in file specified by $2 to fit in 80 characters split at spaces and send to $EMAIL and a BCC to abc@abc.com from $MAILBCC with subject $SUBJECT
Format file list-of-entries.txt as new-line separated columns
Format file list-of-entries.txt with no column delimiter
Format output of mount as a table
Format output of 'file' content to columns with wide not less than 80 pixels
Format space separated fields in filename as a table
Format tab delimited file list-of-entries.txt as a table
Format tab separated fields in FILE as a table
Format the 5th, 3rd, and 4th fields of ... as a table
Format the contents of [file] in a neat table
Format the contents of [file] in a neat table
Format the date represented by time string @1267619929 according to default format and print it
Format the filename and modification time of files starting with t as a table
Format the filename and modification time of files starting with t as a table on OSX
Format the output of ... as a tab separated table
Format the output of printf ... to fit in 80 characters per line
Format the output of rub-script.rb as a tab separated table
Format the time string $timestamp according to the format string %Y-%m-%d %H:%M:%S and save the output to variable 'CDATE'
Format the time string @133986838 according to the default time format and save it to variable 'VARIABLENAME'
Format time string @$TIMESTAMP according to default time format
Format time string @1267619929 according to default time format
Forward all connections to client localhost 3307 via the SSH tunnel to gateway and then connect to host 1.2.3.4 to port 3306
Forward all connections to client localhost 3309 via the SSH tunnel to mysql_access_server and then connect to host sqlmaster.example.com on port 3306
Forward port 12345 bound on 'localhost' to port 12345 on 'otherHost' as user 'otherUser'
Forward port 16186 on hello.com to 8888 on localhost using private key privatekeystuffdis88s8dsf8h8hsd8fh8d for login
Forward port 3307 on localhost to port 3306 on 1.2.3.4 via 'user@gateway' on port 24222
Forward port 8000 bound on localhost to port 22 in 'clusternode' via 'user@bridge'
From a script, output the name of the script itself, without containing directories - from a shell, output the name of the shell.
From a script, output the name of the script itself, without containing directories.
From another terminal, detach process $PID from its terminal and run it in the background.
From the list of words in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count.
Generate a random 32 ASCII character password from /dev/urandom and save it to variable 'pass'
Generate the Spanish alphabet and number each character
Generate the obsolete 29 character Spanish alphabet and number each character
Generates a randomly sorted list of numbers from 1 to 10.
Generates default-formatted file name of temporary file in a /dev/mapper folder, and saves path to it in a variable 'MAPPER'.
Generates name for temporary file with 6-letter suffix, and saves path to that new file in 'fn' variable.
Generates temporary file in a '/dev/shm' folder and saves path to it in a 'tFile' variable.
Generates temporary file name with full path by template 'fifo.XXXXXX' and saves it to variable 'fifo_name'
Get A record for domain $domain
Get A record for domain $domain
Get IP address of your SSH session
Get a path name of a process id
Get current directory name without full path, ie. the part after the last /
Get current directory name without full path, ie. the part after the last /
Get current host's IPv6 address.
Get current hosts's IPv4 address.
Get directory listing of URL $1 and save them to variable 'header' by deleting '\r' characters
Get domain $domain IP address
Get domain name from dig reverse lookup.
Get domain name of $ip and save it to the variable 'reverse'
Get domain name with 'google' from address $1
Get domain name with 'google' from address $IP
Get domain name with 'google' from dig reverse lookup.
Get domain names from file '1.txt' and request TXT DNS record for each one
Get from file 'File1.txt' strings starting with 'Q', extract only part of them following after '=' sign, and print which ones are not found in 'File2.txt'
Get second line from text contained in variable $data.
Get the PID of rsync for the user that owns the process matching the pattern expanded by CID$client_id
Get the actual find exectuable path
Get the base filename from variable 'path', similar to using the basename command.
Get the command line args passed to a running process
Get the current shell's executable name from the output of 'ps'.
Get the current shell's executable name from the output of 'ps'.
Get the path of running Apache
Get the processor's addressing bus width from the output of lshw, ie. 64 bits.
Get virtual private memory use of process
Get virtual private memory use of process
Get virtual private memory use of process
Gets IP address of ${NET_IF} network interface.
Gets IP address of 'en0' network interface.
Gets IP address of 'en0' network interface.
Gets IP address of 'en0' network interface.
Gets IP address of 'en0' selected network interface.
Gets IP address of 'en1' network interface.
Gets IP address of 'en1' network interface.
Gets IP address of 'en1' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of 'eth0' network interface.
Gets IP address of a primary network interface.
Gets IP address of eth0 network interface.
Gets IP address of first listed active network interface in system.
Gets IP address of first listed network interface in system.
Gets IP address of first listed network interface in system.
Gets IP address of first network interface which name matches pattern venet0:0\|eth0.
Gets IP address of only primary network interface.
Gets IP address of only primary network interface.
Gets IP addresses of all active network interfaces and saves to 'ip' variable.
Gets IP addresses of all active network interfaces on host.
Gets IP addresses of all active network interfaces on host.
Gets IP addresses of all active network interfaces.
Gets IP addresses of all active network interfaces.
Gets IP addresses of all active network interfaces.
Gets IP addresses of all network interfaces.
Gets IP addresses of all network interfaces.
Gets MAC address of 'eth0' network interface.
Gets MAC address of 'eth0' network interface.
Gets MAC address of 'eth0' network interface.
Gets MAC address of 'eth0' network interface.
Gets MAC address of en0 network interface.
Gets MAC address of en0 network interface.
Gets MAC address of eth0 network interface.
Gets MAC address of eth0 network interface.
Gets MAC address of eth0 network interface.
Gets MAC address of eth0 network interface.
Gets MAC address of p2p0 network interface.
Gets MAC addresses of all IP4 network interfaces.
Gets MAC addresses of all active network interfaces.
Gets a current job back to the foreground.
Gets a job with defined number back to the foreground.
Gets all IP addresses from host network configuration and prints first one.
Gets all man entries beginning with std and sends them to vi.
Gets back to the foreground a job with number 2.
Gets domain name from dig reverse lookup and save in variable 'go'.
Gets domain name from dig reverse lookup.
Gets domain name from dig reverse lookup.
Gets domain name from dig reverse lookup.
Gets list of IP addresses of all network interfaces.
Gets list of IP addresses of all network interfaces.
Gets list of IP addresses of all network interfaces.
Gets list of IP addresses of all network interfaces.
Gets list of folders containing files with changes.
Gets state of shell option 'dotglob' and saves it in 'rest_cmd' variable.
Gets string with IP4 address of en0 network interface.
Gets string with MAC addess of network interface eth0.
Gets string with MAC address of eth0 network interface.
Gets the groups these users belong to.
Gives the primary group of $USERNAME.
Globally sets the maximum number of lines to held in window history as 10000.
Globally sets the maximum number of lines to held in window history as 10000.
Go back to last directory.
Go into the directory whose name is selected in the X window system, ie. double-clicked in a terminal window.
Go into the directory whose name is selected in the X window system, ie. double-clicked in a terminal window.
Go into the first directory whose name contains 1670
Go into the first directory whose name contains 1670
Go into the first directory whose name contains 1670
Go to /the/project/root//data, which in most filesystems/operating systems will be the same as cd /the/project/root/data
Go to /tmp directory.
Go to directory /cygdrive/c/Program Files using backslashes to escape special characters
Go to directory /cygdrive/c/Program Files using quotes to escape special characters
Go to directory /cygdrive/c/Program Files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs
Go to directory /some/where/long
Go to directory named ~ (not home directory)
Go to directory named ~ (not home directory)
Go to directory pointed by last element of array dirs in bash version 4.2
Go to directory specified by variable somedir, but replacing leading ~ character by actual home directory.
Go to first directory specified in PATH which contains the command 'oracle'
Go to first directory specified in PATH which contains the command 'oracle'
Go to last directory with name starting with a number, useful for timestamped directory names.
Go to previous working directory.
Go to top level of git tree using relative path
Grab variable = value pairs from a windows style .ini file into the current shell.
Grab a gzipped text file from the web and display its decompressed content, interactively paging through the output.
Grab the output of basename and echo it to stdout, which basename would do by default anyway.
Grab the output of basename and echo it to stdout, which basename would do by default anyway.
Greps DNS zone transfer info on domain localdomain.com from NS @dc1.localdomain.com, finds strings with any-cased word 'Lawler' and strips last letter from each string.
Greps domain $domain IP name from long dig listing.
Gunzip all files matching file*.gz and answer n to any prompts
Handles shell option 'nullglob' according with flags stored in $NGV variable.
Hash hostnames in user's known hosts file.
Highlights current day in a month calendar with color.
Highlights current day in a month calendar with color.
Highlights current day in a month calendar with color.
If directory mydir exists in user's home directory, run mycommand in it, without changing the current shell's working directory, but do nothing if no such directory exists.
If first command fails, exits from script with exit code of failed command.
If first command fails, exits from script with exit code of failed command.
If variable c is a syntactically correct cron job, erase user's cron jobs and add c as the only cron job for user.
Immediately display unique entries from access.log
Immediately exit the shell if a command fails
Immediately kill all child processes of parent process whose ID is specified by the variable PPID.
Immediately kill all processes listening on TCP port 3000.
Immediately kill all processes using TCP port 3000 on the system.
Immediately terminate all processes whose command or arguments contain 'amarok'.
Immediately terminate all processes whose command or arguments match myProcessName
Import the uncompressed contents of the last modified file  matching *.sql.gz into mysql
In a ssh session, set the variable 'user' to the last dot-separated number of the client's IP address.
In the current shell, interpret 'incl.sh' which is in the directory pointed by variable DIR
Infinitely ping every host listed in file-of-ips with at most 50 processes at once
Infinitely print 1 then 0
Infinitely print no to the screen
Infinitely write 1 with line numbers to the console and /tmp/to
Insert insert every 3 lines for the output of seq 1 10
Insert | every 30 characters in file longline
Insert | every 30 characters in file longline
Insert the current host name on line 15 of test.html
Inserts new line after last occurrence of ScriptAlias in a file
Install 'mono-devel' package, answering 'yes' for all questions.
Installs  'packagename' package.
Installs 'firefox' package without using 'sublime2' repository.
Installs 'firefox' package.
Installs 'glibc' package.
Installs 'php-mbstring' package, enabling 'remi' repository.
Installs 'php-mssql' package with enabling repository 'remi'.
Installs all packages from a '/home/pkglist.txt' list, answering 'yes' on all questions.
Installs all packages from a current folder, excluding ones that match pattern '*glob*'.
Installs git and bash-completion packages.
Installs locally located 'ffmpeg-2.6.4-1.fc22.x86_64.rpm' package.
Installs locally located 'packagename.arch.rpm' package, ignoring GPG checking.
Installs package devtoolset-3 answering 'yes' on all questions.
Installs package nodejs answering 'yes' on all questions.
Installs package 'mysql'.
Installs package group Development Tools answering 'yes' on all questions.
Installs package group MYSQL Database Client, answering 'yes' on all questions.
Installs packages 'mysql' and 'mysql-server'.
Instantly kill all processes whose command is 'myprocess'.
Interactively create a symbolic link in the current directory for $SCRIPT_DIR/$FILE
Interactively display all lines containing 'word' in all files whose name ends with .properties in the current directory, waiting for user input after each page.
Interactively page through a list of all processes running on the system - the arrow keys pan around, and the Q key quits.
Interactively page through the color-coded output of 'ls'.
Interpret /etc/bashrc in the current shell, ignoring lines that contain mesg.
Interpret all lines containing an equal sign in myfile (usually, grab all variables from myfile into current shell)
Interpret backslash sequences and delete whitespace characters in variable $FOO and save the result to variable 'FOO_NO_WHITESPACE'
Interpret conf-file in the current shell, making all environment variables in this file available to future sub-processes.
Interpret in the current shell all lines in config.sh which contain the word marker
Invoke a trusted X11 forwarding SSH connection with server 192.168.0.14 on port 222 as user phil
Invoke a trusted X11 forwarding SSH connection with the server $ssh_server as user $ssh_user
Isolate first comma-delimited field of each line in file, discard consecutive duplicates, and search file for first matching occurrence of that field.
Join colon-separated information in 3 files LN.txt PH.txt and AD.txt in a cascade fashion: join LN.txt and PH.txt, then join the result with AD.txt
Join columns in file1 and file2 if their first field matches and format the output as a table
Join columns in file1 and file2 if their first field matches and format the output as a table
Join comma-separated data in file1 and file2, including extra non-matching information in both files.
Join comma-separated information in 4 files
Join comma-separated information in 4 files - files must be sorted.
Join data in file1 sorted by the second word of each line with data in file2 sorted by the first word of each line, keeping the same order as it is found in file1
Join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1.
Join lines in file A with lines in file B if the lines share a common first word
Join lines in file aa with lines in file bb if the lines share a common first word
Join lines in file aa with lines in file bb if the lines share a common first word and sort the result numerically
Join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields.
Join strings from 'file1' and 'file2', discarding excessive strings from largest file, and printing first, second and third space-separated field from first file, and third and fourth field from second file as a join result
Keep only the last two hyphen-separated sections of abc-def-ghi-jkl
Keep the last 3 components of $path
Keep the last 4 ASCII characters of a string.
Kill a running screen session
Kill all instances of dropbox owned by the current user
Kill all processes matching the string myProcessName
Kill all processes which were executed in background by the current shell.
Kill process named python csp_build.py.
Kill processes listening on port 3000
Kill screen session 23536
Kills all child process and process itself having id 24901.
Left justify number each non-blank line in log.txt as input to sed ...
Let the user page through 'filename.csv' with long lines chopped so they fit within the width of the screen/window.
Limit each line in your_file to 80 characters and view via more
Limits the number of results from grep to 2 lines
List .java files that have the same contents
List .java files that have the same filename and contents
List PIDs of children processes
List absolute path of files in the current directory
List all .txt files with a unique md5 hash
List all *.txt files/directories under /etc
List all IP addresses assigned to current hostname, pausing for user interaction after each page.
List all IP addresses assigned to current hostname, pausing for user interaction after each page.
List all active cron jobs, displaying only the command.
List all available commands in Mac OS
List all cron jobs for current user.
List all cron jobs where the minute part is either * or a number from 0 to 14.
List all cron jobs which contain word.
List all cron jobs which contain word.
List all crons in the environment
List all defined bash functions
List all environment variables
List all environment variables whose name either equals HOME or PATH, or starts with GO
List all environment variables whose name either equals PATH or starts with GOBIN
List all environment variables whose name starts with GOROOT
List all environment variables containing 'USER' in their name or value that would result in running a command with 'sudo env'.
List all environment variables whose name contains 'ipo', showing only the names of the variables and not their values.
List all environment variables whose name or value contains current user's login name.
List all environment variables whose name starts with PATH, showing the name and value of each one.
List all existing environment variables in the current shell.
List all file details with filenames matching *2012*.xml from serveripaddress::pt/dir/files/ listening on port 111 and write to output.txt
List all files 2 levels deep in the current directory tree
List all files and directories in the current working directory in a long list format sorted by the oldest modification time
List all files and directories in /data/ sorted by version number
List all files and directories in long list format with a time style of long-iso and sort from oldest modifed to newest modified
List all files and folders in the current working directory
List all files and sub directories including hidden files in the current directory tree
List all files in a current folder, separating names with comma
List all files in a current folder, separating names with semicolon
List all files in a current folder, separating names with semicolon
List all files in current directory whose name or file type description contains the word ASCII.
List all files/folders in current directory by separating them with spaces
List all functions defined in the shell
List all functions or variables containing  () defined in the shell
List all leaf directories under current directory
List all leaf directories under current directory
List all mounted filesystems
List all nfs mount points on the system
List all nfs mounts
List all of the subdirectories in the current directory with no trailing slash.
List all processes with detailed information
List all screen sessions
List all users logged into the currenttty
List all variables whose name or value contains X.
List all variables with names containing X.
List all variables with names containing X.
List all ~/bin/FilesDvorak/.* and ~/.PAST_RC_files/.* files/directories and take common entries between these two lists
List an empty environment (prints nothing)
List any line in f1 or f2 which does not appear in the other and delete all tab characters in the output
List characters from standard input showing backslash escapes for non-displayables
List common files in directories 1 and 2
List content of 'myfile' in a subshell and returns output to parent shell
List current directory, waiting for user input at each page.
List current user's crontab.
List directories in the current working directory and remove the trailing /
List directories in the current working directory and remove the trailing /
List each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest
List each file or directory in the current directory prefixed by its filesize in bytes and sorted from smallest to largest
List each file or directory in the current directory prefixed by its human readable filesize and sorted from largest to smallest
List each file or directory in the current directory prefixed with its filesize in MB and sorted from smallest to largest
List each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest
List each subdirectory name composing the current working directory
List each subdirectory name composing the current working directory
List each unique case insensitive character in file prefixed by number of occurrences
List each unique case insensitive character in file prefixed by number of occurrences and sorted from most frequent to least frequent
List each unique character in file prefixed by number of occurrences
List each unique character in file prefixed by number of occurrences and sorted from most frequent to least frequent
List environment variable values whose name matches '^\w*X\w*'
List environment variables and their values whose name matches '^\w*X\w*'
List environment variables and their values, escaping all semicolons with a backslash.
List environment variables whose name contains X
List environment variables whose name contains X
List environment variables whose name matches .*X.*
List environment variables whose name matches '^\w*X\w*'
List existing screen sessions
List file contents of compressed file $i
List file contents of compressed file 'compressed.tar.gz'
List file information of the full path of command c++
List files and directories one level deep in the current directory tree
List files in dir1 that are not in dir2
List files in directory one and two that do not exist in the other
List files in directory one that exist in directory two
List files in the current directory that have at least one duplicate
List files under $CURR_DIR which were modified, accessed or whose status were changed $FTIME ago and sort them and remove duplicate entries
List files under current directory which were modified, accessed or whose status were changed $FTIME ago and sort them and remove duplicate entries
List files with C-style escape sequences for non-alphanumeric characters
List jobs and their process ids and print them by replacing newline with '^'
List only file names matching *2012* from serveripaddress::pt/dir/files/ listening on port 111 and write to output.txt
List running screen sessions
List screen IDs
List screen IDs
List screen session IDs
List the 10 largest files or directories and their sizes under /var
List the combined path of the current working directory and file.txt
List the commands in /usr/bin, pausing for user input after each page.
List the commands in /usr/bin, pausing for user input after each page.
List the directory contents of the current working directory
List the drive of each /dev/ disk mount point
List the entire cron job list of user apache.
List the files in archive.tar.gz
List the full path of each directory in the current working directory
List the full path of each directory under the current working directory
List the number of occurrences of each unique character in The quick brown fox jumps over the lazy dog sorted from most frequent to least frequent
List the unique second / delimited field of every line from standard input prefixed by the number of occurrences
List the unique tab delimited field number $FIELD in all files, prefix with the number of occurrences, sort from most frequent to least frequent
List the users having <groupname> as their secondary group.
List unique MD5 digests of all files in the current directory ending in .txt
List unique series of 3 characters in file $1 prefixed by the number of occurrences and sorted from most frequent to least frequent
Listen on port 1234 on root@123.123.123.123 and forward it to port 22 on localhost
Lists '/tmp/hashmap.$1' file or folder '/tmp/hashmap.$1' content one file per line.
Lists all content in a current folder but names like *.c and *.h.
Lists all content in a current folder but names like *.c and *.h.
Lists all directories in '/home/alice/Documents/'.
Lists all directories in a current folder.
Lists all directories in the current folder.
Lists all files and folders with its content in a current folder, excluding names ending with 'foo'.
Lists all files and folders with its content in a current folder, excluding names starting with 'b'.
Lists all files in a '/home/dreftymac/' folder and subfolders without recursion.
Lists all files in a current folder, separating names with 'some_delimiter'.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with comma.
Lists all files in a current folder, separating names with space.
Lists all files in a current folder, separating names with space.
Lists all files that matches path pattern with wildcards.
Lists all manual pages.
Lists all paths to all subfolders in a current folder.
Lists all running tmux sessions.
Lists all subdirectories in a current folder, removing trailing slash.
Lists all subdirectories in a current folder, removing trailing slash.
Lists all subdirectories in current directory with a trailing slash
Lists all subdirectories in the current directory
Lists all subdirectories in the current directory with the trailing slash removed
Lists all top-level files in a '/home/dreftymac/' folder.
Lists available updates for installed packages.
Lists available updates for installed packages.
Lists content of all subfolder in a current folder.
Lists content of compressed text file.
Lists content of the current folder.
Lists enabled repositories along with debugging information.
Lists file descriptors of a current process.
Lists installed packages from  'fedora' repository only.
Lists long format information about file '/bin/echo'.
Lists the pids of all processes that have process '1782' as their parent.
Lists tmux sessions.
Load keybindings from a file ~/.inputrc
Locate python interpreter and show its human-readable file type description, resolving any symlinks.
Locates 'gcc' executable file, strips last two parts of the full path, adds '/lib' to the end and saves result in 'libdir' variable.
Locates Erlang distribution, and prints release number from 'RELEASES' file.
Locates bzip2 command in a system.
Log in as middleuser with key ./middle_id.pem and forward port 22 on host middle.example.org to port 2222 on localhost
Log in using key file ./device_id.pem as user deviceuser on host middle.example.org and port 2222
Log into ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com using identity file ~/path/mykeypair.pem
Log output of a command in screenlog.0 every 10 seconds
Login in 'whatever.com' as user 'whoever' with X11 forwarding to enable GUI programs on remote to be run
Login to $HOST and create file $FILE_PATH if it does not exist
Login to host using identity file id_rsa
Login to user@host with key keyFile and execute ./script arg1 arg2 > output.txt 2>&1 in the background
Login to a bash shell on localhost via ssh and print the bash version
Login to remote system app1 through an ssh gateway system called gw
Look for all files managed by git in the current repository whose name or file type description contains the word ASCII, display the number of lines contained in each match.
Look up IP address of the current host
Look up for 'myip.opendns.com' in server 'resolver1.opendns.com' and save the terse output in 'IP' variable
Lookup information for user vivek
Lookup information of the current user
Make bar executable
Make file.sh executable
Make $WEEKS_TO_SAVE+1 directories named weekly.N where N ranges from 0 to $WEEKS_TO_SAVE
Make 3 directories named $HOME/Labs/lab4a/folder followed by a 3 width zero padded number from 1 to 3
Make 3 directories named ~/Labs/lab4a/folder followed by a 3 width zero padded number from 0 to 3
Make 3 directories named ~/Labs/lab4a/folder followed by the number 1, 2, or 3
Make 3 directories named ~/Labs/lab4a/folder followed by the number 1, 2, or 3
Make 999 folders one inside another where first 998 of them is named as folderX where X goes from 1 to 998 and the last folder named as folder9991000
Make DNS lookup for hostname stackoverflow.com
Make DNS lookup requests for domain list in file '/path/to/host-list.txt'
Make a POST request to http://dweet.io/dweet/for/cycy42 with data PiIP set to the IP address of the system
Make a copy of file.txt in all directories in current directory - names may not contain spaces.
Make a copy of file1 in dir1, dir2, and dir3.
Make a copy of the entire contents of SRCFOLDER called DESTFOLDER, if DESTFOLDER exists, the copy will be placed within it.
Make a copy of the entire contents of dir1 in the Pictures directory located in the user's home directory.
Make a directory in the current working directory with a random 32 alphanumeric character name
Make a directory in the current working directory with a random 32 alphanumeric character name
Make a directory structure same as the current directory tree under /tmp/tar_root directory
Make directorie'es/LC_MESSAGES' as needed in the current directory
Make directorie'es_MX.utf8/LC_MESSAGES' as needed in the current directory
Make directories $@ and replace mkdir: created directory  with $USER created folder  in the output
Make directories $@ verbosely and replace mkdir: created directory  with jar-jar: yea, weesa gotta  in the output
Make directories ./es/es_MX.utf8/LC_MESSAGES as needed and do not error if it exists
Make directories /tmp/A, /tmp/B, /tmp/C, and /tmp/ dir with spaces
Make directories 3/foo, 3/bar, and 3/baz
Make directories Labs/lab4a/folder1, Labs/lab4a/myfolder, and Labs/lab4a/foofolder
Make directories a, b, c, d, and e
Make directories a/b/c as needed without causing an error if it exists
Make directories bravo_dir and alpha_dir
Make directories es/LC_MESSAGES as needed and do not error if it exists
Make directories foo and bar
Make directories foo/bar/baz as needed and do not cause an error if it exists
Make directories mnt and point
Make directories project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a} as needed and do not cause an error if it exists
Make directories tmp/real_dir1 and tmp/real_dir2 as needed
Make directories ~/foo/bar/baz, ~/foo/bar/bif, and ~/foo/boo/bang as needed
Make directories a, b, c, ..., z under path2 as needed.
Make directories and parent directories as needed of $1 with \r removed
Make directories and parents as needed for each file path in a.txt excluding the basename for each path
Make directories and parents as needed for each unique second & delimited field with  , ,, and : removed in filetypes.txt
Make directories and parents as needed to ${raw_folder} and ${split_folder}
Make directories and parents for each file path in somefile.txt excluding the file name
Make directories and parents for each line in infile excluding the file name
Make directories for each line in folder_list.txt
Make directories for each unique file path in file1
Make directories to $2 as needed
Make directories to $TARGET_PATH as needed without causing an error if it exists
Make directories to /my/other/path/here as needed
Make directories to /my/other/path/here/ as needed
Make directories to /some/path as needed
Make directories to /tmp/boostinst as needed and print a message for each created directory
Make directories to /tmp/test/blah/oops/something as needed
Make directories to directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2} as needed
Make directories to x/p/q as needed
Make directories to file /full/path/to/file.txt as needed
Make directory /cpuset
Make directory /data/db
Make directory /etc/cron.15sec
Make directory /etc/cron.5minute
Make directory /etc/cron.minute
Make directory /path/to/destination
Make directory /tmp/foo
Make directory /tmp/googleTestMock
Make directory /tmp/imaginary/ on remote host before archiving file to user@remote:/tmp/imaginary/
Make directory /tmp/new
Make directory /var/svn
Make directory TestProject
Make directory aaa
Make directory aaa/bbb
Make directory alpha_real
Make directory backup
Make directory certs
Make directory destdir
Make directory dir and do not cause an error if it exists
Make directory dir1
Make directory dirname with permissions set to 777
Make directory foo
Make directory foo and do not cause an error if it exists
Make directory mybuild
Make directory new_dir
Make directory saxon_docs
Make directory subdirectory
Make directory tata
Make directory temp
Make directory testExpress
Make directory ~/log
Make directory ~/practice
Make directory ~/public_html
Make directory ~/temp
Make directory and parents as needed for each unique mime type in the current directory
Make directory and parents as needed for the directory name of file $f
Make directory and parents as needed to $FINALPATH
Make directory and parents as needed to ~/temp/bluecove/target/
Make directory expanded by $dir variable
Make directory named in variable archive with .tar* stripped from the end
Make hidden directory .hiddendir
Make sure the file .bash_profile exists in current directory, update its timestamp to current date/time.
Makes 'time' built-in to show only real execution time.
Mark variables and function which are modified or created for export to the environment of subsequent commands
Mathematically add each line in filename
Mathematically sum a column of numbers in FileWithColumnOfNumbers.txt
Mathematically sum all lines in filename
Mathematically sum all lines in filename
Mathematically sum all lines in infile
Mathematically sum all numbers in file.txt
Mathematically sum all numbers in numbers.txt
Mathematically sum each line in infile
Mathematically sum each line in infile
Mathematically sum each line in the output of ...
Mathematically sum each line in the output of ...
Measure the execution time of the command: find /usr/src -name *.html -exec grep -H foo {} ';' | wc -l
Measure the execution time of the command: find /usr/src -name *.html | xargs grep -l foo | wc -l
Merge 10 already sorted files and display the result, pausing at each page of output.
Merge already sorted files *.txt and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix output
Merge already sorted files file*.txt and split the result into files of at most 100000 lines each with a prefix sorted_file
Merge already sorted files in the current directory ending in .$suffix
Merge already sorted files in the current directory starting with _tmp and write the output to data.tsv.sorted
Merge colon-separated information from file1 and file2 where first field of both files matches
Merge colon-separated information from file1 and file2 where second field of both files matches, sorting the result based on this field - for each line, output: first 3 fields of first file, followed by first 3 fields of second file.
Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from both files, replace missing fields with no-match, and output the second field from standard input and the second and third field from file1.txt
Merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from standard input, replace missing fields with no-match, and output the second field from standard input and the second and third field from file1.txt
Merge content of decompressed files $part0, $part1, and so on
Merge data in file1 and file2 where second field is common in both files
Merge each line in file into a single comma separated line
Merge each line of standard input into a single comma separated line
Merge each non-blank line of standard input into a single comma separated line
Merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2
Merge files 'text.txt' and 'codes.txt' by outputting any lines whose second field in the first matches the first field in the second.
Merge lines from file_1 and file_2 and format the output as a table with tab separators
Merge lines from files file1, file2, file3, file4, file5, replace \t with  \t, and format the \t delimited result as a table
Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.
Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted.
Merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2', also outputting unmatched lines from 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2.
Merge the first $lc lines of current.txt and the last $lc lines of current.txt and display the result as a comma separated table
Modify and rewrite 'file' replacing all instances of foo with bar
Modify and rewrite 'file' replacing the first instance of foo on each line with bar
Modify interval to 0.1 seconds for the watch command
Monitor 3 specific process IDs: 18884, 18892, and 18919 (GNU specific)
Mount /dev/shm using /etc/fstab entry
Mount /path/to/device on /path/to/mount/location as a loop back device
Mount /path/to/device on /path/to/mount/location as a vfat filesystem and a loop back device
Mount /tmp/loop.img on /mnt/image as a loop back device
Mount /windows using /etc/fstab entry
Mount cpuset filesystem on /cpuset/
Mount device_name on mount_point
Mount ext4 filesystem /dev/xvdf on /vol
Mount ext4 filesystem /dev/xvdf1 on /vol
Mount nifs filesystem /dev/mapper/myldm on /mnt as read only
Mount ntfs-3g filesystem /dev/mapper/myvolume on /media/volume
Mount proc file system on /var/snmp3/proc
Mount project1/link1 as a bind directed at /absolute/path/to/some/where/else
Mount tmpfs filesystem to /path/to/dir
Mount vfat filesystem /dev/sda7 to /mnt/my_partition with read and write permission, umask of files and directories set to 0000, and save in fstab and allow ordinary users to mount
Mount a partition in $IMAGE with offset $OFFSET to media/$DEST as read only using a loop device
Mount a read only ntfs filesystem
Mount all filesystems in /etc/fstab
Mount image test to loop device /dev/loop0
Mount partition with label WHITE on /mnt/WHITE
Mount partition with label WHITE on /mnt/WHITE with read and write permission
Mount partition with label WHITE on /mnt/WHITE with read and write permission and have it accessible by user and group test
Mount remote cifs filesystem //192.168.0.111/serv_share on /mnt/my_share with username me and password mine
Mount remote cifs filesystem //server/source/ on /mnt/source-tmp with username Username and password password
Mount remote smbfs filesystem //username@server/share on /users/username/smb/share as soft
Mount the linprocfs filesystem on /proc
Mount the vboxsf filesystem D:\share_folder_vm on \share_folder
Mount the vboxsf filesystem myFileName on ~/destination
Mount the directory /etc on /tmp/sarnold/mount_point/
Move $PHANTOM_JS to /usr/local/share directory
Move /usr/bin/openssl to directory /root/
Move caniwrite without clobbering into /usr/local/bin
Move file.txt to docker container $CONTAINER_ID in path /var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt
Move file.txt to docker container $COUNTAINER_ID in path /var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt
Move file1, file2, ... to target directory
Move phantomjs-1.8.1-linux-x86_64.tar.bz2 to /usr/local/share/ directory
Move tobecopied/tobeexclude to tobeexclude
Move tobecopied/tobeexcluded to the current directory
Move all *.php~ files under current directory to /mydir
Move all files and directories in the current directory to $TARGET excluding files matching $EXCLUDE
Move all files and directories in the current directory to /foo
Move all files and directories in the current directory to /foo
Move all files and directories in the current directory to /tmp/blah/
Move all files and directories in the current directory to somewhere/
Move all files and directories matching *.boo in the current directory to subdir
Move all files and directories not starting with l in /mnt/usbdisk to /home/user/stuff/.
Move all files excluding hidden files in /path/subfolder/ to /path/
Move all files from src/test/ to dest displaying progress
Move all files including hidden files and excluding .. in /path/subfolder/ to /path/
Move all files including hidden files in /path/subfolder/ to /path/
Move all files listed in $i file to dir.$count directory
Move all files not matching Tux.png in ~/Linux/Old to ~/Linux/New/ using zsh with EXTENDED_GLOB
Move all files that contain Subject: \[SPAM\] to DIR
Move all files that contain Subject: \[SPAM\] to DIR
Move all files that contain Subject: \[SPAM\] to your_file
Move all files that contain Subject: \[SPAM\] to your_file
Move all hidden files in /path/subfolder/ to /path/
Move all hidden files in wordpress to the current directory
Move all lines starting with Ca to the beginning of the file
Move server.log to 'logs' directory with new name as the current date formatted as %Y%m%d%H%M and with '.log' extension
Moves window from 4 place to 3.
Moves file '$2' to the folder where '$1' file is located.
Moves the file that named like file $1 from '/tmp' folder to the folder where $2 file is located.
Normalize the path to command rename resolving any symlinks, and display what type of file it is.
Number each line in /etc/passwd as right-justified zero padded to a width of 9
Number each line in foobar as right-justified zero padded to a width of 9
Number each non-blank line of standard input
Number every line of standard input as zero padded to 6 characters followed by -
Numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter.
Numerically sort IPv4 addresses specified on standard input with presedence to first, second, third, then fourth octet
Numerically sort each line in file bb and output the result to console from greatest value to least value
Numerically sort each line in file out and print the result to console
Numerically sort each line of standard input
Numerically sort file file.dat by the second word of each line and output from greatest value to least value
Numerically sort file file.dat by the second word of each line and output from greatest value to least value
Numerically sort file files by the second - separated value of each line ordered from least value to highest value
Numerically sort file table by the fourth character of the second field, ignoring leading spaces
Numerically sort file temp.txt by the second - separated value of each line ordered from highest value to least value
Numerically sort standard input by the second word of each line
Numerically sort standard input by the second word of each line and output from greatest value to least value
On host server_b, connect as ssh user user and copy /my_folder/my_file.xml to directory /my_new_folder/, with all transfer data relayed through local host.
On host server_b, connect as ssh user user and copy /my_folder/my_file.xml to directory /my_new_folder/.
Open charm executable file in vim
Open a local SSH port on 1080 for application-level port forwarding
Open a session-less connection to 'host' as user 'user' in master mode with a socket /tmp/%r@%h:%p to enable connection sharing
Open a ssh connection to user@host with a control socket /tmp/%r@%h:%p
Open a ssh connection to user@host with X11 forwarding to run GUI programs
Open executable file for command rails in text editor mate
Open executable file of command yum in vi
Open gcc info manual and select option index menu entry.
Opens gawk info manual and goes to command-line options node.
Opens gcc info manual and goes to a node pointed by index entry funroll-loops.
Opens gcc info manual and selects option index menu entry.
Opens menu item 'Basic Shell Features' -> 'Shell Expansions' -> 'Filename Expansion' -> 'Pattern Matching' in the 'bash' manual.
Opens new tmux session.
Output file.txt, omitting all containing directories some/unknown/amoutn/of/sub/folder/
Output stuff, removing /foo/bar/ from the specified path.
Output testFile.txt.1 without the .1 suffix.
Output a CSV file as a formatted table
Output all lines from file1 except those present in file2, assuming both files are sorted.
Output all lines from file1 except those present in file2, assuming both files are sorted.
Output all lines from file1 except those present in file2.
Output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates.
Output all lines in 'file' which contain a tab character.
Output all lines in BigFile.csv whose secondn comma-separated second field matches first field of a line in LittleFile.csv.
Output all lines that have a common first colon-separated field in files 'selection2.txt' and 'selection1.txt' by displaying the common field of each line, followed by the extra fields in both lines.
Output line number and lines 200000000 through 200000005 from the infinite input of y
Output lines 16224 to 16482 of 'file', and stop reading 'file' after line 16482.
Output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.
Output only the filetype suffix of foo.tar.gz, in this case gz
Output success.txt omitting lines whose first field appears in fail.txt - lines in fail.txt must appear in the same order as they do in success.txt.
Output the base name of first argument to script or function, that is the part following the last slash.
Output the file name file.txt' from the path some/unknown/amount/of/sub/folder/file.txt
Output the last slash-separated component of specified path, in this case data_report_PD_import_script_ABF1_6
Output the specified path removing all containing directories and the .txt suffix, in this case filename.
Output the standard input followed by the line number until line 786
Output the string 'yes' continously until killed
Output the system host name and date to the console
Output the variable filename without the last dot-separated section.
Output two lines of -tcp
Output two lines of -tcp
Overwirte file '/path/to/your/file' with random content, showing progress while execution.
Overwirte file '/path/to/your/file' with random content, then overwrite with zeroes, and remove, showing progress while execution.
Overwirte file '/path/to/your/file' with zeroes and remove, showing progress while execution.
Overwrite a file 'my-existing-file' with random data to hide its content
Overwrites file $FILE with random content, then truncates and deletes it.
Overwrites file 'filename' with random content 35 times, finally writes it with zeros, truncates and deletes.
Page interactively through the output of running 'command' - the arrow keys move the view around, the < and > keys go to the beginning/end of the output, the / key initiates a search, the Q key quits, etc.
Page through a list of all running processes on the system, with those taking most CPU at the top of the list.
Page through both standard output and standard error of 'make'.
Page through extended information about all PCI devices on system.
Page through the contents of 'file', but excess from lines that don't fit within the screen/window width is cut.
Page through the contents of 'input_file_name' hexdumped with space-separated 2-byte units.
Page through the contents of BIG_FILE.txt, letting the user move around with the arrow keys, the Q key quits.
Page through the contents of file 'file_name', positioning the view at the first occurrence of regular expression 'regex'.
Page through the contents of yourFile, adding a $ at the end of each line and replacing tab characters by ^I.
Page through the contents of yourFile, adding a $ at the end of each line.
Page through the disassembler output of objdump on executable file 'my-crashing-program'.
Page through the information of the system's PHP setup.
Page through the output of 'some_command' positioning the view at the first occurrence of regular expression 'regex'.
Page through the output of running the specified PHP file.
Pair side-by-side content of the 'file' and its side-mirrored content
Parse file.json to print JSON title entries whose price are less than 10
Parse XML file example.xml and extract and number all key tags from the config section
Parse output from script.sh in the current directory which is expected to generate variable: value formatted data, and add the resulting variables to the current shell's environment.
Pass y to all the prompts for the command execute_command
Pass a single argument containing a string of numbers from 1 to 100000 to /bin/true
Pass a wildcard to scp by escaping it: copy all files with names starting with files in directory /location on host server to current directory on local machine, displaying debug info and preserving timestamps and permissions on copied files.
Pass numbers 1 to 100000 as arguments to /bin/true
Perform a dry run replacing special with regular in all file names in the current directory
Perform a dry run to recursively copy test/a to test/dest excluding test/a/b/c/d
Pick up a list of variable:value pairs from msgs.config and add them to the current shell or script's environment.
Ping all hosts in file ips twice
Ping all hosts in file ips twice
Ping every address from 192.168.0.1 to 192.168.0.254 with a timeout of 1 second and filter out no responses
Ping hostname, grep for 192.168.11 and print the IP from the output
Ping the broadcast address 10.10.0.255
Pipe 3 newlines to sshe-keygen, answering prompts automatically.
Pipe an empty line to ssh-keygen.
Pipe content of 'somedata.txt' file to the input of command $outfile
Pipe output of yes to more and append the first 3 lines to file
Pipe the output of program1 to both program2 and program3
Pipe the output of ls into read var in its separate process
Places current job to background.
Pops the top directory of dirs stack and changes to it.
Prefix all files and directories in the current directory with Unix_
Prefix all files and directories in the current directory with Unix_ if the files contain no whitespace or subdirectories
Prefix all files and directories in the current directory with unix_
Prefix all files and folders in the current directory with PRE_
Prefix all files in the current directory with unix_
Prefix each non-blank line in filename with a line number
Prepend foo to the file bar
Prepend date to ping output to google.com
Prepend the reverse history number as negative values to the output of the history command with arguments $@
Prepend the reverse history number to the output of the history command with arguments $@
Prepend time stamps to entries in /path/to/log as they appear and write to /path/to/log-with-timestamps
Prepends date to ping output
Prepends date to ping output
Preprocess C++ file 'omnitest.cpp' and page interactively through the result.
Prevent ssh from reading from standard input and execute touch /home/user/file_name.txt on $R_HOST as $R_USER
Print  Cannot acquire lock - already locked by  followed by content of $lockfile file
Print #include statements found in file2 that are not in file1
Print $1 or default 10 random lines from standard input
Print $PATH variable as input to awk script rem_dup.awk and concatenate the result with :
Print $line in hexadecimal 2-byte units
Print *Checking Partition Permission* Hostname=$LastChecked= followed by the current date
Print /tmp/myfile starting at line 11
Print I am USER and the program named ls is in LS_PATH where USER is the current user's user name and LS_PATH is the full path of the command ls
Print Mounted if /mnt/myUSBdisk exists on a mounted file system or print Not mounted otherwise.
Print RDBMS exit code : $RC   to the console and append to ${LOG_FILE}
Print Shared Memory if shared memory mounted at /tmp or print Not Shared Memory otherwise.
Print This is a sentence. by replacing all consecutive space characters with a single newline character
Print Total generated:  followed by the number of unique lines in $generated_ports
Print a\nb\ncccccccccccc\nd as two columns and neatly format into a table
Print deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main and append to file /etc/apt/sources.list
Print deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main and append to file /etc/apt/sources.list
Print echo ping -c 2 on each string in file 'ips'
Print echo ping -c 2 on each string in file 'ips'
Print file1.txt file2.txt and file3.txt with filename headers
Print found if blah contains the hex byte string \xCA\xFE\xBA\xBE
Print hello followed by the current user name
Print huge-file.log starting at line 1000001
Print new.txt with line numbers prepended
Print new.txt with line numbers prepended and line 2 or any line containing 2 deleted
Print new.txt with line numbers prepended and lines 3 and 4 deleted
Print on to standard output and to files matching /sys/bus/usb/devices/usb*/power/level
Print operator:  followed by the full name of ${USER}
Print test=hello world
Print y for each line in file2.txt found in file1.txt and a blank newline otherwise
Print yes 4 times followed by 1 no
Print 'HTTP/1.1 200 OK', two new lines and the current date
Print '111 22 3\n4 555 66\n' by replacing the spaces with tabs and '\n' with newlines
Print 'Empty dir' if $some_dir is empty
Print 'Empty dir' if $some_dir is empty
Print 'Empty dir' if $some_dir is empty, otherwise print 'Dir is NOT empty'
Print 'bla.txt' if at least one file with such name is present below the current directory.
Print 'echo 'hello, world'
Print 'empty' if aaa/ is an empty directory
Print 'file' content, formatting output as 29-symbol wide column
Print 'file' content, formatting output as 29-symbol wide column, regarding space symbol as a word separator
Print 'file' file, splitting lines into pieces with no more that 3 words in each one.
Print 'infile' content with line numbers
Print 1 byte from /dev/urandom as a signed decimal value and no address radix
Print 1 to 10 by separating them with colon (':')
Print 10 # characters in a row
Print 10 lines of a single x
Print 10 space padded xs to a width of 10 with at most 4 per line
Print 10 space separated xs with at most 4 per line
Print 1000 astarisk ('*')
Print 2 lines of 123456789
Print 3 newline separated ys
Print 3 space separated '%'
Print 4th white space separated field in file file
Print 7 spaces in a row
Print A record for domain 'domain.' from 'ns1.newnameserver' nameserver
Print A record for domain 'domain.' from 'ns2.newnameserver' nameserver
Print A record for domain 'domain.' from 'some.other.ip.address' nameserver
Print A record for domain 'domain.' from 8.8.8.8 nameserver
Print CPU usage and memory usage of all unique processes on a system
Print CPU usage and memory usage of processes running mysql
Print DISPLAY of orschiro user
Print DISPLAY of orschiro user
Print IP address of the current host
Print IP addresses of the current host
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print NS record for domain 'domain.' from 'some.other.ip.address' nameserver
Print NS record for domain 'domain.' from 8.8.8.8 nameserver
Print PID and user of processes running ssh or sshd and replace sequential spaces with a single space
Print TXT record with server`s hostname from nameserver 'server'
Print URL http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr= followed by a number ranging from 1 to 786
Print a 2 byte decimal integer from /dev/random
Print a 2 byte hexadecimal value, printable character, and octal value of $1
Print a column of CPU usage numbers
Print a count of all unique entries in ips.txt with the most frequent results at the top
Print a count of all unique lines in ports.txt sorted from most frequent to least frequent
Print a count of case insensitive duplicate filenames in the current directory
Print a count of duplicate lines in filename
Print a count of duplicate lines in filename sorted by most frequent
Print a count of each unique line from standard input
Print a count of each unique line from standard input sorted from least frequent to most frequent
Print a count of each unique line in ip_addresses
Print a count of each unique line in ip_addresses.txt sorted numerically
Print a count of files and directories in the current directory tree
Print a dump of the plain hex data in $VAR1 as printable characters
Print a frequency count of column two for every file in the current directory
Print a hex dump byte to byte of the output of echo Aa
Print a hex dump byte to byte of the output of printf Aa
Print a hex dump of $DIREC as characters
Print a line of $variable '-' characters
Print a line of 10 '#' characters
Print a line of 100 '=' characters
Print a line of 100 '=' characters
Print a line of 100 random characters either . or  
Print a line of 3 '%' characters
Print a line of 99 '=' characters
Print a list of case insensitive duplicate filenames in the current directory
Print a list of differing files
Print a list of each file with the full path prefix in the current directory tree excluding symbolic links
Print a list of most often changed files in git
Print a list of unique users who are logged in
Print a listing of the `other' directory
Print a minimal set of differences between files in directories a and b, ignore differences in whitespace, and print 0 lines of unified context
Print a minimal set of differences between files in directories a and b, ignore the first 3 lines of output, and print any line starting with - with the first character removed
Print a minimal set of differences between files in directories teste1 and teste2, treat absent files as empty, ignore differences in whitespace, treat all files as text, and print 3 lines of unified context
Print a ping request and the number of packets sent, received, and the percentage lost for each ping request to google.com
Print a random number from 2000 to 65000
Print a randomly sorted list of numbers from 1 to 10 to file /tmp/lst and outputs ------- followed by the reverse list to the screen
Print a randomly sorted list of numbers from 1 to 10 to file /tmp/lst and the screen followed by  -------
Print a single line of numbers from 001 to 010
Print a single line of numbers from 001 to 010
Print a single line of numbers from 001 to 100
Print a single line of numbers from 001 to 100
Print a single line of numbers from 001 to 100
Print a space separated list of numbers from 1 to 10
Print a space separated list of numbers from 1 to 10 with no trailing new line
Print a tab separated table in table.txt with cell borders
Print a time stamp for each successful ping to host
Print a top 20 histogram of characters used from standard input showing backslash escapes for non-displayables
Print a unique list of characters from standard input showing backslash escapes for non-displayables
Print a welcome message with the current user's user name
Print a welcome message with the current user's user name
Print a welcome message with the current user's user name
Print a welcome message with the current user's user name
Print absolute path of PATH
Print absolute path of YOUR_PATH
Print absolute path of java executable
Print all '-' separated digits in file 'infile' as dot separated digits
Print all business days in the current month without column titles
Print all distinct characters in input He likes cats, really?
Print all files containing word1 and word2 in the current directory tree
Print all files in the current directory as a comma separated list
Print all group names known to the system.
Print all lines from file 'report.txt' containing any-cased 'error' pattern
Print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'
Print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'
Print all lines in file that do not match pattern
Print all lines of seq 1 10 except the last 3
Print all lines of seq 1 10 except the last 3
Print all lines of seq 1 10 except the last 3
Print all lines of seq 1 10 except the last 3
Print all lines of seq 10 except the last 3
Print all logins formatted as The user USER is on TTY where USER is the user name and TTY is the login terminal
Print all matching commands in $PATH for command python
Print all string from file 'file2.txt' matching pattern in file 'file1.txt'
Print all the banned IPs from your server along with their origin using the geoip-bin package
Print all unique directory paths under dir1 compared to dir2
Print all unique file paths under dir1 compared to dir2
Print all unique file paths under dir1 compared to dir2
Print all unique strings in $1.tmp file.
Print all user names and terminals of users who are logged in
Print all user names and terminals of users who are logged in
Print amount of space available on the file system containg path to the current working directory human-readable.
Print amount of space available on the file system containg path to the current working directory.
Print amount of space available on the file system containing path to the current working directory in megabytes.
Print amount of space available on the file system containing path to the current working directory in megabytes.
Print amount of space available on the file system containing path to the current working directory.
Print an alert message containing the IP address and information of the user connecting via SSH
Print an octal dump of file with named characters, no addresses, and no suppressed duplicate lines with sections starting with esc, fs, gs, or us
Print and save the ping results of 25 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and split the output of my_program into files of at most 100000 bytes each and use numeric suffixes
Print appended data in /var/log/some.log that match foo and bar
Print appended data in /var/log/syslog as the file grows
Print appended data in file and search for my_pattern without buffering
Print appended data in file that match my_pattern
Print argument $1 $number times
Print base name of the file name without all extensions.
Print bash environment variable array fields and its values
Print calendar for February, March and April of year 2009 side-by-side
Print canonical filename of /path/here/..
Print canonical filename of /path/there/../../ even if it does not exist
Print characters 2 through 4 of abcdefg
Print characters in variable $a that exist in variable $b
Print comma separated gaps in file file that contains new line separated ordered numbers
Print command history
Print command line of process with pid 17709
Print command with PID 11383
Print common characters in variable $a and $b
Print common files of directory 1 and 2
Print common files of directory one and two
Print common lines in file1 and file2
Print common lines in file a and b
Print common lines in files set1 and set2
Print common lines in sorted files ignore.txt and input.txt
Print common lines of files file1, file2, file3, and file4
Print concatenated content of all files ending with '.foo' under the current folder
Print content of '1' file
Print content of 'a' file, showing all non-printing characters including TAB characters, and displaying $ at the end of each line.
Print content of 'domains.txt' with removed first one of dot-delimited fields
Print content of 'file' file reverted characterwise
Print content of 'filename' file, showing all non-printing characters and displaying $ at the end of each line.
Print content of 'whatever' file
Print content of /etc/passwd and /etc/group files
Print content of all files ending with '*.foo' under the current directory
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as space separated hexadecimal bytes on a single line
Print continuous characters '/' and '\' randomly from /dev/urandom
Print continuous lines of 100 random characters either . or  
Print count of unique lines in all files like 'list_part*'
Print crontabs of all users in system, skipping messages that some users don`t have crontab.
Print current UTC date in ISO format with precision to seconds
Print current date as epoch seconds
Print current shell settings
Print current shell using process ID
Print current shell using process ID
Print days between date $A and $B
Print difference between two strings $s and $r
Print differences between files in directories folder1 and folder2 recursively, with unified context, ignoring changes in the amount of white space
Print differences between the sorted content of file $1 and file $2, executing 'diff' with options from ${@:3} array slice
Print directories in the the current directory as a list with no report information
Print disk of mount point /pa/th
Print each .txt file in the current directory
Print each character in Hello as a hexadecimal value
Print each character in orange on a new line
Print each character of abcdefg on a line
Print each column in file with - character removed
Print each column in file with - character removed
Print each line in f1 and f2 separated by a space and f3 separated by a tab
Print each line in file, file2, and file3 and replace any tabs with spaces
Print each line in file1 and file2 separated by a space
Print each line in file1 and file2 separated by tabs and file3 separated by a space
Print each line in file1 whose first word does not exist as the first word of any line in file2
Print each line in file1.txt that is not found in file2.txt
Print each line in set1 and set2 that does not exist in the other
Print each line in parallel in files tmp/sample-XXX.tim and tmp/sample-XXX.log
Print each line that is found only once in file1 and file2 combined
Print each logged in user's full name
Print each logged in user's full name
Print each logged in user's username and full name
Print each unique entry in ip_addresses followed by a count
Print each unique line that is duplicated in files file1 and file2 combined
Print either one or two randomly three times
Print entire virtual memory usage of the current user
Print enumerated sorted list of all group names known to the system.
Print environment variable IFS and its value
Print epoch seconds for given time string Oct 21 1973
Print equal lines in compressed files number.txt and xxx.txt
Print every 16 bytes of standard input in groups of two followed by a space
Print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20
Print every 3 characters of standard input as a line
Print every 4th line from 10 lines of y with line numbers
Print every three lines of file as a comma separated line
Print every two lines in file on a single line separated by a space
Print every two lines in file on a single line separated by a space
Print every two lines in num.txt on a single line separated by a space
Print file extension assuming there is only one dot in the file name.
Print file information of command bash
Print file information of command passwd
Print file information of command studio
Print file information of command studio
Print file information of the executable file of command g++
Print file information of the executable file of command gcc
Print file name without extension assuming there is only one dot in the file name.
Print file name without the last two extensions assuming the file name doesn't contain any other dots.
Print file name without the last two extensions assuming the file name doesn't contain any other dots.
Print file names of all files ending with '*.csv' in  '/home/ABC/files/' directory
Print file size and user name with color support for each file in the current directory tree
Print file system disk space usage
Print file system disk space usage and grand total for the root file system with sizes in powers of 1000
Print file system disk space usage in 1 KiB blocks of the current directory's file system
Print file system disk space usage in human readable format of the root filesystem
Print file system disk space usage in posix and human readable format, format as a table
Print file system disk space usage of the current directory's file system
Print file system disk space usage with a grand total
Print file system disk space usage with sizes in powers of 1000
Print file type information of the java executable
Print file type of command gcc
Print file type of the command c++
Print file type of the executable file of command file
Print file type of the executable file of command file
Print file type of the executable file of command foo
Print file type of the executable file of command python
Print first 11 characters from $line, print a tab, print the md5 sum of the file specified by the 13th and onward characters from $line and print a null character at end without a trailing new line
Print first column of every line in every *.txt separated by a space
Print first field from semicolon-seprated line $string.
Print first field from semicolon-seprated line <line>.
Print first word of lines unique for 'file1' file
Print flow of random data, showing all non-printing characters
Print fourth column of data from text file file where columns separated by one or more whitespace.
Print fourth column of data from text file text.txt where columns separated by one or more whitespaces.
Print fourth column of space-separated data from text file text.txt.
Print full date of yesterday
Print full path of command c++
Print full path of command gradle
Print full path of command programname
Print full path of command python
Print full path of command python2.7
Print git branch currently checked out in a working directory.
Print git branch currently checked out in a working directory.
Print git branch currently checked out in a working directory.
Print git branch currently checked out in a working directory.
Print git branch currently checked out in a working directory.
Print git branch currently checked out in a working directory.
Print groups of all users logged in
Print help on 'cat' command usage
Print history with the first field removed
Print history with the first field removed
Print host name followed by : and the contents of /sys/block/sda/size
Print host name without a newline
Print info about all mounted file systems
Print info about all mounted file systems, and grand total statistic about available and used space
Print info about thread number of process with pid 1
Print information about all users who are logged in
Print information of the process running the current script as the current user
Print information of the root mount point
Print inode, permissions, size, and modification date of all files in the current directory tree as a list with an extra column prepended
Print input your, text, here formatted to fit 70 characters per line breaking at spaces
Print joined strings from 'file', using space symbol as separator.
Print last 10 commands in history
Print last 10 commands in history with the first 7 characters removed
Print last day of April, 2009
Print last four bytes of string '0a.00.1 usb controller some text device 4dc9'
Print line number ${linenum} in file $filename
Print line number of each line in /etc/passwd file, where current user name is found
Print line, word and byte count for each file recursively and also show the total counts
Print line, word and byte counts for each .php files in current directory tree and also show the total counts
Print lines 10000 to 10010 from input seq 1 100000
Print lines 10000 to 10010 from input seq 1 100000
Print lines 15967 to 16224 in file dump.txt
Print lines 16225 to 16482 in file file
Print lines 2960 to 2966 from the output of history
Print lines 347340107 through 347340206 in filename
Print lines containing string TEXT from all log files in the current directory.
Print lines in file1 that exist in file2
Print lines in file1.txt that do not exist in file2.txt
Print lines in foo.txt that are found only once
Print lines in file 'file' that do not match any word specified in file 'blacklist' (one word per line)
Print lines in file 'filename' that do not match the regex 'pattern'
Print lines in the sorted contents of a.txt that are not in the sorted contents of b.txt
Print lines in the sorted contents of file1 that are not in the sorted contents of file2
Print lines in the sorted contents of file2 that are not in the sorted contents of file1
Print lines in the sorted contents of second.txt that are not in the sorted contents of first.txt
Print lines of 'file' reverted order, and reverted characterwise
Print lines that only unique ones in 'set1' and 'set2' files
Print lines unique and common to sorted files file1 and  file2
Print linker search path using gcc formatted on new lines
Print linker search path using ld formatted on new lines
Print linux group names on multiple lines instead of single line output
Print list of all user names who are logged in
Print list of all user names who are logged in
Print list of bash command aliases.
Print list of disk and mountpoint of disks matching /dev/sd*
Print list of disk and mountpoint of disks matching /dev/sd*
Print list of disk and mountpoint of disks matching /dev/sd* into mount_point as a background task
Print list of file systems currently mounted.
Print list of files that are only in directory /dir1 and not their sub directories and only their file names.
Print list of missing files in a Subversion repository.
Print local SRV record of domain '_etcd-client._tcp.'
Print login information of all users except the first two and replace all instances of   with , 
Print login name and full name of all users currently logged in
Print login name and full name of all users currently logged in and delete instances of of group.*
Print mount point of the file system containing $filename.
Print mount point of the file system containing $path.
Print mount point of the file system containing $path.
Print mount point of the file system containing $path.
Print mount point of the file system containing $path.
Print multiline text ONBOOT=\YES\\nIPADDR=10.42.84.168\nPREFIX=24 to the terminal, replacing '\n' with newline symbol, and append that text to file /etc/sysconfig/network-scripts/ifcfg-eth4 as root user.
Print name of the block device containing the file system containing $path.
Print name of the file system containing $path.
Print name of user with current EUID.
Print new line separated numbers from 001 to 100
Print newline, word and byte count for all .h, .c, .cpp, .php and .cc files under current directory tree and also show the total counts
Print nothing because 'MYVAR' string doesn`t match with '/[^/]+:' pattern
Print nothing because B.txt is compared with itself.
Print number of bytes in $file.
Print number of lines that equal in files '/home/xyz/a.csv1' and '/home/abc/tempfile'
Print numbered list of all third-level files under the current directory
Print numbered list of all top-level files in the current directory, with name containing 'android'
Print numbers 1 through 10 separated by :
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 10 with padded leading zeros
Print numbers from 1 to 100
Print numbers from 1 to 30 with 0 padding to a width of 2
Print numbers from 1 to 30 with 0 padding to a width of 2
Print numbers from 1 to 30 with a leading 0
Print numbers from 1 to 30 with equalized 0 padding
Print numbers from 1 to 5 without separating spaces
Print numbers from 1 to 5 without separating spaces and without a newline
Print numbers from 1 to the number in variable $1
Print numerically sorted list of unique strings from 'ip_addresses' file, with number of occurrences of each string.
Print onlt last slash-separated field from $PATH value
Print only alphanumeric values from /dev/urandom
Print only common file names in sorted listings of directory 'dir1' and 'dir2'
Print only common strings in content of files 'file1.sorted' and 'file2.sorted'
Print only common strings in sorted content of files 'file1' and 'file2'
Print only digits in variable $name
Print only first line of 'file' content, formatted as 29-symbol wide column
Print only first line of 'file' content, formatted as 29-symbol wide column, regarding space symbol as a word separator
Print only group names from /etc/group.
Print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'Q'
Print only name and login columns of the currently logged in users
Print only printable characters from /dev/urandom
Print only second from the end field from slash-separated string in file 'datafile'
Print only strings from file 'file2' that not found in 'file1'
Print only the number of lines in file $f
Print only unique lines in files 'set1' and 'set2'
Print only unique lines of 'file_name' file
Print out every command that is executed in the script
Print out the full path name of mypathname with dots resolved
Print out the names of broken symlinks in the current directory
Print output of qstat with full job names and format as a table
Print output of 'script -c ./a /dev/null' to standard output and output.txt
Print output of 'script -q /dev/null ./a' to standard output and output.txt
Print output of command stdbuf -o 0 ./a to standard output and output.txt
Print output of script 'trap.sh'
Print package information the command ldconfig belongs to in rpm
Print pathname of a file that is connected to the standard output of the command yes
Print paths to all subdirectories inside of a directory
Print percentage of the space used on the $FILESYSTEM.
Print percents of the space used on the file system containing path to the current working directory.
Print permissions of every directory in the current directory tree
Print position number of day '9' in fourth line of calendar output for September, 2009.
Print position number of day '9' in fourth line of calendar output for September, 2009.
Print position number of day '9' in fourth line of calendar output for September, 2009.
Print process tree, adjusting output width with a screen size.
Print received input to the terminal
Print relative path of device of disk with UUID b928a862-6b3c-45a8-82fe-8f1db2863be3
Print reverse lookup for IP address 72.51.34.34
Print reverse lookup for adress 127.0.0.1
Print revesed second from the end dot-bounded field in $i value
Print right aligned numbers from 11 to 24
Print second field from semicolon-seprated line $string.
Print second field from semicolon-seprated line <line>.
Print second section of data coming from stdin where sections are separated by one or more whitespace.
Print second section of line <line> where sections are separated by one or more whitespace.
Print second section of space-separated data coming from stdin.
Print second section of space-separated data coming from stdin.
Print second section of space-separated data from text file a.
Print shared lines in number.txt.gz and xxx.txt.gz
Print shared object dependencies of command YOURAPPNAME
Print short DNS lookup for each domain name in a file 'list'
Print short TXT record of domain o-o.myaddr.l.google.com from nameserver 8.8.8.8
Print short TXT record of domain o-o.myaddr.l.google.com from nameserver ns1.google.com
Print sorted list of all group names known to the system.
Print sorted list of strings from 'ip_addresses' file, with number of occurrences of each string.
Print sorted list of unique users logged in followed by a total count
Print source directory of bash script
Print source of the file system containing $path.
Print source of the file system containing current working directory.
Print space separated list of numbers from $start to $end
Print space separated list of numbers from $start to $end
Print space separated numbers from 1 to 10
Print space separated numbers from 1 to 5
Print specific lines in File-out that do not match File-Reference to standard output
Print standard input to standard output line by line, discarding any adjascent duplicate lines.
Print string 123 once with '1' replaced by 'a' and second time replaced by 'b'
Print sub domains of mydomain.com
Print summary of files present only in dir1.
Print summary of new/missing files, and which files differ between /path/to/folder1 and /path/to/folder2, sorted alphabetically.
Print summary of new/missing files, and which files differ between dir1 and dir2.
Print summary of new/missing files, and which files differ between dir1 and dir2.
Print summary of new/missing files, and which files differ between dir_one and dir_two, sorted alphabetically.
Print summary of new/missing files, and which files differ between folder1 and folder2, excluding those matching pattern node_modules.
Print summary of new/missing files, and which files differ between folder1 and folder2.
Print symlink resolved script file name
Print the $N'th line from file by replacing commas with newlines
Print the 10 most used commands
Print the 2nd white space separated fields in file.txt as a comma separated list
Print the 5th space separated fields in file as a comma separated list
Print the IP address of your SSH session
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses of the host name
Print the MD5 message digest of /path/to/destination/file
Print the PIDs of the current user's instances of firefox
Print the absolute path of $path
Print the absolute path of third-level files under the current directory tree and number the output
Print the average round trip time of 5 pings to google.com
Print the average round trip time of 5 pings to google.com from OSX
Print the average time of 4 ping requests to www.stackoverflow.com
Print the average time of 4 ping requests to www.stackoverflow.com
Print the average time of 4 ping requests to www.stackoverflow.com
Print the base name of the current working directory
Print the base name of the current working directory
Print the base name of the current working directory
Print the base name of the current working directory
Print the base name of the current working directory
Print the base name via grep of the current working directory
Print the basename from a colon separated path 'a:b:c:d:e'
Print the boot time in standard date format
Print the calendar for February 1956
Print the character representations of 65 to 90
Print the characters in $b that match with any character in $a without printing any newline
Print the characters in $b that match with any character in $a without printing any whitespace in-between
Print the column count of compressed file $file
Print the common third whitespace separated fields in file1 and file2
Print the compressed size, uncompressed size, compression ratio, and uncompressed filename of file.zip
Print the content of file
Print the content of the file 'file' deleting the last four lines
Print the contents of $FILE starting from line 2
Print the contents of ${SPOOL_FILE} file to the console and append to ${LOG_FILE} file
Print the contents of /tmp/nums as input to addnums
Print the contents of Little_Commas.TXT
Print the contents of file in reverse order
Print the contents of file with  |  appended to each line
Print the contents of filename
Print the contents of foo.txt starting with line 2
Print the contents of my_script.py
Print the contents of n
Print the contents of numbers.txt
Print the contents of order.txt
Print the contents of somefile as input to splitter 16224-16482
Print the contents of xx.sh
Print the contents of ~/.ssh/config
Print the contents of all file* files under current directory
Print the current date followed by : $line
Print the current date followed by ' doing stuff'
Print the current date in '%H:%M:%S' format followed by the string ': done waiting. both jobs terminated on their own or via timeout; resuming script'
Print the current default full path of the java executable
Print the current directory name without full path
Print the current directory tree
Print the current directory tree with file permissions
Print the current directory tree with file sizes
Print the current directory tree with the date of last modification for each file or directory
Print the current shell
Print the current shell
Print the current user name and inode number of /home
Print the current user name associated with standard input
Print the current user's mail file in /var/spool/mail
Print the current user's real name
Print the current working directory and the base name of $1
Print the current working directory prepended by pwd: 
Print the current working directory with resolved symbolic links
Print the current working directory without a trailing newline
Print the date followed by the host name
Print the date formatted with %a %x %X followed by the host name
Print the date, then prompt Hit ENTER or wait ten seconds with a 10 second timeout, then the date again
Print the day 1 day ago
Print the day at 1 day ago in 2 months from now
Print the difference between line 2 and 3 in file $f
Print the directory name of the full real path to the current script
Print the directory name of the physical current working directory
Print the directory name of the real full path of relative/path/to/file where each symbolic link component must exist
Print the directory of the full path to the current script
Print the drive and mount point of the last mounted drive
Print the entire saved command history
Print the file 'text1;text2;text3' replacing each spacewith a newline
Print the file content of command [whatever]
Print the file content of command f
Print the file content of command f
Print the file size and directory size in human readable format of the current directory tree 2 levels deep
Print the file system file/goes/here is on
Print the file system disk space usage for /dev/disk0s2 if exists
Print the file type of the full path of rename
Print the files in the current directory as a list of comma separated values
Print the files in the current directory as a list of comma separated values
Print the files in the current directory as a list of comma separated values
Print the files in the current directory as a list of semicolon separated values
Print the files in the current directory as a list of semicolon separated values
Print the first 2 lines of tree's help message by redirecting it from standard error to standard output
Print the first 2 lines of tree's help message by redirecting it from standard error to standard output
Print the first 20 of the most changed .cs files in git
Print the first 24 alphanumeric characters from /dev/urandom, determining C locale for all categories
Print the first 32 hexadecimal characters from /dev/urandom
Print the first 32 hexadecimal characters from /dev/urandom, determining C locale for character handling functions
Print the first 5 characters followed by the next 5 characters on a new line for each line in input_file and split the result into files of at most 2000000 lines each with a filename prefix out-prefix-
Print the first 5 decompressed lines of compressed file $line
Print the first line and lines with f as the third , separated field in input and format the result as a , delimited table
Print the first line of filename as a hex dump of characters
Print the first line of seq 1 10000
Print the first line of output after alphabetically sorting the file set
Print the first two bytes of my_driver in octal
Print the first word followed by the rest of the line formatted to fit in 100 characters for every line in input
Print the full name of $USER
Print the full name of the current user
Print the full path of a 'file.txt' file in the current folder.
Print the full path of a file under the current working directory with inode number specified on standard input
Print the full path of command cc
Print the full path of command gcc
Print the full path of command rails
Print the full path of executable lshw
Print the full path prefix for all files in the current directory tree as a list
Print the full real path of /dev/disk/by-uuid/$1 followed by is mounted
Print the full real path of /dev/disk/by-uuid/$1 followed by is not mounted
Print the gcc version installed on machine.example.com using identity file identity_file and suppressing the known hosts check and warnings
Print the git log in a tabular form
Print the given file name's extensions.
Print the grand total disk usage of all files listed in files.txt
Print the grand total file system disk space usage with block sizes in units of TiB
Print the help message for tree
Print the help message of command split
Print the hexadecimal bytes and printable characters of Hello world
Print the home directory of $username
Print the home folder of $USER_NAME
Print the host name
Print the icmp sequence number and ping time of each request to 127.0.0.1
Print the input hello world followed by a swap of the first two awk fields
Print the input hello world to the console followed by a swap of the first two awk fields
Print the kernel configuration options found in /proc/config.gz
Print the last 10 commands in history
Print the last 10 commands in history
Print the last 10 commands in history
Print the last 10 lines of great-big-file.log
Print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file
Print the last 10 lines of the file '/var/log/syslog'
Print the last 1000 lines of all files matching /var/spool/cron/*
Print the last command in history
Print the last file extension from standard input
Print the last line of $file1 to the console and append to $file2
Print the last line of the alphabetically sorted lines in file set
Print the last mounted drive
Print the last space separated word from Your string here
Print the last space separated word from a b c d e
Print the last white space separated field of every line in file.txt as a ,  separated list
Print the line number of each matching <phrase> in <filename>
Print the line with most consecutive repeats prefixed with its count from standard input
Print the lines in table.txt grouped by the first field
Print the lines of file strings not specified in file index
Print the lines of file strings specified in file index
Print the login time and user of the first person who logged in
Print the longest line in filename
Print the minimum transmission time of 10 ping requests to google.com from cygwin
Print the minimum transmission time of 10 ping requests to google.com from cygwin
Print the most recently modified file
Print the most repeated line in list2.txt that exists in list1.txt prefixed by the number of occurrences
Print the mount point of the last mounted drive
Print the names of any differing files in directories dir1/ and dir2/
Print the number of 'processors' less 1.
Print the number of entries in the subdirectories of the current directory, stopping search at any device mount points.
Print the number of lines in file.txt.
Print the number of packets sent, received, and the percentage lost for each ping request to google.com
Print the output of history without line numbers
Print the output of history without line numbers
Print the output of history without line numbers
Print the path composed of the current working directory and the directory containing $0
Print the path of all the network mounts
Print the path to the pipe created for process substitution
Print the percentage of packets lost of the 5 packets sent to $host
Print the physical current working directory
Print the ping statistics of 4 requests to www.google.com
Print the ping time number only of a single request to 8.8.8.8
Print the ping time of a single request to 8.8.8.8
Print the real path of $F where each symbolic link component must exist
Print the second line of output of ls -l
Print the second line of output of ls -l
Print the second space separated fields from standard input
Print the set difference of command_which_generate_N and command_which_generate_M
Print the sorted uniqe list of folders in compressed archive nginx-1.0.0.tar.gz
Print the sorted unique column of usernames of users who are currently logged in
Print the sorted unique column of usernames of users who are currently logged in without the header
Print the sorted unique column of usernames of users who are currently logged in without the header
Print the terminal file of the users who are logged in with admin in their name
Print the text file paths that match 'needle text' in their contents under 'my_folder' recursively
Print the time of last boot
Print the time to ping 8.8.8.8 followed by a time stamp if the ping is greater than 50
Print the time to ping 8.8.8.8 followed by a time stamp if the ping is greater than 58
Print the top 10 commands with their use count
Print the top 10 commands with their use count
Print the total disk usage in bytes of all files listed in files.txt
Print the type of the current shell
Print the unique lines from standard input preserving the order they appear
Print the user name of the current user
Print the user name of the current user
Print the user name of the user running sudo
Print three lines of some line  followed by a random number
Print time required to get line number 50000000 from text file myfile.ascii.
Print timestamp as HH:MM:SS
Print total size of file systems in kilobytes.
Print true directory name of the current directory
Print type of the file system containing path $dir.
Print unique lines in file1 compared to file2 in the order they appear
Print unique lines in file_a and file_b
Print unique lines in set1 and set2 when compared to each other and remove any tabs
Print unique lines in sorted file1 compared to sorted file file2
Print unique lines in sorted file A when compared to sorted files B, C, and D
Print unique lines in sorted file a.txt compared to sorted file b.txt
Print unique lines of a and b
Print unique lines of second-file-sorted.txt compared to first-file-sorted.txt
Print unique lines of sorted File 1 compared with sorted File 2
Print unique lines of sorted file A.txt compared to sorted file B.txt
Print unique lines of sorted file A.txt compared to sorted file B.txt
Print unique lines of sorted file a and b and remove leading tabs
Print unique lines of sorted file a compared with sorted file b
Print unique lines of sorted file b compared with sorted file a
Print unique lines of sorted file f1 compared to sorted file f2
Print unique lines of sorted file file1 when compared with the list of first space separated fields of all sorted strings of file file2
Print unique lines of sorted file second.txt compared to sorted file first.txt
Print unique list of who is logged in and the time of login formatted in columns
Print user and group information of all users logged in
Print variable $OPTARG $opt times
Print variable $module in formatted columns
Print variable $module in formatted columns with at most 80 characters per line
Print variable $module in formatted rows
Print variable $opt with double quotes deleted
Print virtual memory usage of all processes owned by jbos[s]
Print what year it was 222 days ago
Print whether $file and ${file/${dir1}/${dir2}} differ
Print whether the sorted contents of set1 and set2 differ
Print whether the unique contents of set1 and set2 differ
Print which files differ between dir1/ and dir2/
Print which files differ between folder1 and folder2 treating all files as text
Print which files differ between dir1 and dir2, treating absent files as empty
Print which files differ in /tmp/dir1 and /tmp/dir2 recursively
Print which files differ in PATH1/ and PATH2/ recursively excluding any files that match any pattern in file1
Print which files differ in dir1 and dir2 recursively
Print which files differ in dir1 and dir2 recursively
Print which files differ in dir1 and dir2 recursively
Print which files differ in dir_one and dir_two recursively and sort the output
Print which files differ in folder1 and folder2 excluding node_modules recursively, output in two columns, and paginate the output
Print working directory separated by newlines instead of forward slashes
Print yesterday's date
Print yesterday's date as yyy:mm:dd
Print yesterday's date as yyy:mm:dd
Print yesterday's date information in %a %d/%m/%Y format
Prints $NEWFILE to the terminal and file '/etc/timezone' as a root user.
Prints +-10 lines around $LINENUM in filename
Prints Kb size of all top-level files and folders in a current folder in descending order in human readable format.
Prints Kb size of all top-level files and folders in a current folder in descending order.
Prints a process tree for each process of user 'username'.
Prints a random N-digit number with leading zeroes
Prints a random line from $FILE
Prints a random line from file
Prints a random number between 1 and 10
Prints a random number between 2000 and 65000
Prints a random number between 2000 and 65000
Prints all NS servers of domain google.com.
Prints all Saturday days of a current month.
Prints all business days in a current month.
Prints all child processes of a process with id 20238, separated with comma.
Prints all child processes of a process with id 20238.
Prints brief information about available package with word 'zsh'.
Prints calendar for a current month without first day of a week.
Prints calendar for a current month, replacing current data with asterisk.
Prints calendar for a current month.
Prints calendar of $month, $year, and redirects all output to the awk script 'cal.awk', with predefined variable 'day=$day'.
Prints calendar of April of 2012, and redirects output to 't' file and 'more' pager tool.
Prints calendar of February, 1900.
Prints calendars of July, 2009 and July, 2010 side-by-side.
Prints current directory name
Prints current directory name
Prints current directory name
Prints current month calendar, without highlighting of a current date.
Prints date of first Tuesday in January, 2015
Prints dates of $m month in $y year, preceded by month number and slash like ' 10/1'.
Prints day of first Tuesday in a month.
Prints day of first Tuesday in a month.
Prints day of first Tuesday in a month.
Prints days since epoch
Prints days since epoch
Prints directory where the executing script is located.
Prints directory where the executing script is located.
Prints elapsed time of command execution.
Prints file descriptor of executed built-in 'true'.
Prints file.txt without the last N bytes
Prints first found folder that contains 'ssh' file and has 'bin' in path.
Prints folder path where $mystring file is located.
Prints folder where current script is located
Prints folder where current script is located
Prints full path of a 'cat.wav' file in a current folder.
Prints full path to files in a current folder.
Prints full path to files in a current folder.
Prints full path to files in a current folder.
Prints full path to files with dot in name in a current folder.
Prints full process tree with id number of each process.
Prints git log message with a custom time format string
Prints groups list that current user belongs to.
Prints groups list that user 'el' belongs to.
Prints help on 'cp' utility.
Prints help on 'yum' utility.
Prints help on 'yum' utility.
Prints hierarchical process tree.
Prints information about active network interfaces in system.
Prints information about user $euids currently on machine and its processes, without printing header.
Prints latest modified file in a directory
Prints lines count in each *.c file of a current folder and total count.
Prints list of all libraries linked with binaries in '/bin/' and '/usr/bin/', with number of linkages for each library.
Prints list of processes in system ascending by memory usage.
Prints list of user 'myuser' groups in a format: 'groups: [comma-separated groups list]'.
Prints listing of a root folder including hidden files, and saves output to 'output.file'.
Prints local machine's LAN IP address
Prints local machine's LAN IP address
Prints logged in users in sorted order.
Prints long listing of $dir/$file file.
Prints long listing of ${0} file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file.
Prints long listing of content in the current folder with C-style escapes for nongraphic characters
Prints long listing of directories ./my dir and ./anotherdir sorted from oldest to newest, with appended indicators.
Prints long listing of directories '/tmp', '/tnt' themselves bordered with '<--' and '--->'.
Prints long listing of directories '/tmp', '/tnt' themselves.
Prints long listing of directory $var sorted from oldest to newest, with appended indicators.
Prints long listing of file 'file.ext'.
Prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators.
Prints long listing of the current directory, sorted from oldest to newest, with appended indicators.
Prints long listing of top ten most memory using processes in a system.
Prints long recursive listing of all content of a current folder, saving output to 'output.file'.
Prints long recursive listing of all content of a root folder, appending output to 'output.file'.
Prints long recursive listing of all content of a root folder, saving output to 'output.file'.
Prints message info about filename and location of the current script
Prints name of a current shell binary file.
Prints name of temporary file but doesn`t create nothing.
Prints names of all configured software repositories.
Prints newline, word, and byte count for each *.py in a current folder.
Prints number of days in a current month.
Prints number of files with extension ${EXTENSION} in the ${SEARCHPATH} directory.
Prints only first ten characters of each string of file $file.
Prints only unique lines of './script.sh' output.
Prints only unique lines of './yourscript.ksh' output.
Prints only unique strings of those stored in variables $COMMANDS and $ALIASES.
Prints out all the logged-in users along with their group information.
Prints path location of $BASH_SOURCE file.
Prints path to folder that contains file /path/to/vm.vmwarevm/vm.vmx.
Prints path to folder that contains file /path/to/vm.vmwarevm/vm.vmx.
Prints path to folder that contains target of the symbolic link ../../../../etc/passwd.
Prints path to the folder that contains target of symbolic link ../../../../etc/passwd.
Prints path to the target of symbolic link 'relative/path/to/file'
Prints process list with id numbers of a process having id 'pid'.
Prints process tree for each process owned by user 'username'.
Prints process tree for the current process with ASCII line drawing characters.
Prints process tree of a bash process.
Prints process tree of a cron process with command arguments and process id number.
Prints process tree of a current process with id numbers and parent processes.
Prints process tree of a current process with parents processes and id numbers.
Prints process tree of a process having id $ID with parent processes.
Prints process tree of a process having id $mypid, with command options and process id number.
Prints process tree of the current command process.
Prints process tree of the current process with parent processes.
Prints process tree of user 'user' processes.
Prints process tree with command line arguments and process id numbers.
Prints process tree with command line arguments of a process having id $PID.
Prints process tree, showing only strings with 'MDSImporte', and chopping output after ${WIDTH} characters.
Prints processes with 'MDSImporte' in name, cutting off  lines longer than screen width, exiting from less after end of output and saving printed lines on terminal after exit.
Prints random line from file $FILE.
Prints real path of the folder containing $0 file.
Prints reversed content of a file 'myfile.txt' with string numbers.
Prints running process that has id 'pid' with command line arguments.
Prints sequentially listing of a current folder and calendar of a current month.
Prints server name from SOA record for domain yahoo.com
Prints shell option 'globstar' with indication of its status.
Prints sizes of all top-level folders in a current folder with human-readable format and descending order.
Prints sorted list of logged in users.
Prints string 0 1 * * * /root/test.sh to the terminal, and append it to file '/var/spool/cron/root'
Prints strings with MAC address configuration of each network interface in system.
Prints strings with text texthere in all files recursively in a current folder.
Prints the Nth line of output from 'ls -1'
Prints the Nth line of output from 'ls -1'
Prints the PID, PGID and command name of the process with the name 'test' every second
Prints the absolute directory path of the current script preceded by the string dirname/readlink: 
Prints the day of last Friday in a current month.
Prints the file path composed from the path where symlink target file is located, and name of the symbolic link itself.
Prints the first N bytes of file.txt
Prints the length and contents of the longest line in filename
Prints the length, line number, and contents of the longest line in myfile
Prints the size in kb of the first 100 lines of a file
Prints top ten of most memory using processes in system.
Prints top-ten biggest top-level folders within a 'var' folder.
Prints top-ten list of most used utilities from history.
Prints top-ten of most used utilities from history.
Prints total count all non-empty lines in files of a current folder.
Prints total number of lines of all *.php files in a current folder and subfolders.
Prints user and group information for each logged in system user.
Prints week day of a 31 day in a current month.
Prints week day of a 31 day in a current month.
Prints week day of a 31 day in a current month.
Prints what day it was 222 days ago
Prints what year it was 222 days ago
Prints year-month-date format for given time
Prints yesterday's date information
Processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.
Processes file as binary file, and searches for symbol by its octal value '\015'.
Prompt the user with a question This is the question I want to ask? and save y or n in variable REPLY in zsh
Prompt user to type a list of cron jobs directly at the terminal, then use these replacing previously existing cron jobs.
Provide a list of all the files edited today to pr, and pipe pr's output to the printer
Push the current directory path to the dirs stack
Push the directory containing the first existing command found in all arguments to the directory stack.
Pushes current folder to the directory stack.
Pushes current folder to the directory stack.
Pushes current folder to the directory stack.
Pushes directory path that saved in $line variable to the dirs stack, expanding symbol '~', if present, as home folder path.
Pushes to the dirs stack directory path of the current script, or current directory path if executed from bash shell.
Put the absolute directory path to the current script to MY_DIR variable
Put the output of tty into a variable, then searches the output of who for TTY with /dev/ removed and saves it to WHOLINE
Puts the job 1 in the background.
Puts working directory into clipboard, stripping newlines
Puts working directory into clipboard, stripping newlines
Puts working directory into clipboard, stripping newlines
Query NSS entries for current hostname.
Query SRV records for domain '_kerberos._udp.foo.com'
Query about which keys invoke the named function
Quietly searches pattern in a given strings. Exits with zero status if any match is found, otherwise exits with non-zero.
Raise an error for using uninitialized variables
Raise an error if there is a reference to a non-existent environment variable and exit the shell immediately if there is any error
Rank the usage of libraries for a set of tools /bin/* /usr/bin/* ...
Read 10 bytes from $0 and print them by replacing the set '\000-\377' with '#'
Read a line from an interactive shell's standard input into variable message without backslash escapes and prompt $'Please Enter a Message:\n'
Read a line from standard input
Read a line from standard input and save each word in the bash array variable arr
Read a line from standard input and save each word in the bash array variable first
Read a line from standard input and save received words sequentially in variables XPID XUSERID XPRIORITY XVIRTUAL XRESIDENT XSHARED XSTATE XCPU XMEM XTIME XCOMMAND
Read a line from standard input and save response in variable VARNAME
Read a line from standard input in an interactive shell into variable input with prompt Do that? [Y,n] and suggestion Y
Read a line from standard input in an interactive shell with prompt in variable myprompt interpreted as PS1 is interpreted
Read a line from standard input into the first argument using an interactive shell with prompt > 
Read a line from standard input into the variable yn using the first argument as the prompt ($1 )
Read a line from standard input into the variable yn with the prompt Do you wish to install this program?
Read a line from standard input into variable ENTERED_PASSWORD without echoing the input
Read a line from standard input into variable PASSWORD
Read a line from standard input into variable REPLY with prompt $*
Read a line from standard input into variable REPLY with prompt $1 ([y]es or [N]o): 
Read a line from standard input into variable REPLY with prompt > $line (Press Enter to continue)
Read a line from standard input into variable REPLY with prompt Press key to release lock...
Read a line from standard input into variable SSHPASS with prompt Password:  and without echoing the input
Read a line from standard input into variable YESNO ignoring backslash escapes and using the prompt $? 
Read a line from standard input into variable a without backslash escapes
Read a line from standard input into variable ans without backslash escapes
Read a line from standard input into variable date with prompt BGC enter something, and storing typed backslash as backslash symbol
Read a line from standard input into variable dir
Read a line from standard input into variable foobar and suppress showing user input
Read a line from standard input into variable i with the prompt  Again? Y/n 
Read a line from standard input into variable message with escaped prompt Please Enter a Message: \n\b
Read a line from standard input into variable message with escaped prompt \nPlease Enter\na Message: '
Read a line from standard input into variable message with prompt Please Enter a Message:  followed by a newline
Read a line from standard input into variable message with prompt Please Enter a Message:  followed by a newline
Read a line from standard input into variable message with the prompt Please Enter a Message: $cr
Read a line from standard input into variable password without echoing the input
Read a line from standard input into variable password without echoing the input and using the prompt Password: 
Read a line from standard input into variable prompt with the prompt Are you sure you want to continue? <y/N> 
Read a line from standard input into variable response ignoring backslash escapes and using the prompt ${1:-Are you sure? [y/N]} 
Read a line from standard input into variable response ignoring backslash escapes and using the prompt Are you sure? 
Read a line from standard input into variable response without backslash escapes using the prompt About to delete all items from history that match \$param\. Are you sure? 
Read a line from standard input into variable text with the prompt  Enter Here: 
Read a line from standard input with a timeout of 0.1 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 10 seconds
Read a line from standard input with prompt <Your Friendly Message here> : y/n/cancel and save the response to variable CONDITION
Read a line from standard input with prompt Are you alright?  and save the response to variable RESP
Read a line from standard input with prompt Are you sure you wish to continue?
Read a line from standard input with prompt Are you sure? [Y/n] and save response in variable response
Read a line from standard input with prompt Continue (y/n)? and save response in variable CONT
Read a line from standard input with prompt Continue (y/n)? and save response in variable choice
Read a line from standard input with prompt Enter your age:\n
Read a line from standard input with prompt Enter your choice:  and save response to variable choice
Read a line from standard input with prompt Enter your choice: , arrow keys enabled, and yes as the default input, and save the response to variable choice
Read a line from standard input with prompt Is this a good question (y/n)?  and save the response to variable answer
Read a line of standard input in an interactive shell
Read a line of standard input into variable _command with the prompt as the current working directory followed by $
Read a line of standard input into variable input_cmd with prompt command : 
Read a line of standard input with prompt Enter the path to the file:  and suggestion /usr/local/etc/ and save the response to variable FILEPATH
Read a line of standard input with prompt Enter your choice:  in an interactive shell and save the response to variable choice
Read a line of standard input with prompt My prompt:  and save it to variable varname
Read a single character from standard input and do not allow backslash to escape characters
Read a single character from standard input and save to variable y
Read a single character from standard input in zsh
Read a single character from standard input into variable REPLY ignoring backslash escapes and using the prompt ${1:-Continue?} [y/n]: 
Read a single character from standard input into variable ans
Read a single character from standard input into variable doit with prompt Do that? [y,n]
Read a single character from standard input into variable key without backslash escapes and using an interactive shell with the prompt $'Are you sure : ' and default value $'Y'
Read a single character from standard input into variable key without backslash escapes and using the prompt Press any key to continue...
Read a single character from standard input into variable key without backslash escapes, with a timeout of 5 seconds, and with the prompt Press any key in the next five seconds...
Read a single character from standard input into variable runCommand with the prompt Pick a letter to run a command 
Read a single character from standard input with delimeter '' and no echo
Read a single character from standard input with prompt Are you sure? 
Read a single character from standard input with prompt Are you sure? 
Read a single character from standard input with prompt Is this a good question (y/n)?  and timeout of 3 seconds and save the response to variable answer
Read a single character from standard input with prompt Is this a good question (y/n)? and save the response to variable answer
Read a single line from standard input and save to variable line
Read a single sample of raw audio in the form of a number between -32768 and 32767
Read all *.txt file paths under /foo into a Bash array ($files)
Read and execute file 'lib/B' that located in the same directory as the current script, will fail if currently running script is not in PATH.
Read first column of each row, find all other first columns which have a difference less than 10, and append that comma separated list to the row
Read hexadecimal bytes from device /dev/midi1
Read line from file descriptor 4 and store received input in 'line' variable
Read lookup requests from text file '1.txt' and uses them to fetch TXT records.
Read one character from standard input into variable REPLY
Read one character from standard input into variable REPLY
Read one character from standard input into variable 'c'
Read standard input and replace any repeated characters except spaces with a single instance
Read standard input until a null character is found and save the result in variable f2
Read standard input until a null character is found and save the result in variable line
Read standard input until a null character is found and save the result in variable line
Read the contents of ${some_variable} until a null character is found and save the result in variable content
Read the first 10 characters from standard input in an interactive shell into variable VAR
Read the first line in $1 and save each word in the bash array variable to_sort
Read the first line of $sh_lock_file into variable sh_lock_lastPID
Read the first line of output from du -s $i into variable k in ksh
Read the history file $HISTFILE and append the contents to the history list
Read the history file and append the contents to the history list
Read the raw input of /dev/input/mice as hexadecimal bytes with 3 bytes per line
Read two bytes from /dev/urandom and print them as an unsigned integer
Read yesterday's date with format %a %d/%m/%Y into variable dt in a subshell
Reads content of bzip2 compressed files and processes it with awk utility.
Reattach a session and if necessary detach it first
Reattach a session and if necessary detach or  even  create first
Reattach to a named screen session
Reattach to a screen session
Receive input and print it to terminal
Receive input and print it to terminal preceeding with line number
Receive pattern to search for on the standard input and print only matching part of lines from file 'f.html'
Reconnect to a named screen session
Reconnect to a named screen session
Records the number of occurences of 'needle' in the array 'haystack' into the variable 'inarray'
Recursively add read and directory access to all permissions of all files and directories
Recursively add read and execute permissions to all files and folders in directory
Recursively add user write permission to all files under /path/to/git/repo/objects
Recursively and forcibly removes $TMP folder with all content.
Recursively archive test/a/ to test/dest excluding test/a/b/c/d
Recursively bind /dev to /var/snmp3/dev
Recursively bind /sys to /var/snmp3/sys
Recursively bind mount /something on /new_something
Recursively change /usr/local owner to the current user and group to admin
Recursively change all permissions under theDirectory/ to 777(read,write,execute for all users)
Recursively change owner and group of /usr/local/rvm/gems/ruby-2.0.0-p481/ to the current user
Recursively change owner and group to $JBOSS_AS_USER of $JBOSS_AS_DIR
Recursively change owner and group to $JBOSS_AS_USER of $JBOSS_AS_DIR/
Recursively change owner and group to tomcat7 of webapps, temp, logs, work, and conf
Recursively change owner of all files in folder to user_name
Recursively change owner to $1 and group to httpd of all files in the current directory
Recursively change owner to amzadm and group to root of all files in /usr/lib/python2.6/site-packages/
Recursively change owner to amzadm and group to root of all files in /usr/lib/python2.6/site-packages/awscli/
Recursively change owner to tomcat6 of webapps, temp, logs, work, and conf
Recursively change owner to www-data of /var/www/.gnome2, /var/www/.config, and /var/www/.config/inkscape
Recursively change ownership of /usr/lib/node_modules/ to the current user
Recursively change ownership of /usr/local to the current user
Recursively change ownership of /usr/local/lib to the current user
Recursively change ownership of /usr/local/lib/node_modules to the current user
Recursively change ownership of ~/.npm to the current user
Recursively change ownership of ~/.npm to the current user
Recursively change the group of all files in /tmp/php_session to daemon
Recursively change the group of all files in /var/lib/php/session to lighttpd
Recursively change the group ownership to laravel in ./bootstrap/cache
Recursively change the group ownership to laravel in ./storage
Recursively change the owner and group of /home/el/svnworkspace and 775 to your_user_name
Recursively change the owner and group of /opt/antoniod/ to antoniod
Recursively change the owner and group of /var/antoniod-data/ to antoniod
Recursively change the owner and group of /workspace and 775 to your_user_name
Recursively change the owner and group of subdir1 to user1
Recursively change the owner and group of subdir2 to user2
Recursively change the owner and group of subdir3 to user3
Recursively change the owner and group of ~/.ssh/ to dev_user
Recursively change the owner and group of all files in /your/directory/to/fuel/ to nginx
Recursively change the owner and group of all files in public_html to owner
Recursively change the owner and group of all files in the current directory to andrewr
Recursively change the owner and group of all files in the current directory to apache
Recursively change the owner group of /var/www of to www-data
Recursively change the owner of all files in /home/test to test
Recursively change the owner of all files in /usr/local/lib/node_modules to the current user
Recursively change the owner of all files in testproject/ to ftpuser
Recursively change the owner of all files in upload_directory to nobody
Recursively change the owner of all files in ~/tmp to $USER
Recursively change the owner of npm's directoriesto the current user
Recursively change the owner to $USER and group to $GROUP of /var/lib/cassandra
Recursively change the owner to $USER and group to $GROUP of /var/log/cassandra
Recursively change the owner to ${JBOSS_USER} of $JBOSS_LOG_DIR
Recursively change the owner to ec2-user and group to apache of all files in /vol/html
Recursively change the owner to user and group to www-data of yourprojectfoldername
Recursively change the ownership of all directories in the current directory excluding foo to Camsoft
Recursively change the ownership of all files in /Users/xxx/Library/Developer/Xcode/Templates to xxx
Recursively change the user and group of all files in /var/cache/jenkins to root
Recursively change the user and group of all files in /var/lib/jenkins to root
Recursively change the user and group of all files in /var/log/jenkins to root
Recursively changes group ownership of every file in '/var/tmp/jinfo' to 'www-data'.
Recursively changes group ownership of everything in '/home/secondacc/public_html/community/' to 'fancyhomepage'.
Recursively changes group ownership of everything in 'files' to 'apache_user'.
Recursively changes group ownership of everything in 'files' to 'my_group'.
Recursively changes group ownership of everything in a '/home/user1/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything within '.git' to 'git'.
Recursively changes group ownership of everything within '/git/our_repos' to 'shared_group'.
Recursively changes group ownership of everything within a '/path/to/repo' to 'GROUP'.
Recursively changes group ownership of everything within a current directory to 'repogroup'.
Recursively changes group ownership of everything within a current folder to 'admin'.
Recursively changes group ownership of everything within current folder to 'git'.
Recursively changes group ownership of the $PATH_TO_OUTPUT_FOLDER directory to $GROUP group.
Recursively changes group ownership on everything in the 'public_html' folder to 'website' group.
Recursively compress every file in the current directory tree and keep the original file
Recursively copies $1 to $2.
Recursively copies $appname.app, preserving symlinks as symlinks to the 'Payload' directory.
Recursively copies '$1' directory to '$2' directory.
Recursively copies '../include/gtest' directory to '~/usr/gtest/include/'.
Recursively copies 'SRCFOLDER' to the 'DESTFOLDER/'
Recursively copies 'include/gtest' to '/usr/include', preserving all attributes, and copying symlinks as symlinks, without following in source files.
Recursively copies 'src' to 'dest' preserving overwriting the existing files.
Recursively copies /mnt/usr/lib to the '/usr/' directory, creating symbolic links on each file instead of real copying them.
Recursively copies all files in the current directory but ones that names match pattern dirToExclude|targetDir to the 'targetDir' directory, printing info message on each operation.
Recursively copies all files in the current directory but ones with 'c' in name to the home directory.
Recursively copies everything from '/source/path/*' to the '/destination/path/', preserving from overwriting existing files, and printing info message on each operation.
Recursively copies everything from '/zzz/zzz/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything under the 'current' folder to the '.hiddendir' folder.
Recursively copy /path/to/data/myappdata/*.txt to user@host:/remote/path/to/data/myappdata/
Recursively copy dir_a to dir_b and delete any new files in dir_b
Recursively copy dir_b to dir_a and delete any new files in dir_a
Recursively copy emptydir to destination/newdir
Recursively copy old/ to new/ as a dry run skipping files that have matching checksums and output the name only
Recursively copy original_dir to copy_dir preserving file/dir timestamps, displaying progress, and skipping files which match in size, keeps partially transferred files.
Recursively copy source, dir, and target to dir as a dry run
Recursively copy /path/foo on host prod to local directory /home/user/Desktop, connecting as ssh username corresponding to local username.
Recursively copy /path/to/foo on host your.server.example.com to local directory /home/user/Desktop, connecting as ssh username user.
Recursively copy all .txt files to user@remote.machine:/tmp/newdir/
Recursively copy all files and directories in current dir except foo to location specified by variable other
Recursively copy all files and directories matching *ela*L1*TE* in localhost's directory /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/ to /var/www/html/sbo/2010/teacher/ela/level1 on localhost connecting as ssh user dalvarado, in batch mode preserving file permissions and timestamps, and without displaying progress information.
Recursively copy all files and folders in the current directory excluding exclude_pattern to /to/where/
Recursively copy all files matching *.sh in $from to root@$host:/home/tmp/ compressing data during transmission
Recursively copy all files with names ending with .txt from dir_1 to the same location within copy_of_dir_1
Recursively copy directories A and D to directory /path/to/target/directory on host anotherhost, connecting as ssh user matching current user on local host, via default TCP port for ssh (22).
Recursively copy directory /path/to/data/myappdata to user@host:/remote/path/to/data/myappdata
Recursively copy directory /path/to/data/myappdata to user@host:/remote/path/to/data/newdirname
Recursively copy directory or file /something on host myServer to current directory on local host, connecting as ssh user matching username on local host.
Recursively copy everything in /source/path whose name doesn't begin with a period, to /destination/path, without overwriting existing files, and outputting a line for each file copied or skipped.
Recursively copy local file/directory /copy/from/path to remote location /copy/to/path on host server, connecting as ssh user user and using identity key file /path/to/your/.pemkey instead of the default in ~/.ssh/
Recursively copy newer files in sourcedir/ to user@dest.com:/dest/dir/ via ssh
Recursively find strings in all files under current directory, that matching with comma-separated patterns list in file 'searches-txt'
Recursively finds 'pattern' in files from current folder, and prints matched string with number only if matching whole word.
Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them.
Recursively finds all files containing text 'OPEN' and prints folder where they are placed.
Recursively finds all files like *.log and *.trc in a current folder, modified in a last day, sorts list by modification time and pipes output to pager tool 'less'.
Recursively finds all files with any cased text Text in a current folder, and precedes found string with its number in file.
Recursively finds all files with whole word pattern in a current folder, and precedes found string with its number in file.
Recursively finds string 'class foo' in all *.c files from current folder.
Recursively finds strings like texthere  in all *.txt files of a current folder.
Recursively finds strings with 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.
Recursively finds strings with the whole word 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings.
Recursively finds strings withtext string to search” in any file within the 'directory-path', following symlinks, and prints found strings with file names.
Recursively finds strings withtext string to search” in files under 'directory-path', regarding provided options '[option]'.
Recursively findsfiles with text pattern in current folder, ingnoring case differences, prefixes each matched line with number in file and suppresses error messages about nonexistent or unreadable files.
Recursively from current folder searches only files that names match .*xxx pattern, ignores binary files and prints file name before every string that contains my Text to grep.
Recursively list all files and directories in coreutils-8.9 with DIR:  prepending directory names
Recursively list all files on smbfs mounts
Recursively list all the files and directories that are only in directory /dir1 with their full paths.
Recursively list contents of the current directory in a tree-like format
Recursively lists all *.py and *.html files in a current folder.
Recursively lists all files in a current folder and prints full path along with modification time.
Recursively lists all files in a current folder in long format, sorting by modification time.
Recursively lists all files in a current folder in long format.
Recursively make all mounts under / private
Recursively move ./dir to user@host:/path compressing data and displaying progress during transmission
Recursively move ./dir to user@host:/path via ssh on port 2222 compressing data and displaying progress during transmission
Recursively print all directories in the current directory tree
Recursively print all files and directories in the current directory tree
Recursively print all files and directories in the current directory tree including hidden files
Recursively print all files and directories in the directory tree $absolute/path/of/your/dir
Recursively prints paths to all text file in folder (ignores binary files).
Recursively remove all *.txt files and answer n to any prompt
Recursively remove all *.txt files and answer y to any prompt
Recursively removes $TMPDIR folder, prompting user on each deletion.
Recursively removes 'classes' folder, prompting user on each deletion.
Recursively removes all files and folders that match pattern '/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*'
Recursively removes all files like '*.pyc' in a current folder.
Recursively removes all files like '*.pyc' in a current folder.
Recursively removes all files like '.DS_Store' from current folder.
Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.
Recursively search for string here and write the output to the console followed by the number of matched lines
Recursively search the current directory for unique entries of searchtext and replace matchtext with replacetext
Recursively search through all files in all directories for any lines containing pattern and whose second word is not Binary.
Recursively set all permissions under ../tools to 777
Recursively set all permissions under /directory to 755
Recursively set all permissions under /folder to 755
Recursively set all permissions under /opt/lampp/htdocs to 755
Recursively set all permissions under /whatever/your/directory/is to 755
Recursively set the file access control list of app/cache and app/logs to rwx for the current user and for user www-data
Recursively unzip files to stdout in /some/dir/here and search for blah
Redirect stderr to stdout and write to the console and /dev/null
Redirect the current process's standard error to standard out and write to console and append to $HOME/logfile
Redirects content of extracted file to a pipe
Redirects output of 'time' built-in function and prints only real-time statistic.
Redirects output of 'time' built-in function and prints only real-time statistic.
Redirects time output to file.
Reformat date Sat Aug 09 13:37:14 2014 +1100 according to format string %a %b %d %H:%M:%S %Y %z
Remount / with read and write permission
Remount / without writing in /etc/mtab
Remount /dev/block/mtdblock3 on /system with read and write permission
Remount /dev/block/mtdblock3 on /system with read only permission
Remount /dev/sda7 partition as executable
Remount /dev/shm with a maximum size of 40G
Remount /dev/stl12 on /system as read and write
Remount /dev/stl12 on /system as read only
Remount /home/evgeny with the suid flag set
Remount /media/Working/ with a umask of 000
Remount /mnt/mountpoint as read only
Remount /mnt/mountpoint with read and write permission
Remount /path/to/chroot/jail/usr/bin as read only
Remount /system as read only
Remount /system with read and write permission
Remount /system with read and write permission
Remount /system with read only permission
Remount extX filesystem /dev/hdaX on / without writing in /etc/mtab
Remount point subtree to mnt as a bind mount
Remount rfs filesystem /dev/stl12 on /system with read and write permission
Remount yaffs2 filesystem /dev/block/mtdblk4 to /system as read and write only
Remount yaffs2 filesystem /dev/block/mtdblk4 to /system as read only
Remount part of the file hierarchy from olddir to newdir
Remount root filesystem /
Remount subtree /outside to /inside as a bind
Remount subtree /usr/bin on /path/to/chroot/jail/usr/bin as a bind
Remount the root file system with read and write permission
Remove - from the contents of /proc/sys/kernel/random/uuid and save output to variable comment
Remove \n from test1\ntest2\ntest3 and search for test1.*test3
Remove \r at the end of each line in infile and display the result as printable characters or backslash escapes
Remove _dbg from all file or directory names under the current directory
Remove ESC key bind
Remove a leading machine from the system host name and save the result to variable machnum
Remove adjascent duplicate lines from file 'input' comparing all but last space-separated fields
Remove all *.mp3 files in tmp directory but not in it's subdirectories
Remove all but 5 last comma-separated fields from each line in 'data.csv'
Remove all characters except ; and digits from standard input
Remove all files and directories in the current directory by answering with y to all prompts
Remove all files containing 'sample' in their names under '/home/user/Series' directory tree
Remove all spaces from standard input
Remove all the files and directories that are in /dir1 but not in /dir2.
Remove all white space from infile.txt and wrap each line to 80 characters
Remove blank lines and replace   with / in struct.txt as input to make directories with parents as needed
Remove characters in columns 34 through 39 in the output of finger
Remove containing directories and suffix .wiki from specified path, output the result.
Remove containing directories from variable 'path' ie. /some/specific/directory becomes directory.
Remove duplicate lines in file_name and print the output on stdout
Remove duplicate lines in file_name and print the output on stdout
Remove duplicate phrases and keep the original order of lines in $infile
Remove duplicates in variable variable and preserve the order
Remove each unique item listed on standard input and do nothing if empty
Remove empty folder, and skip error message if one is not empty.
Remove everything in a current folder prompting user on each action.
Remove everything in a current folder without prompting.
Remove everything within parentheses and substitute all non digit characters with a space from 1/2 word word word word 4/5 and format the output as a table
Remove filetype suffix from filename
Remove gitlab.site.org from root's known hosts file.
Remove group write permission on all files output by compaudit
Remove last two underscore-delimited fields and following characters in t1_t2_t3_tn1_tn2.sh keeping only t1_t2_t3
Remove leading and trailing space from lines in file 'in.txt', interactively page through a hexdump of the result.
Remove leading and trailing spaces from the output of 'hg st -R $path' and save the result in variable var
Remove leading and trailing spaces or tabs from    wordA wordB wordC   
Remove leading and trailing spaces or tabs from $string
Remove lines matching kpt# from data.txt and add left-justified line numbers
Remove newline characters from file.txt
Remove newline characters from yourfile.txt
Remove newlines from the output of ./series.bc and pipe into sed 's.\\..g'
Remove spaces from output of echo aa | wc -l
Remove symbolic links and get absolute path of ${the_stuff_you_test} and save to variable DIR_PATH
Remove the 123_ prefix from all filenames of .txt files in current directory.
Remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node' with superuser privilege
Remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node.1'
Remove the first 7 characters of every line in the output of history
Remove the last 2 tab-separated fields of each line in file pointed to by filename
Remove the last 3 characters from 987654321, keeping only 987654
Remove the last file extension from filename.gz
Remove the last file extension from standard input
Remove the last line from $file without reading the whole file or rewriting anything
Remove the last two alphanumeric file extensions from mpc-1.0.1.tar.gz
Remove the last two components of $path
Remove the line matching pattern to match in ./infile and print to standard output
Remove the passphrase from user's ssh key without prompting.
Remove the passphrase from ~/.ssh/id_rsa.
Remove the path $1 from the PATH environment variable
Remove trailing spaces from the output of 'hg st -R $path' and save the result in variable var
Remove what follows the forth occurrence of the character : in any field which contains it
Remove what follows the forth occurrence of the character : in any field which contains it
Removes '/var/lib/mongodb/mongod.lock' in 'sudo' mode.
Removes 'folderName', and removes all content within if 'folderName' is folder.
Removes 'foo' file.
Removes 'latest' folder if empty.
Removes 'subversion' packages from system.
Removes 5 oldest files in the current folder.
Removes 55, adds a 10-digit line number, and rearranges the date for each line in input
Removes 55, adds a 10-digit line number, and rearranges the date for each line in input on OSX
Removes alias with 'sudo' name.
Removes all cached yum data from a system.
Removes all files but $1 newest ones from current folder.
Removes all files but 5 newest ones from current folder.
Removes all files but 5 newest ones from current folder.
Removes all files from current folder but 3 newest ones
Removes all files from current folder but 5 newest ones, filtering out directories from initial search.
Removes all files from current folder but 5 newest ones.
Removes all files from current folder but 5 newest ones.
Removes all files from current folder but 5 newest ones.
Removes all files like '*.bak' in a current folder, and prints messages about what is being done.
Removes all files like 'A*.pdf' from current folder without prompting.
Removes all listed folders with content in sudo mode.
Removes all top-level *.pdf files in a current folder.
Removes all top-level empty folders within the current folder.
Removes any empty folder that matches pattern ed*.
Removes empty folder 'edi' and 'edw'.
Removes empty folder 'symlink'.
Removes empty folder, and hides error message if one is not empty.
Removes everything from current folder but '*ddl*' and '*docs*' files.
Removes files 'junk1', 'junk2', 'junk3'.
Removes files that are listed in file 'xaa'.
Removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting.
Removes first and last parts of path $path and saves the result in 'finalName' variable.
Removes first and last parts of path $path and saves the result in 'finalName' variable.
Removes first and last parts of path 'test/90_2a5/Windows' and prints the result.
Removes shell alias with name 'python'.
Removes strings with pattern from file 'filename'.
Removes symlinks for formula bash-completion from the Homebrew prefix.
Removes the last 2 lines from a file
Removes trailing and starting newlines from file
Rename /usr/bin/php to /usr/bin/~php
Rename Tux.png to .Tux.png
Rename blah1 to blah1-new
Rename blah2 to blah2-new
Rename fghfilea to jklfilea
Rename file.txt in directories v_1, v_2, and v_3 each to v_1.txt, v_2.txt, and v_3.txt respectively and print the conversion
Rename file0001.txt to 1.txt
Rename file001abc.txt to abc1.txt
Rename new to old and backup to old.old if old exists
Rename new to old and make a backup if old exists
Rename old to tmp
Rename original.filename to new.original.filename
Rename original.filename to new.original.filename
Rename svnlog.py to svnlog
Rename www_new to www even if www directory exists
Rename $file file, preserving only part of name before '-' symbol, and appending '.pkg' suffix to the end
Rename absolute path of symbolic link dirln to dir2
Rename all *company* files/directories under current directory to *nemcompany* files/directories
Rename all .html files to .txt
Rename all .html files to .txt in a portable way without requiring the rename perl script.
Rename all .png files, changing the string _h.png into _half.png.
Rename all files in current directory to lowerase, overwriting any existing files.
Rename all files in current directory to lowerase.
Rename all files in current directory whose name starts with 'F0000', trimming a zero from any sequence of four zeroes in the name.
Rename all files in current directory with names starting with fgh so they start with jkl instead
Rename all files in the current directory starting with fgh to start with jkl
Rename all files in the current directory to the md5 sum followed by the extension and print the conversions
Rename file edited_blah.tmp to /etc/blah
Rename file file.txt.123456 to file.txt
Rename uppercase file or folder name $1 to lower case name
Renames all *.html files in a 'folder' directory to *.txt files.
Renames all *.html files in a current directory to *.txt files.
Renumbers all windows in the session in sequential order.
Repeat image.png 10 times on a single line
Repeat image.png 10 times on a single line
Replace    with  $UID  in the output of history
Replace , with \r\n in a,b
Replace ,, with , , in $file and display the , delimited result as a table in less with a shift value of 5 and line numbers
Replace ,, with , , twice in data.csv and display the , delimited result as a table
Replace - with 0 in columns 4 and 5 of file test.in and format as a table
Replace _ with newlines in Testing\r\nTested_Hello_World and display the named characters
Replace _ with newlines in Testing\r_Tested and display the named characters
Replace dummyvalue with the system IP address in filename
Replace inputfile with a sorted unique list of its contents
Replace version.old with version.new in the symbolic link target of SomeLibrary
Replace all ' ' with '-' from standard input
Replace all '置換前' with '置換後' in all regular files under current directory tree and modify them in-place
Replace all URLs in MyHTMLFile.html with $pub_url and create a backup with suffix .bak
Replace all colons with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all commas with tab characters in 'filename.csv' and page interactively through the result.
Replace all instances of ; with \n in bla@some.com;john@home.com
Replace all instances of STRING_TO_REPLACE with REPLACE_WITH in file index.html and make a backup with suffix bak
Replace all instances of STRING_TO_REPLACE with STRING_TO_REPLACE_IT in index.html
Replace all instances of STRING_TO_REPLACE with STRING_TO_REPLACE_IT in index.html and write the output to standard output and index.html
Replace all instances of STRING_TO_REPLACE with STRING_TO_REPLACE_IT in file index.html and make a backup with suffix .bak
Replace all instances of STRING_TO_REPLACE with STRING_TO_REPLACE_IT in file index.html and make a backup with suffix bak on OSX
Replace all instances of string with longer_string in file input.txt and re-align
Replace all negative numbers in the 3rd comma-separated column of inputfile by the number notated in parenthesis instead of with a minus sign.
Replace all newlines except the last with a comma in test.txt
Replace all newlines from standard input except the last with spaces
Replace all newlines from standard input except the last with spaces
Replace all newlines from standard input except the last with spaces
Replace all newlines from the contents of file except the last with spaces
Replace all newlines with spaces in standard input
Replace all newlines with spaces in the contents of file
Replace all non-punctuation characters with newlines from standard input
Replace all sequence of 'blank' characters in file 'log' with a single occurence of such symbol and print space-separated fields of each string but first two fields
Replace all spaces with comma in ${TO_IGNORE[@]}, append with '--ignore ' and save the resultant string to variable 'ARGS'
Replace any blank character from standard input with a tab
Replace any sequence of spaces in file 'text.txt' with single space and print 4th space separated field
Replace commas with newlines in $MOUNT_OPTS and search for the regex '^acl$'
Replace each new line in INPUT.txt with :
Replace each newline in input 1\n2\n3\n4\n5 with a comma
Replace each non-blank line in YOURFILE preceded with pX= where X is the line number
Replace newline with _ in file then search for _foo_ and output with _ characters deleted
Replace sequential tabs with a single space in thefile.txt and write to the_modified_copy.txt
Replace the openssl command executable with a symbolic link to /usr/local/ssl/bin/openssl
Replace the leading spaces in the output of history with periods
Replace the spaces after line number in the output of history with ..
Report available space on the file system containing /tmp in kilobytes.
Report available space on the file system containing /tmp in kilobytes.
Report file system '/dev/disk0s2' disk usage
Report file system containing /example disk usage in kilobytes.
Report file system containing /tmp disk usage in kilobytes.
Report file system containing path to /dir/inner_dir/ disk usage human-readable.
Report file system containing path to /dir/inner_dir/ disk usage in kilobytes.
Report file system containing path to /some/dir disk usage in kilobytes.
Report file system containing path to the current working directory disk usage human-readable.
Report file system containing path to the current working directory disk usage in kilobytes.
Report file system containing path to the current working directory inodes usage.
Report file system containing path-to-file disk usage human-readable.
Report file system containing the current directory disk usage
Report file system containing the current directory disk usage in kilobytes.
Report file system disk space usage in human readable format
Report file system inodes usage in human readable format
Report file system mounted at $path_in_question disk usage if canonical path $path_in_question is a mount point.
Report file systems disk space usage pretty formatted.
Report file systems disk space usage pretty formatted.
Report file systems disk usage for file systems of type <type>.
Report file systems disk usage human-readable using POSIX output format.
Report file systems disk usage in 1GB blocks.
Report file systems disk usage in kilobytes.
Report file systems disk usage using POSIX output format.
Report file systems disk usage, elide all entries insignificant to available space, and produce a grand total.
Report file systems inode usage.
Report file systems inodes usage.
Report only total size of file systems in 1T blocks.
Report only total size of file systems in terabytes.
Report root file system disk usage human-readable.
Report total disk usage info on root file system, printing all sizes as power of 1000
Report total file systems disk usage estimated in terabytes
Report total file systems disk usage in 1T blocks.
Report total file systems disk usage.
Report total size of the root filesystem disk usage in powers of 1000.
Reports count of characters in the value of ${FOO_NO_EXTERNAL_SPACE} variable as follows:  length(FOO_NO_EXTERNAL_SPACE)==<counted number of characters>
Reports count of characters in the value of ${FOO_NO_LEAD_SPACE} variable as follows: length(FOO_NO_LEAD_SPACE)==<counted number of characters>
Reports count of characters in the value of ${FOO_NO_TRAIL_SPACE} variable as follows: length(FOO_NO_TRAIL_SPACE)==<counted number of characters>
Reports count of characters in the value of ${FOO_NO_WHITESPACE} variable as follows: length(FOO_NO_WHITESPACE)==<counted number of characters>
Reports count of characters in the value of ${FOO} variable as follows:  length(FOO)==<counted number of characters>
Reports count of processors in system.
Reports count of processors in system.
Reports time consumed by command 'sleep 1' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 1' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 1'.
Represent current date in RFC 3339 format with precision to seconds and save it to 'timestamp' variable
Represent the UTC date given in time string 1970.01.01-$string1 as number of seconds since the epoch and save it in 't1' variable
Represent the current time as seconds since epoch and save it to variable 'TODAY'
Represent time string $MOD_DATE as seconds since epoch and save to variable 'MOD_DATE1'
Request A record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request DNS record for  domain 'dragon-architect.com' with tracing and additional section, and extract third block of text, separated between two new lines.
Request IP address for each domain name received on the command input
Request IP address of 'myip.opendns.com' from name server 'resolver1.opendns.com'
Request MX record of 'example.com' domain, and filter out all comment strings
Request NS record for com. domain, receiving only authoritative answers
Request SSH to run echo foo; sleep 5; echo bar in the background
Request authority info with comments for 'djzah.com' from name server 'ns1.hosangit.com', and pass it to 'script.awk' awk script.
Request changing the passphrase of key file private.key
Request that the master ssh connection officefirewall exits
Request that the master ssh connection otherHosttunnel exits
Reread user's .profile configuration file.
Resolve all symlinks in path to firefox binary if it exists in path, resulting in absolute path with no symlinks.
Resolve any symlinks in working directory, and go to resulting pathname.
Resolve symbolic link of file /foo/bar/baz
Resolve symbolic link of file FILE even if the file does not exist
Resolve symbolic link of path of python2.7
Retrieve column number from column name Target in file table
Retrieve only build number of current kernel, ie. #104
Return 0 if file system is mounted on '/full/path'
Returns 0 exit status despite of 'somecommand' execution result.
Returns 0 if user $1 belongs to group $2.
Returns exit code 1 and terminates shell if 'set -e' was applied.
Returns exit code 1.
Returns exit code 1.
Returns exit status 0 and prints exit status of previous command.
Returns exit status 0.
Returns the number of modified files in a git repository, whitespaces stripped.
Returns the single most recent file in a directory
Returns the single most recent file in a directory
Reverse the order of lines in dax-weekly.csv keeping the first line the same
Reverse the order of lines in myfile.txt using BSD tail command
Reverse the space separated words in 35 53 102 342
Reverse the space separated words in aaaa eeee bbbb ffff cccc
Reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'
Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.kb' file, comparing human readable numbers in file strings.
Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.name' file
Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.pid' file, comparing human readable numbers in file strings.
Revert $string value and print first 20 space-separated fields
Rewrite 'temp.txt' omitting any repeating lines
Rotates the dirs stack so that the second directory is at the top.
Run ./configure with a new environment variable CC set to the full path of the command 'cc'
Run ./configure with a new environment variable CC set to the full path of the command 'gcc'
Run command on server host as user user
Run myprogram in the current directory, pausing for user input at each page.
Run myprogram, pausing for user input at each page.
Run ps -elfc followed by ls on host example.com
Run 'command', pausing and waiting for user interaction after each page of output.
Run 'join' on file1 and file2, using a literal tab character as field separator.
Run 'join' with the number-sorted output of file1 and file2, without modifying file1 or file2: for each line with a common first field in file1 and file2, output the common field followed by the extra fields in both files.
Run 'make -e' with an environment variable 'HOSTNAME' set to the system hostname
Run 'make' with parameter K_VERSION set to current kernel release.
Run 'otherscript.sh' script with all environment variables specified in the file 'xxxx'
Run 'somecommand' in an environment without the FOO variable.
Run 'top' in batch mode with delay of 1 second between updates, and duplicate the standard output to file 'output.log' in current directory.
Run ./yourProgram without address space randomization, reporting actual machine type.
Run .makeall.sh in an empty environment.
Run /bin/true with 1 to 100000 as arguments
Run /bin/true with 1 to 99999 as arguments
Run 10 bash processes at most 4 at a time of echo start N; sleep 3; echo done N for N ranging from 1 to 10
Run a rm process to recursively remove cache, making it immune to all SIGHUP signals sent to it.
Run a program in a named screen session
Run a shell in a named screen session
Run a shell with all environment variables specified in the file 'cronenv' in the user's home directory.
Run cmd1 and cmd2 on each file/directory under current directory with the file/directory path as a positional argument to those commands
Run command program as the current user
Run command 'su whoami' on host 'remotehost'
Run command specified by $line, replace space with newline and save the output to variable 'arr'
Run commands df -k;uname -a on server 192.168.79.134
Run mycommand in /tmp without changing the current shell's working directory
Run perl -V in an empty environment.
Run rsync with options specified by variable OPTS, copying directoryspecified by variable FIND, and to destination specified by variable BACKUPDIR.
Run script $2 on remote host $1 using interpreter $INTERPRETER with pseudo-terminal allocation
Run sed command s#\(export\ PATH=\\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2# on ~/.zshrc where $(whoami) is replaced with the current user name
Run the Java archive program.jar in the background and immune to SIGHUP sent to it.
Run the PHP script newEmptyPHP redirecting the output to nohup.out in the current directory, or in the home directory if that is not possible. The process will not receive or respond to SIGHUP which are sent to it.
Run the PHP script 'yourscript.php', making it immune to SIGHUP signals.
Run the command 'true' with an empty environment variable doFirst
Run the command 'true' with an empty environment variable doFirst
Run the find command with all shell positional arguments
Run the java archive 'start.jar' in a xterm window, immune to SIGHUP sent to it. The xterm is sent to background, so control returns immediately to the prompt on the original terminal screen/window.
Run the node expression JSON.parse(process.argv[1]).foo on the contents of foobar.json
Run the sh for construct in a subshell - the subshell is immune to SIGHUP signals sent to it, and the output is redirected to output.txt.
Run the specified git command, paging through the output with raw characters written to the terminal, without initializing the terminal capabilities, and automatically exiting when the end of the output is reached.
Run two processes, cmd1 whose output is fed as input to cmd2: cmd1 is immune to all SIGHUP signals sent to it, but cmd2 is not.
Run vi with all btree*.c files under current directory
Running script outputs the name of a directory, go into that directory.
Running /path/to/my/script outputs the name of a directory, go into that directory.
Running javascript program app with node outputs the name of a directory, go into that directory.
Runs 'mpv' command for each *.mpv and *.flv file in a current folder.
Runs 'tty' command in a subshell that is opened by built-in function 'true'.
Runs programs and prints formatted summary of system resource usage.
Runs programs and prints formatted summary of system resource usage.
SSH in server 'server' as user 'user' with X11 forwarding disabled
SSH into $NAME as user ${USERNAME} using key file ${KEYDIR}/${KEY}.pem, automatically add the host to list of known hosts and execute ${COMMANDS}
SSH into 111.222.333.444 as user tunneluser without a pseudo-terminal and without interpreting bash variables locally
SSH into 111.222.333.444 as user tunneluser without interpreting bash variables locally
SSH into hostname on port 22 as user myName
SSH into hostname on port 22 as user myName
SSH into localhost with forced pseudo-terminal allocation, execute $heredoc, and save the output to variable REL_DIR
SSH into myhost.com as user myname with a check every 60 seconds that the server is still alive
SSH into server as user user and interpret commands in /bin/bash until EOT is received
SSH into $1 with login name 'pete'
SSH into SERVER, execute command, and start up a login shell when it completes
SSH into host $1 using key file /path/to/ssh/secret/key and execute command $2
SSH into host server as user user
SSH into me@machine, run ./executeMyScript, and spawn a bash shell
SSH into server app1 as the current user
SSH into server server.com as user remote_user
SSH into user@server and run command ${SSH_COMMAND}
SSH login in 'middle.example.org' via port 2222 as user 'deviceuser' using a private key file './device_id.pem'
SSH using parameters in $@ in master mode in the background without executing any commands and set the ControlPath to $MASTERSOCK
SSH with parameters specified in $@ using key file ~/.ssh/gitkey_rsa
SSH with trusted X11 forwarding into user@remoteToRemote_IP from SSH connection user@remote_IP
Save $N number of '.' characters in variable myvar
Save 1 4 6 9 11 17 22 as a bash array arr
Save XXX- followed by a random 4 byte unsigned integer to variable tempfile
Save something into variable param in ksh
Save $line line in history
Save 'echo whatever you want your command to be' in history
Save 'foo' into variable 'bar' in ksh
Save IP address of your SSH session in variable WORKSTATION
Save IP addresses of the host name in variable ip
Save IP addresses of the host name in variable ip
Save Java home in variable JAVA_HOME
Save Maven project version to variable version
Save Maven project version to variable version
Save a comma separated list of all $MY_DIRECTORY/*/ directories to variable 'FOLDER'
Save a comma separated list of all directories under current directory tree to variable 'FOLDER'
Save a line of 100 random characters either . or   in variable foo
Save a list of all 755 permission files/directories under $dir directory tree to the variable 'files'
Save a nginx link to /path/to/file with the current user and system FQDN host name in variable path
Save a random 4 byte unsigned integer from /dev/urandom to variable RAND
Save a space separated list of process ids of currently running jobs to variable 'bgxjobs'
Save a unique list of the currently logged in usernames to variable line
Save absolute path of $path that may not exist to variable abspath
Save absolute path of $path that must exist along with all parents to variable abspath
Save absolute path of $path whose parents exist to variable abspath
Save absolute path of /home/nohsib/dvc/../bop in variable absolute_path
Save absolute path of java home to variable JAVA_HOME
Save absolute path of the script filename in variable MY_PATH
Save absolute path of the script filename in variable SCRIPT
Save absolute path of the script filename in variable SCRIPT
Save actual working directory in variable target_PWD
Save all directories under the current directory as a comma separated list in variable FOLDERS
Save all directories under the current directory as a comma separated list in variable FOLDERS
Save all entries that are wrapped around with opening and closing square brackets in file 'FILENAME' to variable 'var'
Save count of lines from file $file matching with pattern $filter and not matching with pattern $nfilter in variable 'totalLineCnt'
Save directory ../../lib relative to the executable gcc to variable libdir
Save first IP address of domain 'google.com' in 'address' variable
Save first one of space separated parts of each line in $LOCKFILE file to the 'CURRENT_PID_FROM_LOCKFILE' variable
Save full path of command cat to variable CAT
Save full path of command mktemp to variable MKTEMP
Save full path of command rm to variable RM
Save full path of command tr to variable TR
Save hexadecimal byte 10 in binary file file.moi to variable day
Save hexadecimal byte 9 in binary file file.moi to variable month
Save hexadecimal bytes 7 and 8 in binary file file.moi to variable year
Save host name in variable thisHOSTNAME
Save in QUEUE_PIDS variable only pid numbers that stored in $NEW_PIDS variable
Save list of groups which user $line belongs to and not matching pattern _unknown|sciences|everyone|netaccounts in 'results' variable
Save long listing of all files listed in file 'filenames.txt' to 'listing' variable
Save long listing of all running processes in the 'log' file, and save number of process strings that contain 'cntps' in the 'cnt' variable.
Save number of lines in '/some/big/file' to 'LINES' variable
Save number of lines in 'file.txt' file in 'nbLines' variable
Save number of lines with any-cased 'merge' from $COMMIT_EDITMSG file in 'MERGE' variable
Save number of processors in system to 'NP' variable
Save number of strings with $expression pattern in 'foo.txt' to 'big_lines' variable.
Save only the digits in $filename to variable number
Save small letter short day name of the week to variable 'DayOfWeek'
Save standard input to variable myVar
Save standard input to variable 'stdin' until the first character encoded as '\004' is read
Save system information appended with the current date in 'filename' variable
Save the Pictures directory in the current user's home directory on the directory stack
Save the 10 ping results to $gateway in variable pingResults
Save the FQDN host name of the system in variable fhost
Save the FQDN host name of the system in variable hnd
Save the UTC date represented by time string $sting2 as the seconds since epoch to variable 'FinalDate'
Save the absolute path of $path to variable full_path
Save the absolute path of $path to variable fullpath
Save the absolute path of the current script to variable SELF
Save the absolute path of the current script to variable SELF
Save the absolute path of the current script to variable SELF
Save the absolute path of the current script to variable SELF
Save the absolute path of the directory of the current script to variable DIR
Save the canonical filename of $BASH_SOURCE in variable me
Save the canonical filename of the script in variable me
Save the canonical path of $dir/$file in variable path
Save the canonical path of /usr/bin/java with /bin/java removed to variable JAVA_HOME
Save the contents of file in the clipboard
Save the contents of file in the clipboard
Save the contents of numbers.txt to variable f
Save the contents of ~/.bashrc to the clipboard on OSX
Save the current date to 'DATE' variable
Save the current date, system host name, and $changes with newlines removed to variable subj
Save the current time formatted according to the format string %Y-%m-%d %H:%M:%S to the variable 'CDATE'
Save the current user name and inode number of /home into bash array variable var
Save the current user name in variable myvariable
Save the current working directory and the directory name of the current script to variable DIR
Save the current working directory to variable CURRENT
Save the current working directory with resolved symbolic links to variable real1
Save the date 222 days before today to the variable 'date_222days_before_TodayDay'
Save the day of the year from the time string 20131220 to variable 'DATECOMING'
Save the directory name of the canonical path to the current script in variable MY_DIR
Save the directory name of the current bash script to variable path if it is found in one of the directories specified by PATH.
Save the directory of the full path to the current script in variable dir
Save the directory of the full path to the current script in variable dir
Save the filename and hash of the md5 sum of file to bash array md5
Save the first . separated field of the system host name to variable HOSTZ
Save the first 3 lines output by 'yes' to 'file', and log the rest through 'more' which simply waits for user interaction at each page.
Save the first line of $j into variable k in ksh
Save the first line of foo.txt to variable bar
Save the first three octets of the current host's IP address to variable local
Save the first three octets of the host name's IP address to variable subnet
Save the first two letters of the system host name to variable DC
Save the first word of the first difference in .dir_list_2 compared to .dir_list_1 into variable extract_dir
Save the full path of command f to variable full_f
Save the full path of command oracle to variable path
Save the full path of command ~/f to variable foo
Save the full path of the current script into variable THIS
Save the greater version number of $1 and $2 into variable ver
Save the last modified time of file 'file_name' to variable 'STAMP'
Save the latest modification time (in format %T@ %t of any file under ./$dir to variable timestamp
Save the line number matching }] in lines starting with item_1 to item_2 in itemlist.json to variable line_to_be_replaced
Save the logical current working directory to variable basedir
Save the md5 sum hash of $my_iso_file to variable md5
Save the md5 sum hash of ${my_iso_file} to variable md5
Save the md5 sum of $twofish to variable 'twofish'
Save the network node hostname append with '-', the current date and '.txt' into variable 'filename'
Save the number of bytes in $file after decompression into variable size
Save the number of matching executables for $cmd in $PATH to variable candidates
Save the number of modified files in a git repository in variable MYVAR
Save the number of records in the system hostname that contain numbers in variable server_id
Save the numerically greater value of $kf and $mp into variable gv
Save the percentage of packets lost of the 5 packets sent to $host in variable packet_loss
Save the physical current working directory to variable END_ABS
Save the short DNS lookup output of $WORKSTATION to 'WORKSTATION_IP' variable
Save the short host name appended with .mysqldb in variable DBPREFIX
Save the short system host name to variable hostname
Save the system host name in variable HOSTNAME
Save the system host name in variable HOSTNAME
Save the system host name into variable HOST
Save the system host name to variable myHostName
Save the system load average for the past 1 minute of the currently logged in user to variable 'proc_load_average'
Save the user name in all capitals of the current user to variable v
Save the user name in all capitals of the current user to variable v
Save the user name in upper case of the current user in variable v
Save the user name in upper case of the current user in variable v
Save the user name of the current user to variable me
Save the user name of the current user to variable me
Save the user name of the current user to variable whoami
Save the user name of the current user to variable x
Save yesterday's date into variable dt using perl
Saves 'ls' output to 'ls_results' file and time report to 'time_results' file.
Saves 'ls' output together with time report to a file 'time.txt'.
Saves 'tmux' version in the 'tmux_version' variable.
Saves byte size of $myvar variable value in the 'var2' variable.
Saves byte size of all content of $1 folder in 'uiTotalSize' variable.
Saves bytes count of the value of '$each' variable.
Saves calendar of $month, $year in the 'cal' variable.
Saves command execution output to a file 'outfile' together with time report.
Saves date of the first Sunday in month $mo of year $yo in the 'do' variable.
Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=0 [1]=0 [2]=1 [3]=0 [4]=1)'
Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=0 [1]=1 [2]=0)'
Saves exit statuses of piped commands in a system variable PIPESTATUS='([0]=1 [1]=2)
Saves file sctipt.sh size in 'size' variable.
Saves folder path where target of symbolic link $file file is located in 'base' variable.
Saves hostname that matches ${ip_address} in 'host' variable, without trailing dot.
Saves in 'result' variable list of groups which user $line belongs to, and not matching pattern _unknown|sciences|everyone|netaccounts
Saves index number of file 'script.sh' in the 'inode' variable.
Saves invoked command 'check_script_call=$(history |tail -1|grep myscript.sh )' in variable 'check_script_call', preceeding by its number in history.
Saves list of currently logged in users in 'userlist' variable.
Saves list of logged in users in system together with 'USER' header in the 'a' variable.
Saves list of logged in users in system together with 'USER' header in the 'b' variable.
Saves listing of a current folder in 'OUTPUT' variable.
Saves listing of a current folder in 'var' variable.
Saves location of file $1 in 'dir' variable.
Saves location of file $1 in 'dir_context' variable.
Saves logged in users names in 'tmp' variable.
Saves number of lines of current directory listing in 'n_max' variable.
Saves path to the $SCRIPT file in the SCRIPTPATH variable.
Saves printed calendar for $month, $year in positional variables.
Saves printed calendar of February,1900 in positional variables.
Saves real path of the folder containing the current script
Saves space separated content of $RAW_LOG_DIR in FILES variable
Saves state of shell option 'nullglob' in an 'old_nullglob' variable.
Saves value '1' in the $PIPESTATUS variable and returns 0.
Search file1 for lines matching regex patterns listed in file2 and list the unique results (sorted alphabetically)
Search file1 for lines matching regex patterns listed in file2 and list the unique results (sorted alphabetically)
Search input.txt for regex patterns only matching those listed in ignore.txt, list the unique lines and prefix with the number of occurrences
Search inputfile for lines starting with t: and group the results in files with at most 200 lines each
Search mygzfile.gz for string to be searched
Search whatyousearchfor in history and print 3 lines before and 4 lines after
Search $MYGROUP in /etc/group, take the 4th colon separated field, replace comma with newline and save the result to variable 'MYUSERS'
Search PATH for utilities called rename, display the type of file for each match found.
Search PATH for utilities called rename, display the type of file for each match found.
Search all variables and their values for NAME
Search appended data in logfile.log for something with a timeout of 3 seconds
Search appended data in logfile.log for something with a timeout of 3 seconds
Search case insensitively for 'facebook', 'xing', 'linkedin', ''googleplus' in file 'access-log.txt', extract the matched part, sort them and print them by sorting them in asending order of the number of repeated lines
Search current directory for any directory named config and go to first match found.
Search decompressed filename.gz for case-insensitive user-user
Search for  000 in the hex dump of file-with-nulls
Search for  840 in history
Search for CONFIG_64BIT in gzip compressed file /proc/config.gz
Search for YOURSTRING in all files under current directory
Search for facebook\|xing\|linkedin\|googleplus in access-log.txt and print a count of the unique entries
Search for foo in every file in the current directory and number the output
Search for ifconfig in the output of history and print 5 lines that precede and follow
Search for ifconfig in the output of history and print 5 lines that precede and follow
Search for largecalculation in all processes owned by the current user
Search for mpirun in all processes owned by the current user
Search for pattern in file and join each line by a space
Search for pattern in file and separate each line with ' '
Search for vid=123 in all compressed files found under /my_home matching *log.20140226*
Search for $GROUP at the beginning of each line in /etc/group and print the last colon separated entry with comma replaced with newlines
Search for 'Processed Files' in all dl-aster-full-20131102* files under current directory and print only the 2nd field from the output with : as the delimiter
Search for 'pattern' in file 'file' and print the matched lines by separating them with spaces instead of newlines
Search for ERROR in all btree*.c files under current directory
Search for Subscription.java under current directory, and go to directory containing it.
Search for case-insensitive string in log.tar.gz
Search for environmental variables with HIST in their name or contents
Search for filenames matching android in the current directory and number the output
Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive of all the files found
Search for line 111 in file active_record.rb with 2 lines of context
Search for line number 111 in file active_record.rb
Search for lines that have zero or more whitespace characters before http:// and number the uniquely sorted output
Search for the regex +\S\+ in file 'in.txt' and print the matches by replacing newlines with comma (',')
Search for the regex '^aaa$' in all *.txt files under current directory and count the number of matches
Search for the regex ... in the manual of the find command
Search for the string 'foo' in *.html files under /usr/src/linux directory
Search for the system host name in /etc/hosts and print the IP address in the first awk field
Search for utility foo in PATH, display its file type description.
Search for xception in all *auth*application* files under current directory and count the number of matches
Search history for part_of_the_command_i_still_remember_here
Search in the current directory and all sub-directories except ./D and any further sub-directories also named D for the file named hi.dat
Search in the current directory and all sub-directories except ./D for the file hi.dat using the extending file-globbing features of the shell.
Search the first 300 commands in history containing scp and ending in important
Searche JSP's for TODO lines and append them all to a file with a header showing what file they came from
Searches available packages by word 'zsh'.
Searches available packages with 'mysql' and 'client' in name.
Searches for 'something' in a large file and prints the matching line
Searches manual pages which descriptions contain 'postscript', and prints name and description of only ones that contain any-cased 'png' pattern.
Searches the manual page names and descriptions
Searches the manual page names and descriptions by 'disk' keyword.
Searches the manual pages with descriptions in section 3, that name begins with lowercase letter.
See all pages in section 3.
Selects a job from list and get it back to the foreground (iselect package is required).
Selects a job from zenity dialog list and gets it back to the foreground.
Send yes 4 times followed by 1 no to ./script
Send 4 ping packets of size 2 to www.google.com on a Solaris machine
Send 4 ping requests to host google.comz, displaying only the summary info after the last request completed.
Send 5 ping requests to address 12.34.56.78 and print only the last 2 lines of the summary output.
Send 5 pings to broadcast address 10.10.0.255 and print the unique IPs who responded
Send 5 pings to broadcast address 10.10.0.255 and print the unique IPs who responded
Send SIGHUP signal to all parents of zombie processes.
Send SIGHUP signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary.
Send SIGHUP signal to all SSH server processes, causing them to re-read the SSH server configuration.
Send SIGKILL signal to all processes whose command matches csp_build
Send SIGKILL signal to all processes using TCP port 8080, terminating them instantly.
Send SIGKILL signal to process ID 16085, killing it instantly.
Send SIGKILL signal to processes ID 18581, 18582, and 18583, killing them instantly.
Send SIGKILL to all processes owned by user 'daniel', terminating them instantly.
Send SIGTERM signal to all process whose username is username and whose command is your_command.
Send SIGTERM to all processes using TCP port 6000 on the system using root account.
Send SIGTERM to all processes using TCP port 6000 on the system.
Send SIGTERM signal to all 'firefox' processes, requesting them to terminate.
Send SIGTERM signal to all processes using TCP port 8080, requesting them to terminate.
Send SIGTERM signal to all python processes running script csp_build.py
Send SIGTERM signal to any process which 'ps' lists as python csp_build.py
Send SIGTERM signal to any process which 'ps' lists as python csp_build.py
Send SIGTERM signal to any process which 'ps' lists as python csp_build.py
Send SIGTERM signal to entire process tree starting from ID 24901 and below.
Send SIGTERM signal to entire session of processes containing process whose ID is 21709.
Send SIGTERM signal to entire session of processes containing processes whose command match rsync.
Send SIGTERM signal to first process sent to background by the current shell.
Send SIGTERM signal to last process sent to background by the current shell.
Send SIGTERM signal to the first process whose command matches csp_build
Send SIGWINCH process to current shell, causing it to update the LINES and COLUMNS variables which describe the size of the screen/window in characters.
Send TERM signal to process with id listed in '/var/run/DataBaseSynchronizerClient.pid' file
Send a lot of packets to remote.machine on port CLOSED_PORT at 0.1 second intervals
Send a single ping request with a TTL of 1 to 192.168.1.1
Send an audible ping to 10.100.3.104
Send at most 3 ping requests to 8.8.8.8 with a timeout of 3 seconds on interface eth9
Send command to named screen session with special characters
Send content to screen session windows with a certain title
Send contents of input.txt.gz to command on stdin
Send each byte in /home/cscape/Desktop/file to awk script x.awk
Send each byte in /home/cscape/Desktop/table.sql to awk
Send email in mail.tmp from noreply@hostname with subject Config done!
Send email with subject Backup and attachment mysqldbbackup.sql and message in message.txt to backup@email.com
Send every 130 characters of file as input to ...
Send one ping request to host whose name or IP address is specified by variable ip, using network interface eth9.
Send one ping request to host whose name or IP address is specified by variable remote_machine.
Send one ping request to host with local address in the 10.0.0.x range, with last number specified by variable i, waiting 1 second for a reply, and output only lines containing from to standard output.
Send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable COUNTER, and output only lines containing ms to standard output.
Send one ping request to local machine.
Send ping requests to yourhostname.local
Send ping requests to hostname specified by variable c for 1 second.
Send reverse requests to get domain name for each address in 'my_ips' list
Send text spawn daemon and a newline character to the screen session
Send the SIGTERM signal to all processes whose command matches bad_process and which have used more than 100 seconds of total CPU time.
Send the contents of file as input to clipboard
Send two ping requests to www.google.com
Send uncompressed contents of input.gz to ./myscript.pl
Send uncompressed contents of large_file.gz to largesplitter
Sends current job to the background.
Sends current job to the background.
Serves minimal HTTP response with netcat
Set 644 permission to all regular files under /home/my/special/folder directory
Set 644 permission to all regular files under current directory
Set 644 permission to all regular files under current directory
Set IFS variable to empty before reading a line of standard input without backslash escape characters
Set LANG variable to 'en_US' and prints calendar for a current month.
Set a screen session title when invoked
Set a title of a remote screen session
Set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment
Set permission of file to read only for the owner
Set permission of all files in img, js, and html to 644
Set permissions of all directories under /path/to/base/dir to 755
Set permissions of command node to 755
Set prompt to the system host name and history number
Set read, write and execute permission for all for the files/directories in foldername directory tree
Set shell option 'checkwinsize'.
Set shell option 'dotglob'.
Set shell option 'histverify'.
Set status code to a non-zero value if process with PID 4129 is running in a different namespace than init
Set the 'pipefail' shell variable causing bash to return true only if all commands in a pipeline return true.
Set the 'verbose' shell option causing bash to print shell input lines as they are read
Set the 'verbose' shell option causing bash to print shell input lines as they are read
Set the 'xtrace' shell option
Set the 'xtrace' shell option
Set the 'xtrace' shell variable
Set the bash environmental variable PROMPT_COMMAND to save the output of the last executed command to variable LAST and file '/tmp/x
Set the bash prompt to username@hostname
Set the environment variable DISPLAY to the system host name followed by :0 skype
Set the environment variable DISPLAY to the system host name followed by :0 skype
Set the exit codeto '0'.
Set the history time format variable HISTTIMEFORMAT to %s  and display up to event 2
Set the host name to myServersHostname
Set the host name to the contents of /etc/hostname
Set the modification timestamp of file 'filename' to specified date/time.
Set the prompt to title: (hostname)
Set the setup connection timeout to 10 seconds for connecting to <hostName> via ssh
Set the setup connection timeout to 3 seconds for connecting to user@ip via ssh
Set the shell option 'errexit'  causing bash to exit immediately if one of the commands in a multi-command statement fails.
Set the shell prompt to host:pwd>
Set the system date to Sat May 11 06:00:00 IDT 2013
Set the timestamp of B to the same one as A
Set the value of to_sort to $1 in a subshell which no longer exists after the pipeline completes
Set the variable me to the name of the running script, or shell, login shells have a hyphen appended to the beginning of the name, such as -bash.
Set the variable me to the name of the running script.
Set timestamp of B to the timestamp in stat format specified by variable old_time
Set timestamp of all PHP files in current directory to date specified.
Set timestamp of old_file.dat to specified timestamp.
Set trace prompt to print seconds, nnoseconds, script name, and line number
Set trace prompt to print seconds.nanoseconds
Set up SSH connection forwarding in the background with no terminal or command execution from localhost port 8888 to proxyhost port 8888 and a reverse connection from officefirewall port 22222 to localhost port 22
Set up a local SSH tunnel from port 80 to port 3000
Set up a local SSH tunnel from port 80 to port 3000
Set up a remote port forward from port 10022 on host server to port 22 on localhost
Set up local port forwards in the background with no terminal or command execution from port 4431 to host www1 port 443 and port 4432 to host www2 port 443 via the host colocatedserver
Set variable MAVEN_DEBUG_OPTS to -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 on Windows machines
Set variable architecture to machine architecture, ie. x86_64
Set variable b to the first word of a converted to lowercase.
Set variable b to the first word of a converted to uppercase.
Set variable extract_dir to list of top-level directories and files contained in tar archive specified by variable FILE.
Set variable filename to only the name of document specified by URL, in this case pic.jpg
Set variable finalName to the second-to-last slash-separated path component of variable path
Set variable fname to the basename of path specified in variable f, that is remove everything up to the last slash if present.
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'path' to name of current directory converted to lowercase.
Set variable 'path' to name of current directory converted to lowercase.
Set variable 'path' to name of current directory (without the containing directories).
Set variable 'rav' to the contents of 'var' spelled backwards.
Set variable 'vara' to 3
Set variable BZIP2_CMD to the full path of command bzip2
Set variable GZIP to the full path of command gzip
Set variable MYPROGRAMNAME_KERNEL_VERSION to current kernel release name, making this variable visible by subprocesses of current shell.
Set variable OS to the name of the operating system, ie. Linux
Set variable OS to the name of the operating system, ie. Linux
Set variable PING to 1 if it's possible to ping host ADDRESS, to 0 otherwise.
Set variable PacketLoss to first digit of percentage of packet loss occurring when pinging host specified by TestIP
Set variable value to current kernel release name, making this variable visible by subprocesses of current shell.
Set variable value to current kernel release name.
Sets 'extglob' shell option.
Sets 'extglob' shell variable.
Sets 'globstar' shell option.
Sets prompt to username@host:pwd
Sets shell option 'dotglob'.
Sets shell option 'extglob'.
Sets shell option 'globstar'.
Sets shell option 'nounset'.
Sets shell option 'nullglob'.
Sets shell options 'extglob' and 'nullglob'.
Sets shell options 'globstar' and 'nullglob'.
Sets shell options 'globstar', 'dotglob' and 'nullglob'.
Sets the shell prompt to [USER@HOST] where USER is the current user and HOST is the short host name
Setup a local SSH tunnel from port 1234 to remote2 port 22 via connection to remote1 as user1 on port 45678
Shifts all positional arguments but last one, keeping it in $1 variable.
Shifts all positional arguments but last one, keeping it in $1 variable.
Shifts the positional parameters to the left by 1.
Shifts the positional parameters to the left by n.
Show IPC information owned by the current user
Show a long listing of the latest file or directory under current directory
Show all lines as they are executed and stop at the first command returning nonzero
Show all lines in file2 that don't contain the first field of any line in file1.
Show all previously typed shell commands, waiting for user interaction after each page of output.
Show all processes that have a tty in format %p %r %y %x %c 
Show all running processes with a name matching postgres
Show all running processes with name matching postgres
Show all values of variables whose name or value contains VARIABLE_NAME
Show all values of variables whose name or value contains VARIABLE_NAME
Show all variables whose name or value contains PATH, sorted in reverse alphabetical order.
Show current date in %Y-%m-%d format
Show directory sizes in KB and sort to give the largest at the end
Show filename and filetype description of all PHP files in all directories contained in current directory whose name or filetype description includes UTF
Show filename and filetype description of all PHP files in current directory whose name or filetype description includes UTF
Show files in maximum 1 level down the current directory that were modified less than 1 day ago from today
Show global windows options.
Show human-readable file type description of file /mnt/c/BOOT.INI
Show logged in users with idle time of each one
Show long listing of current directory by deleting all digits from the output
Show manual for the find command
Show manual of the find command
Show manual of the find utility
Show manual page for the find utility
Show manual page of find
Show manual page of find utility
Show process tree with command-line arguments of a process that has id 20238.
Show system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type.
Show the current UTC date in '%Y-%m-%dT%k:%M:%S%z' format
Show the date in default format for tomorrow + 2 days + 10 minutes
Show the epoch in default date/time format
Show the value of variable list, discarding consecutive duplicates and adding number of occurrences at the beginning of each line.
Show total memory used by processes in MB
Show who is logged on
Shows MAC address of network interface eth0.
Shows only IP4, not IP6 address of network interface eth0.
Shows only process trees rooted at processes of this user.
Shows size of compressed file in .bz2 archive.
Shows state of 'extglob' shell option.
Shows state of 'globstar' shell option.
Shows state of shell option 'extglob'.
Shows status of a shell option 'compat31'.
Shows status of a shell option 'dotglob'.
Shows status of a shell option 'nullglob'.
Shows strings that NOT match regex '^($|\s*#|\s*[[:alnum:]_]+=)'
Shuffles strings of text received by 'awk' command on the input.
Silently and recursively change the ownership of all files in the current directory to www-data
Silently download contents from https://raw.github.com/Homebrew/homebrew/go/install and show an error if failed, execute with ruby after the download is completed
Silently read $char number of symbols from file descriptor 4, without backslash escaping, and store received input in 'line' variable
Silently read a line from standard input into variable REPLY without backslash escapes and using the prompt $'Press enter to continue...\n'
Silently read a line into variable passwd with prompt Enter your password: 
Silently read a single character from standard input into variable REPLY without backslash escapes, with a timeout of 5 seconds, and using the prompt $'Press any key or wait 5 seconds to continue...\n'
Silently read a single character from standard input into variable key without backslash escapes and using the prompt $'Press any key to continue...\n'
Silently read a single character into variable REPLY
Silently read exactly 1 character ignoring any delimiters  into variable SELECT
Silently read standard input until the escape key is pressed ignoring backslash escapes and using the prompt $'Press escape to continue...\n'
Simulate a full login
Sleep until tomorrow at 21:30
Sort $file and output the result to $file
Sort , delimited lines in file by the first field preserving only unique lines
Sort : delimited lines in test.txt by the first and third field preserving only unique lines
Sort file using a buffer with a size 50% of main memory
Sort file1.txt and output the result to file1.txt
Sort some_data by the first and second ; delimited entries and stabilizing the sort
Sort some_data by the first and second ; delimited entries, outputing unique lines and stabilizing the sort
Sort a file 'file' preserving only unique lines and change the file in-place
Sort all directory names matching folder_* and go to the last one.
Sort and compare files $def.out and $def-new.out
Sort and print each unique line in myfile.txt
Sort and remove duplicate lines in the output of finger
Sort and show top 10 processes by memory usage
Sort content of files 'file1' and 'file2' by second of dot-separated fields.
Sort file a.csv by the first comma separated value of each line and print only unique entries
Sort file file by line
Sort file foo.txt by line to standard output
Sort file pointed by variable $filename, removing duplicate entries but ignoring the last N characters of each line.
Sort file.txt ignoring the last 10 characters of each line.
Sort file1 and file2 then display differences between them.
Sort lines in FILE to standard output preserving only unique lines
Sort lines in set1 and set2 to standard output preserving only unique lines
Sort numerically and compare files ruby.test and sort.test
Sort standard input in alphabetical order
Sort strings in a file temp.txt.
Sort strings of 'test.txt' file by second from the end field
Sort tab separated file file using a version sort for field 6 and a numeric sort for field 7
Sort the contents of file ips.txt, eliminate duplicate entries, and prefix each entry with number of occurrences.
Sort the lines of the file 'inputfile', keep only the uniq lines and change it in-place
Sort the lines of the file 'temp.txt' and change it in-place
Sort the lines of the file 'temp.txt' and change it in-place
Sorts content of the $tmp file and filters out all strings with ':0'.
Source lib/B relative to the directory of the executing shell script, will fail if currently running script is not in PATH.
Source executable virtualenvwrapper.sh found in $PATH
Sources a script ./etc/grc.bashrc that is located in a Homebrew folder.
Sources script incl.sh in the folder where current running script is located
Sources script incl.sh in the folder where current script is located.
Spawn a background screen session running myCommand
Split $1 into files of at most $2 or default 10000 using a numeric suffix of length 6
Split $1 into files of at most $2 or default 10000 using a numeric suffix of length 6 and suffix ${tdir}/x
Split $FILENAME into files with at most 20 lines each with a prefix xyz
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix x_
Split $ORIGINAL_FILE into files of at most $MAX_LINES_PER_CHUNK lines each with a prefix $CHUNK_FILE_PREFIX
Split $SOURCE_FILE into files of at most 100 lines each
Split $file into files with at most 1000 lines each and use a prefix length of 5
Split $in_file excluding the first line into files of at most 100000 lines each with numeric suffixes of length 5 and the prefix $in_file_
Split ${fspec} into 6 files with about equal number of lines each and use prefix xyzzy.
Split /etc/gconf/schemas/gnome-terminal.schemas into 1000000 files of about equal size
Split /path/to/large/file into files with at most 50000 lines and use prefix /path/to/output/file/prefix
Split /tmp/files into files of at most 1000 lines each
Split /usr/bin/cat into 10000 files of about equal size
Split /usr/bin/firefox into 1000 files of about equal size
Split /usr/bin/gcc into 100000 files of about equal size
Split 2011.psv into chunks of at most 50000000 lines each as input to ./filter.sh
Split <file_name> into files of at most 1024 KiB in size
Split <file_name> into files of at most 1024 MiB in size
Split ADDRESSS_FILE into files containing at most 20 lines and prefix temp_file_
Split INPUT_FILE_NAME into files of at most 500 MiB each with a numeric suffix of length 4 and prefix input.part.
Split abc.txt into files with at most 1500000000 bytes each and use prefix abc
Split bigfile into files of at most 1000 lines each with prefix /lots/of/little/files/here
Split biglogfile.gz into chunks of 500000 line gzipped compressed files
Split complete.out into files with at most $lines_per_file lines each
Split data.csv into files with at most 100 lines each and using a prefix data_ and numeric suffixes starting with 1 and ending with .csv
Split data.tsv into files of at most 100 MiB preserving lines and use a prefix of data.tsv. and numeric suffixes
Split data.tsv into files of at most 5000000 lines each with prefix _tmp
Split database.sql into files of at most 100000 lines each with prefix database-
Split date.csv into files with at most 100 lines each
Split domains.xml into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of domains_
Split file into 10 files of about equal size without splitting lines
Split file.tar.gz into files of size 1024 MB
Split file.tar.gz into files of size 1024 MB with a prefix of file.tar.gz.part-
Split file.txt excluding the first line into files of at most 4 lines each and with a prefix split_
Split file.txt excluding the first line into files with at most 20 lines each and a prefix split_
Split file.txt into files of at most 1 MiB in size with a numeric suffix and prefix file
Split file.txt into files of at most 1 MiB in size with a numeric suffix, prefix file, and additional suffix .txt
Split file.txt into files of at most 20 lines each with a prefix new
Split filename into files of at most 200000 lines each
Split foo.txt into files with 1 line each and use a suffix length of 5
Split hugefile.txt into files with 100000 lines each starting with part. and using numeric suffixes
Split infile into 2 files of about equal size
Split input.txt into files of at most 10 bytes each with prefix /tmp/split-file
Split input.txt into files of at most 10 bytes each with prefix xxx/split-file
Split input.txt into files with 1 line each and use a prefix output. and a suffix length of 5
Split input_file into files of at most 100 lines each with prefix output_file
Split list.txt into files with at most 600 lines each
Split mybigfile.txt into files of at most 200000 lines each
Split randn20M.csv into files of at most 5000000 lines each with prefix _tmp
Split system.log into files of at most 10 MiB in size with a numeric suffix and prefix system_split.log
Split t.txt into files with at most 30000000 lines each and use a prefix t and numeric suffixes of length 2
Split your_file into files with at most 9 lines each
Split a file file.tar.gz into pieces named as file.tar.gz.part-NNN with size 1024 MB where NNN is a numeric suffix
Split a file file.tar.gz into pieces with size 1024 MB
Split a file ADDRESSS_FILE into pieces per 20 lines named with prefix temp_file_ and numeric suffixes
Split file 'afile' into parts as of two lines per each and compress each part with 'bzip2'
Split standard input into files of at most 1000 lines each
Split standard input into files of at most 3400000 lines each
Split standard input into files with at most 75 lines each
Split the contents of file1 file2 ... file40000 into 1445 files in a round robin fashion with prefix outputprefix and numeric suffixes
Split the contents of all .txt excluding the first 1000 lines into files of at most 1000 lines each
Split the first 100 lines of datafile into files with at most 1700 bytes each preserving lines
Split the output of ls into files of at most 500 lines each with prefix outputXYZ.
Split the output of my_program into files of at most 100000 bytes each and use numeric suffixes
Split the output of tar [your params] into files of at most 500 MiB in size and use prefix output_prefix
Split the sorted and unique lines in files emails_*.txt into files with at most 200 lines each with numeric suffixes of length 4
Start xeyes in the background on the remote server and exit the SSH session
Start 'top' to monitor all processes with the default settings.
Start MATLAB without the desktop
Start a VLC process with a dummy interface in the background, immune to SIGHUP signals, to play all media files in mp3_directory from the user's home directory.
Start bash in a completely empty environment, without parsing /etc/bashrc or ~/.bashrc
Start program 'scriptname' with an empty environment.
Starts 'chromium', storing user data in a newly created temporary folder.
Starts new detached tmux session 'vims' with new windows 'vim0' and opens file 'foo' within.
Starts new detached tmux session and runs command $CMD within.
Starts new detached tmux session and runs command $CMD within.
Starts new tmux session, assuming the terminal supports 256 colours.
Starts new window named 'win0' in detached tmux session 'vims', opens file 'foo' within.
Starts tmux session 'name', forcing tmux to assume the terminal supports 256 colours, and executes defined script within.
Store N symbols of input into variable 'buffer'
Store content of uncompressed file $file.fastq in variable reads
Store info about all mounted file systems, printing all sizes in powers of 1000
Stores date of last month day in the 'lastdaymonth' variable.
Stores system load average number in the 'proc_load_average' variable.
Stores system load average number in the 'proc_load_average' variable.
Strip all '\' and newlines from $output and save the result to variable 'output'
Strips last section from the path $pathname, and prints basename of the rest part.
Strips two last sections from the path $pathname, and prints basename of the rest part.
Subtract all columns in File2 from File1 except the first
Subtract each column in File2 from matching column in File1, output the result in a similarly formatted table
Suffix all files and folders in the current directory with _SUF
Sum the total content size of the extracted files in archive.tar.gz
Swap new and old files or directories
Symlinks all of formula’s installed files into the Homebrew prefix.
Symlinks all of package`s installed files into the Homebrew prefix with overwrite.
Synchronize /home/user1/ to wobgalaxy02:/home/user1/ including hidden files
Synchronize /path/to/dir_a with files in /path/to/dir_b/ if the files are newer
Synchronize /path/to/dir_b with files in /path/to/dir_a/ if the files are newer
Synchronize dir_a and dir_b to contain the latest files in both directories
Synchronize dir_a and dir_b to contain the latest files in both directories
Synchronize xxx-files to different-stuff/xxx-files recursively preserving metadata with a bandwidth limit of 2000 KiB/s
Synchronize via ssh user@source-server:/somedirA/ to somedirB/ with compressed data during transmission and display progress
Take a file path from standard input and remove it.
Take a file path from standard input and remove it.
Take first text field from file 'file.txt' as a domain name and get short A record for this one.
Take the last slash-separated section of variable FILE and copy it to variable NAME.
Take the section of variable FILE between the last slash and the following dot, if any, and store that section in variable NAME.
Takes first text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.
Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.
Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable.
Takes folder path from string '/path/to/copy/file/to/is/very/deep/there' and created it with all parents.
Takes path list from '.exportfiles.text' file, cuts off first two path segments and last one.
Terminate amarok immediately.
Terminates shell before 'echo foo' if 'set -e' was applied and shell behavior matches the POSIX standart.
Test if file.tar.gz is corrupt
Test if files named 'something' were found in Dir/
Test if files named 'something' were found in YOUR_DIR
Test if the tar file in file.tar.gz is corrupt
The file files_to_find.txt contains a list of filenames, create each file or update its timestamp if it exists.
Time stamp every ping request to 8.8.8.8 in Unix epoch format
Tmux configuration to enable mouse support within tmux
Treat each line of list-of-entries.txt as a value to be put in one cell of the table that column outputs
Treat references to unset variables as errors
Trim leading and trailing whitespace from variable 'var'.
Truncates file $file, removing last line from it and prints this file on stdout.
Truncates file $file, removing last line from it.
Try to determine the type of contents in myfile located in user's home directory.
Tunnel VNC port 5900 over compressed SSH and X11 forwarded session to remotehost
Turns on network interface eth0.
Uncomment every entry in current user's cron job list which contains test.sh
Uncompress archive.tar.gz and extract the archive to /destination
Uncompress all files listed in list.txt and send to ./a.out
Uncompress and unarchive data.tar.gz
Uncompress file dbdump.sql.gz through standard input and pass to mysql
Ungzip and untar all files matching www-backup.tar.*
Uninstalls and then installs git formula.
Unset all environment variables.
Unset IFS and read a single character from standard input  with timeout of 0.01 seconds and save the response in variable keypress
Unset IFS and read a single character of standard input with no echo and save the response in variable SELECT
Unset IFS and read standard input into variable file until a null character is found without allowing backslashes to escape characters
Unset RBENV_VERSION variable from within tmux session.
Unset RBENV_VERSION variable in global environment.
Unset RBENV_VERSION variable in tmux session 'sessname' environment.
Unset the DISPLAY variable
Unsets 'history' shell option.
Unsets DUALCASE variable.
Unsets GIT_DIR variable.
Unsets GNUPLOT_DRIVER_DIR variable.
Unsets all environment variables with 'G4' in name.
Unsets all environment variables with 'G4' in name.
Unsets all environment variables.
Unsets all environment variables.
Unsets all locale variables.
Unsets array member with index 2.
Unsets environment variable 'z'.
Unsets environment variable represented as var=value by $a.
Unsets random one from first five array members.
Unsets random one from first four array members.
Unsets random one from first four array members.
Unsets shell function 'z'.
Unsets shell functions 'ls' and '/bin/ls'.
Unsets shell option 'extglob'.
Unsets shell variable 'latest'.
Unsets shell variable 'penultimate'
Unzip $ip as input to pax -r
Unzip archive.tgz and extract all archives excluding ones matching apri/fls/filename
Unzip bigfile.txt.gz to standard output, search for patterns in patterns.txt, and list the unique matches
Unzip daily_backup.sql.gz and search for lines matching 'x'|/x/
Unzip doc.gz and gzip every 1000 lines
Unzip file.gz and print each line with the 2nd | separated field greater than 5
Unzip file.gz and print each line with the 5th  or | separated field greater than 5
Unzip file.gz to standard output and execute in bash with arguments -n wordpress
Unzip file.gz to standard output and execute in bash with arguments arguments
Unzip file.gz to stdout
Unzip file.gz, list the unique first comma separated field prefixed by the number of occurrences, sort from least frequent to most frequent
Unzip file.gz, list the unique lines matching regex pattern 'searchstring:[^]*' prefixed by the number of occurrences, sort from least frequent to most frequent
Unzip large.csv.gz and save every 1000 lines into a file with prefix xxx
Unzip myDB.sql.gz to standard output as input to pg_restore ...
Unzip path/to/test/file.gz to standard output and save all lines matching my regex to files with a 1000000 limit
Unzip some.file.gz to standard output
Unzip all files matching /homes/ndeklein/mzml/*.gz
Unzip all files matching test1/*/*.gz
Unzip and expand tar archive compressFileName
Unzip and extract *\[^ =][^ =]*=.* from input.gz
Unzip and extract *\[^ =]\+=.* from input.gz
Unzip and extract userAgent=[^=]*' from input.gz
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and untar 4.56_release.tar.gz to standard output
Unzip and untar file.tar.gz
Unzip and untar myarchive.tar.gz and check for corruption
Unzip and untar openssl-fips-2.0.1.tar.gz
Unzip and untar tarball.tar.gz
Unzip and write backup.img.gz to /dev/sdb
Unzip every .gz file in the current directory
Unzip file $empty_variable
Unzip files file1.gz and file2.gz as arguments to command -1 -2
Update 'openssl' package to '2013.09' version.
Update the history file in the current session
Update the timestamp of '/tmp/$$' to the current month and day
Update the timestamp of 'filename', or create an empty file if it doesn't exist.
Updates 'openssl' package, skipping packages with broken dependencies.
Updates 'openssl' packages without using of 'epel' repository.
Updates all installed software.
Updates all packages in system  answering 'yes' on all questions.
Updates all packages with 'rpmfusion' in name.
Updates all packages with 'rpmfusion' in name.
Updates all software in a system, skipping packages that have a failed dependencies.
Updates all software in system, prints update log on terminal and saves to 'mylogfile'.
Updates openssl package.
Upgrades 'php-mbstring' package, enabling 'remi' repository.
Use $BYTES amount of RAM for $SECONDS seconds with no output
Use $BYTES amount of RAM showing the current and total rate of consumption
Use $BYTES amount of RAM with no output
Use /var/log/wtmp and print IPs and search for ^msw.*127.0.0.1
Use vagrant-ssh as the config file and ssh into default host
Use 'less' to nicely display control characters from the outupt of 'grep'.
Use ANSI escape codes to make World bold from input Hello World!
Use awk command 'FNR==NR { arrayin array { print $0 ; array}' on compressed files input1.vcf.gz and input2.vcf.gz
Use awk command '{ ... }' on compressed files input1.vcf.gz and input2.vcf.gz
Use metaflac to extract the artist field from myfile.flac, and set the variable ARTIST to the value of that field.
Use the PHP interpreter to output an endless stream of a characters to nohup.out in the current directory, or in the home directory if that is not possible. The PHP process will not receive or respond to SIGHUP which are sent to it.
Use the contents of compressed files input1.txt.gz and input2.txt as arguments to command
Use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands
Use the last 100 lines of file1 as input to wc -l and monitor the pipeline with the bar command
Use the last 100 lines of file1 as input to wc -l and monitor the pipeline with the pv command
Use the output of ping google.com as input to awk script packet_loss.awk
Use the uncompressed contents of blah.gz as input to some_command
Use the uncompressed contents of blah.gz as input to some_command
Use the uncompressed contents of data.gz as input to ./complicated-perl-script-that-reads-stdin and print a status
Use up to a gigabyte of RAM at a rate of 1MB per second showing the current and total rate
Uses GNU tool 'time' to estimate time consumed by command 'command' and redirects output to file
Uses the time utility to report only real execution time of 'ls' command.
Variable PID contains a process ID, check if this process exists - resulting exit status from this command will be zero if it does and current user has permission to send it signals.
Variable PID contains a process ID, send SIGTERM to this process if it exists.
Verbosely change ownership of $file to root
Verbosely compresses all files on fifth and sixth depth level keeping original files in place.
Verbosely compresses all files on fourth and fifth depth level keeping original files in place.
Verbosely compresses all files on second and third depth level keeping original files in place.
Verbosely compresses all files on seventh and eighth depth level keeping original files in place.
Verbosely compresses all files on sixth and seventh depth level keeping original files in place.
Verbosely compresses all files on third and fourth depth level keeping original files in place.
Verbosely compresses all files on third and fourth depth level keeping original files in place.
View contents of files matching /usr/share/doc/mysql-server-5.0/changelog*.gz in less
View gzip's help documentation
View history using less
View history using more
View history using vim
View history using vim
View history using vim in read only mode
View line 500 to line 1000 in gzipped file bigfile.z
View line 500 to line 500 + 501 in gzipped file bigfile.z
View lines 116 through 120 of history
View manual page of find utility
View manual page of the find command
View the bash manpage, starting with the view positioned at the first occurrence of the expression BASH_SOURCE.
View the contents of file.txt with line numbers in the pager less
View the man page of find
Views text content of compressed FileB file in TarFile archive.
When a window is closed in a session, automatically renumbers the other windows in numerical order (since v1.7).
Wrap each line in file to fit in 80 characters and count the number of lines
Wrap each line in file.txt to fit in 76 characters breaking only at spaces and indent the output
Wrap each line in file.txt to fit in 80 characters
Wrap each line in file.txt to fit in 80 characters
Wrap each line in longline to a maximum of 30 characters
Wrap each line in longline to a maximum of 30 characters breaking at spaces
Wrap each line in yourfile to fit in 79 characters and right pad any lines shorter with spaces
Wrap standard input to fit in 10 characters per line
Write 127.0.0.1 ad.doubleclick.net to the console and append to /etc/hosts as root
Write 2-1 to standard output and to /sys/bus/usb/drivers/usb/unbind
Write 2-1.1.1 to standard output and to file /sys/bus/usb/drivers/usb/unbind
Write Australia/Adelaide to standard output and to /etc/timezone
Write Hello, world to standard output and to /tmp/outfile
Write Some console and log file message to standard output and /dev/fd/3
Write [some repository] to standard output and append to /etc/apt/sources.list as root
Write \n/usr/local/boost_1_54_0/stage/lib to standard output and append to /etc/ld.so.conf
Write deb blah ... blah to standard output and append to /etc/apt/sources.list as root
Write deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen to standard output and append to /etc/apt/sources.list.d/10gen.list as root
Write ee to standard output and /dev/stderr as input to foo
Write ee to standard output and as input to command foo
Write ee to standard output and as input to command foo
Write ee to standard output of the current terminal and as input to command foo
Write ee to standard output on /dev/pty/2 and as input to command foo
Write error to both the log file log and standard error
Write error to standard error and do not append to log
Write error to standard output
Write fifo forever infinitely using the named pipe fifo by writing its contents to standard output and to fifo
Write foo to the real path of the current command's standard input
Write foo to the real path of the current command's standard output
Write hello world to the console and print number of bytes, symbols and strings in provided input.
Write hey hey, we're the monkees to standard output and as input to gzip --stdout > my_log.gz
Write hey hey, we're the monkees to standard output and as input to to gzip --stdout saved to my_log.gz
Write hey hey, we're the monkees to standard output and as input to to gzip --stdout saved to my_log.gz without writing to disk
Write some output to standard output and to /some/path/some_file as user some_user
Write suspend to standard output and to file /sys/bus/usb/devices/usb3/power/level
Write 'myname=Test' to the console and append to $CONFIG as root
Write 10 lines of y to file 10lines.txt
Write 200 lines of this is the text I want to add to a file to myFile.txt
Write a random list of numbers to /tmp/lst and stdout.
Write contents of /sys/kernel/debug/tracing/trace_pipe to standard output and to tracelog.txt executing as a root user
Write current directory listing to standard output and to files.txt
Write differences between files a.txt and b.txt side-by-side and not outputting common lines to file c.txt.
Write differences between files file1 and file2 to file3.
Write every two lines in infile on a single line separated by a comma
Write every two lines in infile on a single line separated by a space
Write lines 16224 through 16482 of file.in to file.out
Write list of files present only in dir1 to file difference1.txt.
Write list of missing files in Subversion repository to file removedProjs.
Write output and error of ant to the console and to build.log
Write output and error of bash myscript.sh to standard output and to output.log
Write output and error of command to standard output and to /path/to/logfile
Write output and error of update-client to standard output and to my.log
Write output of command to standard output and append to /path/to/logfile
Write output of command to standard output and to /path/to/logfile
Write output of command_that_writes_to_stdout to standard output and as input to command_that_reads_from_stdin
Write output of foo to standard output and to output.file
Write output of ls -a to standard output and to output.file
Write output of ls -hal /root/ to standard output and to /root/test.out
Write output of ls -lR / to standard output and append to output.file
Write output of ls -lR / to standard output and to output.file
Write output of sudo ls -hal /root/ to /root/test.out
Write output of whatever to standard output and to logfile.txt
Write output of yourcommand to standard output and to output.txt
Write standard input to standard output and file /tmp/arjhaiX4
Write standard input to standard output and to foobar.txt
Write standard output and error of ./a.out to standard output and to file output
Write standard output and error of ./a.out to standard output and to file output
Write standard output and error to the console and append to file log
Write standard output and error to the console and append to file log
Write standard output of command to console and append to stdout.log, and write standard error of command to console and append to stderr.log
Write summary of files present only in dir1, and which files differ between dir1 and dir2 to file 'difference1.txt'
Write the common third space separated fields in file1.sorted and file2.sorted to common_values.field
Write the current date and time followed by  0 to the console and append to log.csv
Write the current date and time followed by  1 to the console and append to log.csv
Write the last line of $file to standard output and remove it from $file
Write the lines appended to xxxx as it appears to the console and append to yyyy in the background
Write the output of ./program to the console and a.txt
Write the output of false to standard output and to /dev/null
Write the output of input_prog to standard output and error on console and as input to command my_editor
Write the output of proc1 to standard output and to all commands from proc2 to procN
Write the output of someCommand to standard output and someFile
Write the output of command mongo to the screen and to file somefile
Write the shell's input to standard error as it is read
Write the standard output and error of ls to standard output and /tmp/ls.txt
Write the standard output and error of ls to the console and append it to /tmp/ls.txt
Write the standard output and error of ls to the console and append it to /tmp/ls.txt
Write the standard output and error of program.sh to console and append to log
Write the standard output and error of someCommand to the console and someFile
Write the standard output and error of someCommand to the console and append it to someFile
Write to standard error a trace for each command after it expands the command and before it executes it
Write unbuffered output of python -u client.py to standard output and to logfile
archive all files in a current directory modified in the last 30 days
as root, find from / all files called file.txt
beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line
beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line
bind \C-i to complete function
bind key \x61 to insert itself
bind word foobar to key code \e[24~
bind word pwd\n to key code \e[24~
change group of the file /tmp/php_session to group daemon
change group of the file /var/lib/php/session  to group lighttpd
change group of the file myfile to group friends
change owner and group of the current directory and all files into it to user and group andrew
change owner and group of the directory  $dstdir to the user and group of the file $srcdir
change owner and group of the file /path/to/yourapp to root
change owner and group of the file file to user user and group group
change owner and group of the file dir1 to user root and group  specialusers
change owner and group of the file it to user and group root
change owner and group of the file script.sh to user root
change owner and group of the file uid_demo to user and group root
change owner of the file file to user user_name
change owner of the file /home/bob to user root
change owner of the file destination_dir to user user:
change owner of the file file.sh to user root
change owner of the file my_test_expect.exp to user el
change owner of the file process to user root
change permissions for directories in the entire file system
change the current working directory to A and display all the files in that folder and save the output to the file tmp.txt
change the current working directory to B and display all the files in that folder and append the output to the file tmp.txt
change the current working directory to /some/dir and display all normal/regular files
change the directory to the last found folder in the directory 'a'
change the permissions of al the directories in the current folder
change the permissions of all regular/normal files in the file system
change the permissions of all the directories in the current folder
change the permissions of all the directories in the folder /path/to/someDirectory to 755
change the permissions of all the regular/normal files in the current folder
change the permissions of all the regular/normal files in the current folder
change the permissions of all the regular/normal files in the folder /path/to/someDirectory to 644
change to a directory and search for a file in that directory
change user and group of the file /var/run/docker.sock to user root and group dockerroot
change user and group of the file /usr/bin/aws to user amzadm and group root
change user and group of the file bin to user and group root:wheel
change user of the direct public_html to user owner and group nobody
check if a named screen session already exists
check if named screen session exists
check readline bindings for \x61
check the previous alias in current list
concatenates file1.txt, file2.txt, and file3.txt with the filenames printed at the beginning of file contents
convert epoch second timestamp to date
copy all files which do not have execute permission to another folder
count amount of jobs running
create a backup of all the files in the folder /tmp and display the taken for this operation
create a compressed archive compressFileName.tar.gz with verbose output
create a compressed archive filename.tar.gz with verbose output
create a compressed archive excluding files matching a pattern
create a compressed archive excluding the directories containing exclude.tag
create a compressed archive in my_dir directory matching '.[^.]* ..?*' glob pattern
create a compressed archive of a target directory excluding '<dir1>' and '<dir2>'
create a compressed archive with files newer than 1st of January 2014, 18:00:00.
create a gzip of all the files in the current folder excluding the already gzipped files
create a hard link as directory named new_hard_link to the directory existing_dir as root
create a sub shell and search for regular/normal file with the name myfile in the entire file system and discard all the errors
create a symbolic link in current directory named environments to file ../config/environments
create a symbolic link in current directory named my_db to file /media/public/xampp/mysql/data/my_db
create a symbolic link named $ORACLE_HOME/include to file /usr/include/oracle/11.2/client
create a symbolic link named -pdf-kundendienst to local--pdf-kundendienst file
create a symbolic link named /usr/bin/my-editor to file /usr/share/my-ditor/my-editor-executable
create a symbolic link named /usr/bin/openssl to file /usr/local/ssl/bin/openssl
create a symbolic link named /usr/lib/jvm/default-java to file /usr/lib/jvm/java-7-oracle
create a symbolic link named bar to file that named is a result of the command `canonical.bash foo`
create a symbolic link named link in directory named as value of the variable $2 to a file that named as result of the command `cd \`dirname $2\`; pwd`/`basename $2`
create a symbolic link named test to file .bashrc
create a symbolic link named www to file www1
create a symbolic link with absolute path /cygdrive/c/Program Files to file /cygdrive/c/ProgramFiles
create a symbolic link with absolute path /cygdrive/c/Users/Mic/mypics to file /cygdrive/c/Users/Mic/Desktop/PENDING - Pics/
create a tar ball of all the files in the current folder
create a tar ball of current directory
create alias subs for command  du -sch `find ./ -maxdepth 1 -type d`
create an archive and show a progress bar
create an archive and show a progress bar
create an archive excluding files and directories matching {*.png, *.mp3, *.wav, .git, node_modules}
create an archive excluding files matching patterns listed in /path/to/exclude.txt
create an archive using 'pigz' as a compress program
create an archive using 7zhelper.sh as a compress program
create an archive using pbzip2 as a compress program
create an archive using pbzip2 as a compress program
create and list contents of the archive
create and list filenames in the archive
create archive backup.tar.gz from /path/to/catalog
create directories a b c d e
create directories bravo_dir and alpha_dir
create directories foo and bar
create directories mnt and point
create directory .hiddendir
create directory /cpuset
create directory /data/db
create directory /etc/cron.15sec
create directory /etc/cron.5minute
create directory /etc/cron.minute
create directory /path/to/destination
create directory /tmp/foo
create directory /tmp/new
create directory /var/svn as user root
create directory TestProject
create directory aaa
create directory aaa/bbb
create directory backup
create directory certs
create directory destdir
create directory dir
create directory dir1
create directory dirname with permissions 777
create directory es if it is not exist and create direcoty LC_MESSAGES
create directory foo
create directory foo
create directory log into home directory
create directory new_dir
create directory practice into home directory
create directory public_html into home directory
create directory saxon_docs
create directory subdirectory
create directory tata
create directory temp into home directory
create directory testExpress
create symbolic links in current directory to all files located in bar1 directory that are not directory and do not have .cc filename extension
create symbolic links in current directory to all files located in directory /original and have filename extension .processname
create symbolic links in directory folder2 to all files located in current directory that filename not started with .
date --date=222 days ago +%m
delete a hard link and create a symbolic link to file named $link
delete what was typed in the command line and run pwd when button \e[24~
display all files in the boot directory prepending each filename with STDERR, STDOUT accordingly
display all the files in the current folder in a single line separated by null command
display the contents of  all the regular files in a folder in the sorted order of their depth
display the contents of all the regular files in the current folder and save the output to out.txt
display the manual page of find
display the number of lines in all the php files in the current folder
download a file http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip using cookies oraclelicense=accept-securebackup-cookie
download content from http://127.0.0.1:8000 and output to index.html
download content from http://example.com/textfile.txt and output to textfile.txt
download content from http://page.that.serves.json.com/json/ and format it as json
download content from http://search.twitter.com/search.json?q=node.js and format it as json
download contents from  http://url using a proxy server
download contents from http://example.com/ using a socks5 proxy 125.119.175.48:8909
download contents from http://www.example.com using a proxy server
download contents from https://raw.github.com/creationix/nvm/master/install.sh and execute
download contents from https://www.npmjs.com/install.sh and execute
download contents from website www.example.com using URL-encoding paramName=param
download contents of a website http://example.com/
download contents of a website https://get.scoop.sh
download file  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh and execute it
enable extglob expansion and create symbolic links in bar2 directory to all files located in bar1 directory that are not directory and do not have.cc filename extension
execute a command in 10 seconds
execute command who when key \eW is pressed
extract backup.tar.gz with verbose output
extract filename.tar.xz with verbose output
extract passwd.tar.gz with verbose output
extract phantomjs-1.9.0-linux-x86_64.tar.bz2
extract 'archive.tar.gz' to /destination
extract 'archive.tar.gz' to /destination
extract /path/to/my_archive.tar.xz to /path/to/extract and preserve permissions.
extract an archive stripping the first component
extract archive stored in $1
extract the content of the file doc.gz and split it into pieces per 1000 lines compressed with gzip
extract the content of the file large.csv.gz and split it into pieces per 1000 lines named as xxxNNN
extracts text between pattern1 and pattern2 if and only if the pattern1 is followed by pattern2
file1 and file2 contain lines of comma-separated information, for each line whose first field matches, and where 3rd field of file1 matches 2nd field of file2, 6th field of file1 matches 3rd field of file2, and 7th field of file1 matches 4th field of file2, output: fields 1, 2, 3, 4, 6, and 7 of file1.
file1.txt and file2.txt both contain a name and a number on each line. For each name whose corresponding number does not match in both files, display the Age of ... is different message.
filter output of bind -p by regex
find a difference between website content of http://tldp.org/LDP/abs/html/ and http://www.redhat.com/mirrors/LDP/LDP/abs/html/
find all tar.gz files in a folder and sort them according to the name and display the first 2 files
find all regular/normal files which have execute permission in current folder and copy them to another folder
find all the html files in current folder and replace old string with new string
find all the java script files in a folder and display them in a sorted order based on their type and save the output to a file
find all the regular files in a folder which do not start with the word find and assign the output to a variable
find all the regular/normal files in a folder and assign the output to a variable
find all the regular/normal files in the current folder which have been accessed in the last 1440*24 hours and not modified in 1441*24 hours excluding those which are in the custom sub directory tree
find in the entire file system for the file mysql
find md5sum of 'string to be hashed'
find md5sum of 'string to be hashed'
find md5sum of 401
find md5sum of a string password
find md5sum of a string stored in $pass
find md5sum of an empty string
find md5sum of content from www.google.com
find md5sum of string 'hi'
find md5sums of files named file*.txt
find out what group a given user has
find the file foo.txt in the current folder and assign the output to a variable
force create hard link between $GIT_DIR/../apresentacao/apresentacao.pdf and $GIT_DIR/../capa/apresentacao.pdf
forcible create a symbolic link named /etc/file.conf to file /etc/configuration/file.conf
forcibly and verbosely create a symbolic link named target to file source
forcibly and verbosely create symbolic links in directory ~/Library/LaunchAgents to all files located in /usr/local/opt/mongodb/ and that have filename extension .plist
forcibly change owner to all files and directories in current directory to user www-data
forcibly create a symbolic link named linkname to file new_destination
get a PID of a process
get a PID of a process with name 'test.sh &'
get info about lbzip2\|plzip\|pigz from tar command
get md5sum of an iso file without displaying the filename, save value to 'md5' variable
get second-to-last comma-separated field of each line in file.txt
get the git user access
get the jenkins user access
get the job number from the stored PID
get the root access
get the root access
get the root user access
get year-month-day from date
get year-month-day hour:minute:second from date
gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt
grep for the last occurrence of text between two tags
grep from bottom of file
insert e when it's pressed
kill a number of background jobs
kill all active jobs
kill all background jobs
kill all background processes
kill all jobs
kill group leader
kills a running program 'python csp_build.py'
lines.txt contains a list of line numbers, one entry per line - output only these lines from text.txt omitting the rest of the file.
list PID of a group leader
list all active jobs and its IDs
list all aliases
list all aliases that name contents the string xlogs
list all names of the aliases
list all processes with its PIDs
list all running jobs
list all system calls during process of symbolic link creation process on  /tmp/output.txt file
list jobs including its PIDs
list names of bind functions containing /
login as user YOUR_USER
login as user postgres
login as user postgres
login as user root
login as user username
make a copy of file file1 named file2
make directory /etc/cron.15sec
only get md5sum of a file
open interactive list of jobs to select from
prevents curl from returning error Failed writing body when grepping for foo
print all PIDs of stopped processes
print all active readline keybindings
print all lines after the last match of 'string match'
print all readline bindings
print apparent size rather than disk usage
print bindings for p and e with no case sensitivity
print command for alias list with low priority command
print difference in days between two dates
print disk usage of files or folders in current directory
print full path of relative filename
print lines from last match of ^Statistics until end of file
print list of all alias commands
print number of jobs
print number of jobs
print readline bindings that use key code '\\e\\C-k'
print the last word in a.txt
print the line containing TERMINATE and everything after in 'file'
print top 10 largest files and directories
print value of the variable $PROJ_PATH of the kenneth system user environment
prints a line 19 lines from the line containing PATTERN
prints a number stored among text in $filename
prints absolute file path of a file
prints first line of $bigfile
prints full path of given file
prints last part of a logfile since timestamp 423
prints the last non-empty line of a file
prints the last non-empty line of a file
prints the last occurrence of text between two tags
prints the maven project version
prints the name of the current git branch
prints top 10 commands used
prints top 10 processes sorted by memory usage
read all history lines not already read from the history file
recall the second argument from a previous command by pressing alt-shift-y
record the absolute path of a relative path to a variable
recursively change owner and group of the directory  /opt/antoniod/ to user and group antoniod
recursively change owner and group of the directory  /vol/html and all files into it to user ec2-user and group apache
recursively change owner and group of the directory /your/directory/to/fuel/ and all files into it to user and group nginx
recursively change owner and group of the directory and all files into it to user user and group www-data
recursively change owner and group of the directory and all files into it to user root and group root
recursively change owner and group of the directory and group of the directory and all files into it to user and group dev_user
recursively change owner of directories $(npm config get prefix)/lib $(npm config get prefix)/node_modules $(npm config get prefix)/bin $(npm config get prefix)/share to the current user
recursively change owner of the directory /Users/xxx/Library/Developer/Xcode/Templates and all files to user xxx
recursively change owner of the directory /tmp to the current user
recursively change owner of the directory /usr/lib/node_modules/ to the current user
recursively change owner of the directory /usr/local to the current user
recursively change owner of the directory /usr/local/lib to the current user
recursively change owner of the directory /usr/local/lib/node_modules/ to the current user
recursively change owner of the directory and all files into it to user  nobody
recursively change owner of the directory testproject and all files into it to user ftpuser
recursively change owner of the directory ~/.npm to the current user
recursively change user of the direct /home/test/ and all files into it to user test
recursively change user of the direct public_html and all files into it to user owner
redirect output inside screen session
remove all the core files in the current directory
remove top-level domain from URL's in urllist.txt
removes last N lines from file.txt
removes last N lines from file.txt
removes the 4th-from to 6th-from last lines in file
replaces the last occurrence of 'a' with 'c'
replaces the last occurrence of 'a' with 'c'
replaces the last occurrence of 'a' with 'c' in file
replaces the last occurrence of 'a' with 'c' in file
replaces the second to last line of file
returns the first 100 bytes in the file
reverse a file with comma deliminators instead of newline deliminators
reverse both words and lines in file
reverse both words and lines in file
reverse input with comma deliminators
reverses order of lines in a.txt and saves them to b.txt
run tar -xzvf ... as user $username
run your_command, letting the user page through the output and move around with the arrow keys - the Q key terminates and returns to the shell prompt.
run a command dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName qualidade -sysPassword password -systemPassword password -scriptDest /u01/app/oracle/oradata/qualidade -characterSet WE8ISO8859P1 with bash shell as user oracle
run a script in 1000 seconds
run a shell as user jenkins
run bash in screen and source a file before printing the prompt
run bash shell as user root
run command $WEB --quiet in backgrounf as user  named as the value of the variable $USER
run command ${OBJECTDB_HOME}/bin/objectdb.sh start $JAVA_USER as user $JAVA_USER
run command /path/to/my_daemon & echo \$! > /tmp/su.joe.$$ as user joe
run command /path/to/my_daemon & echo \$! > /tmp/su.joe.$$ as user joe and redirect the output to file /tmp/su.joe.$$
run command /path/to/my_daemon as user joe and redirect the output to file /some/output/file
run command /usr/bin/psql database -c \SELECT 'DROP TABLE ' || ....  as user postgres
run command R -e \install.packages('shiny', repos='http://cran.rstudio.com/')\ as user root with a full login simulation
run command cd /home/$USERNAME/$PROJECT ; svn update as user named as value of the variable $USERNAME
run command cd /home/$USERNAME/$PROJECT; svn update with a shell as user username2
run command command as user user1 with password password
run command command as user username with a full login simulation
run command createdb $DBNAME as user postgres
run command dnf install glibc.i686 as user root
run command exec > >2>&1 ; cd $WKD; { $BIN $ARG & }; echo \$! > $PID  as user $USR
run command set -a; . /path/to/nullmailer-vars; set +a; /usr/sbin/logcheck with a bash as user root
run command sh runProgram.sh as user jetty
run command ssh user1@192.168.1.2 \awk '\\\$5==1{print \\\$3}' filename.log\ as user1 and unify the result
run command './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch' as user elasticsearch
run command 'bash --rcfile <(echo source ~/.bashrc; source myfile)' as user root with a bash shell
run command 'bash --rcfile myfile' as user root
run command 'ls -hal /root/ > /root/test.out' as user root
run command 'source myfile; bash' as user root
run ksh shell as user apache
run programm /home/oracle/database/runInstaller as user oracle in background
run script  runProgram.sh as user jetty
run script runProgram.sh as user jetty
run script /PATH/TO/MY_APP as user USER_FOOBAR in background
run script filename.sh as root with preserved user environment
save all aliases to the variable $oldalias
search all the files in the current folder and assign them to a variable
search all the lines that start with the word malloc in the files ending with .c or .h or .ch
search for a directory in a folder taking name as argument and assign the first instance of it to a variable
search for all text files in current folder and delete them
search for all the directories in a folder and limit the search to current folder and give them as input to the python script
search for all the directories in the current folder and save the output to a variable
search for all the files having spaces in the current folder and save the output to the variable founddata
search for all the files in the current folder which start with gen and end with bt2 and assign the output list to the variable var.
search for all the mp3 files in the current folder and change the character encoding of them to  EUR-KR (Korean characters)
search for all the mp3 files in the current folder and change the character encoding of them to <source-encoding>
search for all xml files in some directory
search for the directory config in the current folder and change directory to it
search for the directory config in the current folder and change directory to the first instance of the search
search for the file .user.log and display its parent directory
search for the text file file.txt and display its parent directory
search for the word foo in all the js files in the current folder
search in the entire file system for the files firefox, thunderbird, seamonkey and display all the files expect those having the words 10_Recommended or repo (discard all the errors during search)
send GET request to http://testsite/api/ with header Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53 and format as json
send GET request to https://graph.facebook.com/me/feed using URL-encoding access_token=$(cat .fb_access_token)
set MyVariable to the value of VARIABLE_NAME
set a crontab to create or update the timestamp of washere1 in the current directory every minute.
set a crontab to create or update the timestamp of washere2 in the current directory every 30 minutes.
set alias .. for command cd ..
set alias : for command 'xargs -I{}'
set alias X for command | cut -d' ' -f2
set alias X2 for command | cut -d' ' -f2
set alias c1 for command awk '{print \$1}'
set alias cats for command 'konqueror http:'//icanhazcheezburger.com''
set alias cd- for command 'cd $(history -p !!:1)'
set alias cd- for command 'cd ${${(z)$(fc -l -1)}[3]}'
set alias cdl for command 'cd -- $(ls -t | head -n 1)'
set alias clean for command 'rm -rf #* .*~ *~ *.bak *.dvi *.aux *.log'
set alias cleanup for command rm -Rf -- foo bar baz
set alias cleanup for command 'rm -Rf `pwd`/{foo,bar,baz}'
set alias current for command 'cd $(cur -g)'
set alias devn for command cat > /dev/null
set alias dosetit for command 'eval `setit-sh`'
set alias ff for command find . -name $1
set alias foo for command $'echo A \'*\' is born at $(date)'
set alias foo for command BAR=baz
set alias foo for command printf
set alias foo for command 'BAR=baz'
set alias git-root for command if [ `git rev-parse --show-cdup` !=  ]; then cd `git rev-parse --show-cdup`; fi
set alias git-root for command 'cd $(git rev-parse --show-cdup)'
set alias go for command 'GOPATH=$go'
set alias go for command 'ssh $-l pete'
set alias h for command history
set alias histgrep for command history | grep
set alias iTMSTransporter for command '`xcode-select --print-path`/../Applications/Application\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter'
set alias j7 for command 'JAVA_HOME=`/usr/libexec/java_home -v 1.7`'
set alias killaf for command kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`
set alias logspace for command find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; | awk '{print $5, $9 }'
set alias logspace for command 'find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''
set alias ls for command ls -lrta
set alias ls for command 'ls -a -l'
set alias lvim for command vim -c \normal '0\
set alias m for command mplayer -novideo -loop 0
set alias memu for command ps -u $-o pid,rss,command | awk '{print \$0}{sum+=\$2} END {print \Total\, sum/1024, \MB\}'
set alias mkcd for command _(){ mkdir -pv $1; cd $1; }; _
set alias mkcd for command '_(){ mkdir $1; cd $1; }; _'
set alias mkdir for command ¨mkdir -p¨
set alias my_command for command $oldalias --fail-if-command-contains=$bad_string
set alias my_command for command $oldalias -option 3
set alias mycd for command cd `echo $1`
set alias no for command ls -f
set alias prettify_json for command php -E '$o = json_decode($argn); print json_encode($o, JSON_PRETTY_PRINT);'
set alias prettyjson for command 'python -m json.tool'
set alias ps for command 'screen -d -m okular'
set alias psgrep for command ps -ef | grep
set alias pwd for command echo -n $| pbcopy'
set alias pwd for command echo -n `pwd` | pbcopy
set alias pwd for command '/bin/pwd | pbcopy'
set alias py for command python2.5 -O
set alias restart_rails for command 'kill -9 `cat tmp/pids/server.pid`; rails server -d'
set alias s for command 'it=$($(history | tail -2 | head -1 | cut -d  -f4-))'
set alias te for command 'tail -f /var/log/apache2/error_log | perl -ne '\''...'\'''
set alias unix for command date +%s
set alias unix for command 'echo $(date +%s)'
set alias unsetvar for command 'source /your/path/to/the/script/unsetvar'
set alias vimrc for command $EDITOR ~/.vimrc
set alias vv for command $(date)
set alias webshare for command 'python -m SimpleHTTPServer'
set alias your_env for command 'source ~/scripts/your_env.sh'
set alias jump for command cd $(myscript.sh)
set alisa 12np for command 'ssh mydomain\\stephencheng@userxyz@host.com'
set alisa py for command $EDITOR
set value of the variable cmdstr to the value of the alias  $aliascmd
set variable uname_m to machine architecture, ie. x86_64
set variable r to currently running kernel release, ie. 4.4.0-81-generic
show processes for all users, their user/owner, and those not attached to a terminal
simulate a full login of user builder
simulate a full login of user root
sleep for 1 second
sleep for 10 seconds
sleep for 10 seconds
sleep for 5 seconds
sleep for 500 seconds
sleep until a specific date
split $SOURCE_FILE into pieces per 100 lines
split a file list.txt into pieces per 600 lines
split compressed content of the directory /home into pieces per 4000 mb named as  /media/DRIVENAME/BACKUPNAME.tgz.NNN
split compressed content of the file www into pieces per 1073741824 bytes named as backup.tar.NNN
split content all files file1..40000 into pieces per 1445 lines named as outputprefixNNN as digital prefix
split content of the file file.txt started from second line into pieces per 4 lines named as split_NNN
split content of the file inputfile except lines started with ^t: into pieces per 200 lines
split content of the files *.txt beginning with 1001st line into pieces per 1000 lines
split file $file into pieces named with 5 character suffix
split file ${fspec} into pieces named as xyzzyNNN with numeric prefix from 1 to 6
split file your_file into pieces per 9 lines
split file /etc/gconf/schemas/gnome-terminal.schemas into pieces per 1000000 lines
split file /usr/bin/firefox into pieces per 1000 lines
split file /usr/bin/gcc into pieces per 100000 lines
split file abc.txt into pieces per 1500000000 bytes named as abc.NNN
split file data.csv into pieces per 100 lines
split file data.csv into pieces per 100 lines named with additional suffix .csv
split file input.txt into pieces per 1 line named output.NNNNN
split file t.txt into pieces per 30000000 lines named as t.NN with numeric suffix
split listing of the current directory into pieces per 500 lines named outputXYZNNN
split processed content of the file inout_file into pieces per 2000000 named as out-prefix-NNN
split processed content of the file temp into pieces per 1 line named tempNNN with numeric suffix
split result of the command tar [your params] into pieces per 500 mb named as output_prefixNNN
split the file /path/to/large/file into pieces per 50000 lines named as /path/to/output/file/prefixNNN
split the file file into pieces per 2 lines
split the file 2011.psv into pieces per 50000000 lines processed with script filter.sh
split the file data.csv into pieces per 100 mb named as data.tsv.NNN with digital prefixes
split the file hugefile.txt into pieces per 100000 lines named as partNNN with digital prefixes
split the first 100 lines of the file datafile per lines with size 1700 bytes
split the result of command ping -c 25 google.com | tee  into pieces per 100000 bytes named as /home/user/myLogFile.logNNN
split uncompressed content of the file biglogfile.gz into pieces per 500000 lines
ssh into hostname as user buck
ssh into hostname as user buck
ssh into ssh.myhost.net as user myusername and run command mkdir -p $2
ssh into default vagrant host without running vagrant ssh
ssh into default vagrant host without running vagrant ssh
ssh into default vagrant host without running vagrant ssh and without an interactive ssh shell
ssh into default vagrant host without running vagrant ssh by passing the configuration parameters vagrant uses for ssh
ssh into desired vagrant host HOST without running vagrant ssh
ssh into localhost on port 10022
ssh into localhost on port 4444
start 2 sleep processes in the background
start new screen session or to take over the most recent detached one
store absolute path of executing script
store absolute path of executing script
switch to user username
switch user to jenkins
test if the 2nd column in file A is in the reverse order of the second column of file B
verbosely create intermediate directoriy tmp as required and directory boostinst
view the manual page of find
wait 2 seconds and then print hello
wait for a change in target-directory before returning
when using vi-insert keymap bind command \C-v{}\ei to key {
when using vi-insert keymap bind command \C-v}\ei to key }
when using vi-insert keymap bind command \C-v[\ei to key [
when using vi-insert keymap bind command \C-v]\ei to key ]
when using vi-insert keymap bind command \C-v:\ei to key :
when using vi-insert keymap bind command \C-v;\ei to key ;
when using vi-insert keymap bind command \C-v"\ei to key "
when using vi-insert keymap bind command \C-v'\ei to key '
when using emacs keymap bind command "\e[D" to key backward-char
when using emacs keymap bind command "\e[B" to key down-history
when using emacs keymap bind command "\e[A" to key up-history
when using emacs keymap bind command "\e[C" to key forward-char
when using emacs keymap bind command "\eOD" to key backward-word
when using emacs keymap bind command "\eOC" to key forward-word
when using emacs keymap bind command "\eOH" to key beginning-of-line
when using emacs keymap bind command "\eOF" to key end-of-line
when using emacs keymap bind command "\e[3~" to key delete_char
when using emacs keymap bind command "\e[1~" to key beginning_of_line
when using emacs keymap bind command "\e[4~" to key end_of_line
Display process information once, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 5 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display various information about process currently taking the most CPU time.
Monitor all processes whose command includes 'java'.
List all processes whose command includes 'java'.
Get information about the process with PID 1234.
Get information about all processes.
Sort processes by memory usage.
Add new. to the beginning of the name of original.filename, renaming it to new.original.filename.
Add old. to the beginning of the name of original.filename, renaming it to old.original.filename.
Add OLD. to the beginning of the name of original.filename, renaming it to OLD.original.filename.
Add New. to the beginning of the name of original.filename, renaming it to New.original.filename.
Add prefix to every non-blank line in file.txt
Add suffix to every non-blank line in file.txt
Join every two lines in file.txt with join_string
Output the last field of every line in file.txt
Output the first field of every line in file.txt
Add prefix_ to every non-blank line in a.txt
Add suffix_ to every non-blank line in a.txt
Add prefix_ and suffix_ to every non-blank line in a.txt
Replace all occurrences of foo with bar in a.txt
Replace all occurrences of foo with bar in every file in the current directory
Delete all lines containing the word foo in a.txt
Add a date time stamp to every line of output in ping google.com
Add a date time stamp to every line of output in ping 8.8.8.8
Add a date time stamp to every line of output in ping www.google.com
Add directory $HOME/Documents to the directory stack
Add directory $HOME/Downloads to the directory stack
Add directory $HOME/Music to the directory stack
Alias ls -l as ll
Alias grep -i as gi
Alias cp -i as cpi
Alias mv -i as mvi
Alias rm -i as rmi
Alias mkdir -p as mkdirp
Alias less -R as lessr
Alias chmod +x as chmodx
Alias du -h as duh
Alias df -h as dfh
Alias free -m as freem
Alias ps auxf as psauxf
Append the string "& Bytes" to the end of every line in $TEMPFILE and format the result as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result numerically, and format the output as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result in reverse numerical order, and format the output as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result alphabetically, and format the output as a table
Append history lines from this session to the history list
Read the history file and append its contents to the history list
Write the current history to the history file
Clear the history list
Delete the history entry at offset offset
Print the last arg entries from the history list, with each entry prefixed by its offset
Store the args in the history list as a single entry
Assign the alias rm100m to a find command that removes any .tar file larger than 100M.
Assign the alias rm50m to a find command that removes any .tar file larger than 50M.
Assign the alias rm25m to a find command that removes any .tar file larger than 25M.
Assign the alias rm2g to a find command that removes any .tar file larger than two gigabytes.
Assign the alias rm3g to a find command that removes any .tar file larger than three gigabytes.
Assign the alias rm4g to a find command that removes any .tar file larger than four gigabytes.
Assign the alias rmc to a find command that deletes all core dump files in the currenty directory and below.
Assign the alias rmd to a find command that deletes all directories in the current directory and below.
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Bind mount /original/path on /new/path
Unmount /original/path
Mount /dev/sda1 on /mnt
Mount a CD-ROM
Calculate the md5 sum hash for a given file
Generate a list of all the .java files in the current directory
Generate a list of all files in the current directory
Generate a list of all files in the current directory, including hidden files
Calculate sha1 sum of file $ecriv
Calculate sha256 sum of file $ecriv
Calculate sha512 sum of file $ecriv
Calculate CRC32 checksum of file $ecriv
Calculate size of file $ecriv in bytes
Calculate size of file $ecriv in kilobytes
Calculate size of file $ecriv in megabytes
Calculate size of file $ecriv in gigabytes
List all files in current directory
List all files in current directory, including hidden files
List all files in current directory, including hidden files, in long format
List all files in current directory, sorted by modification time, newest first
Calculate sha1 sum of file ${my_iso_file} and save it to variable 'sha1'
Calculate sha256 sum of file ${my_iso_file} and save it to variable 'sha256'
Calculate the number of lines in file ${my_iso_file} and save it to variable 'lines'
Save the first 10 lines of file ${my_iso_file} to a new file named 'head.txt'
Save the last 10 lines of file ${my_iso_file} to a new file named 'tail.txt'
Save all lines of file ${my_iso_file} except for the first 10 lines to a new file named 'tail.txt'
Save all lines of file ${my_iso_file} except for the last 10 lines to a new file named 'head.txt'
Print the unique lines of file ${my_iso_file} to the screen
Print the unique lines of file ${my_iso_file} to a new file named 'uniq.txt'
Print the duplicate lines of file ${my_iso_file} to the screen
Generate a list of all files in the current directory
Copy file1.txt to file2.txt
Move file1.txt to file2.txt
Generate a list of all files in the current directory
Copy all files matching '*.txt' from the current directory to the directory '/tmp'
Move all files matching '*.html' from the current directory to the directory '/tmp'
Calculate the md5sum of the executable file of command g++
Calculate the md5sum of the executable file of command ls
Calculate the md5sum of the executable file of command cat
Calculate the md5sum of the executable file of command rm
Calculate the md5sum of the executable file of command mv
Calculate the md5sum of the executable file of command cp
Calculate the md5sum of the executable file of command mkdir
Calculate the md5sum of the executable file of command rmdir
Calculate the md5sum of the executable file of command touch
Calculate the md5sum of the executable file of command grep
Calculate the md5sum of the executable file of command find
Calculate the md5sum of the executable file of command chmod
Calculate the md5sum of the executable file of command sort
Calculate the md5sum of the executable file of command uniq
Calculate the md5sum of the executable file of command wc
Calculate the md5sum of the executable file of command head
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'make'
Calculate the md5sum of the executable file of command 'cmake'
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running knm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running lnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running mnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running anm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change directory to the download directory specified in the current user's user-dirs.dirs file
Print the working directory
List the contents of the current directory
List the contents of the current directory, including hidden files
List the contents of the current directory, including hidden files, in long format
Print working directory
List contents of current directory
List contents of current directory, including hidden files
List contents of current directory in long format
List contents of current directory, including hidden files, in long format
Change directory to the parent of the current directory
Create a new directory named 'dir'
Remove the directory named 'dir', if it is empty
Recursively remove the directory 'dir', including all of its contents
Move the file 'file1' to the directory 'dir'
Copy the file 'file1' to the directory 'dir'
Rename the file 'file1' to 'file2'
Display the contents of the file 'file'
Display the first 10 lines of the file 'file'
Change user to amzadm and group to root of /usr/local/bin/aws
Change user to amzadm and group to root of /usr/sbin/aws
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
List all the running processes
List all the running processes in a tree format
Get information about the system
Get information about the kernel
Get information about the hostname
Get information about the processor type
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
Use tar to compress the contents of the /etc/ directory
Use gzip to compress the file named foo
Use bzip2 to compress the file named foo
Use xz to compress the file named foo
Use zip to compress the file named foo
Concatenate with a space every other line in input.txt
Join every two lines in input.txt with a comma
Join every two lines in input.txt with a tab
Output the first column of input.txt
Output the second column of input.txt
Output the first and third columns of input.txt
Output the lines in input.txt that contain the word "foo"
Output the lines in input.txt that do not contain the word "foo"
Continuously write 1111111111111111 without newlines to /dev/to/overwrite
Continuously write 2222222222222222 without newlines to /dev/to/overwrite
Continuously write 3333333333333333 without newlines to /dev/to/overwrite
Continuously write 4444444444444444 without newlines to /dev/to/overwrite
Continuously write 5555555555555555 without newlines to /dev/to/overwrite
Continuously write 6666666666666666 without newlines to /dev/to/overwrite
Continuously write 7777777777777777 without newlines to /dev/to/overwrite
Continuously write 8888888888888888 without newlines to /dev/to/overwrite
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert the first 1024 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 2048 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 4096 bytes of /dev/urandom to a string of hexadecimal bytes
Creates a new directory called ${DIR}
Changes the current working directory to ${DIR}
Lists the contents of the current working directory
Prints the full path of the current working directory
Removes the directory ${DIR} and all its contents
Prints the contents of ${FILE} to the standard output
Prints the contents of ${FILE} to the standard output, one line at a time
Searches ${FILE} for lines containing ${PATTERN} and prints them to the standard output
Creates a new file called ${FILE}
Lists all files in the current folder
Shows the current working directory
Changes the current working directory to the user's home directory
Creates a new directory called 'temp' in the current working directory
List all files in current working directory
List all files in current working directory, including hidden files
List all files in current working directory in long format
List all files in current working directory, sorted by modification time
List all files in current working directory
List all files in current working directory, including hidden files
List all files in current working directory, including hidden files, in long format
Copy file linked to by bar.pdf to bar.pdf
Copy file linked to by foo.pdf to foo.pdf
Copy file linked to by baz.pdf to baz.pdf
List all the files in the current directory
List all the files in the current directory, including hidden files
List all the files in the current directory, including hidden files, in long format
List all the files in the current directory, in reverse alphabetical order
Generate a list of all the files in the current directory
Move the file 'foo' to the directory '/tmp/'
Change the permissions of the file 'foo' so that only the owner can read and write it
Change the permissions of the file 'foo' so that everyone can read, write, and execute it
Display the contents of the file 'foo'
Prints all lines containing "main" in each *.cpp, *.c, *.h file.
Prints all lines NOT containing "main" in each *.cpp, *.c, *.h file.
Counts lines in each of the *.php files in the current folder and prints the total count.
Counts lines in each of the *.js files in the current folder and prints the total count.
Counts lines in each of the *.css files in the current folder and prints the total count.
Counts the number of lines in each *.java file in a git repository.
Counts the number of lines in each *.rb file in a git repository.
Counts the number of lines in each *.py file in a git repository.
Counts the number of lines in each *.js file in a git repository.
Prints the working directory.
Prints the user's home directory.
Prints the contents of a file.
Prints the contents of a file, one line at a time.
Copies a file.
Moves a file.
Deletes a file.
Makes a new directory.
Changes the current working directory.
Prints out all files in a git repository that contain the word "error".
Prints out all files in a git repository that contain the word "warning".
Create a new screen
Detach from a screen session
Create a new screen session
Detach from a screen session
Generate a new ssh key and store it in the file ~/.ssh/id_rsa
Create a variable FOO_BACKWARDS containing oof.
Create a variable BAR_BACKWARDS containing rab.
Create a variable BAZ_BACKWARDS containing zab.
Create a variable QUX_BACKWARDS containing xuq.
Create a variable QUUX_BACKWARDS containing xuuq.
Create a variable CORGE_BACKWARDS containing egroc.
Create a variable GRAULT_BACKWARDS containing tlaurg.
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Create compressed archive from my_large_file_3 and my_large_file_4 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.
Creates a temporary file with a random name and saves it in the 'tempfile' variable.
Creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable.
Creates temporary file in a $temp_dir folder with name pattern defined by $template, and stores path to created file in 'my_temp' variable.
Creates temporary folder in the current directory with name pattern defined by $template, and stores path to created folder in 'my_temp' variable.
Delete all lines matching pattern in filename
Delete all lines not matching pattern in filename
Delete all lines of a file
Substitute first occurrence of pattern in each line of file
Substitute all occurrences of pattern in each line of file
Substitute pattern with confirmation from user
Substitute pattern if it occurs at the beginning of a line
Delete newlines from output of 'hg st -R $path' and save to variable var
Delete all files in current directory
Delete all files in directory 'foo'
Only delete files in directory 'foo' that end with '.txt'
Delete all files in current directory except for files ending with '.txt'
Recursively delete all empty directories in current directory
Display the last part of files
Output the first part of files
Print selected parts of lines from each FILE to standard output
Determines if the kernel is 32 bit or 64 bit.
This command will tell you whether you are running a 32-bit or 64-bit kernel.
Disables shell option 'compat32'.
Disables shell option 'compat40'.
Disables shell option 'compat41'.
Disables shell option 'compat42'.
Enables shell option 'compat31'.
Enables shell option 'compat32'.
Enables shell option 'compat40'.
Enables shell option 'compat41'.
Disables shell option 'nounset'.
Disables shell option 'pipefail'.
Display /tmp/file as a table of width 30 with columns filled before rows
Display /tmp/file as a table of width 40 with columns filled before rows
Display /tmp/file as a table of width 50 with columns filled before rows
Display /tmp/file as a table of width 60 with columns filled before rows
Display /tmp/file as a table of width 70 with columns filled before rows
Display system's hostname
Display the current operating system
Display the current kernel version
Display the current kernel release
Display difference between one.txt and two.txt, side-by-side with a few lines of context.
Display difference between one.txt and two.txt, in context format.
Display difference between one.txt and two.txt, in unified format.
Display inputfile all on one line (replace newlines by spaces)
Display the first 10 lines of inputfile
Display the last 10 lines of inputfile
Display all lines of inputfile except the first 10
Display all lines of inputfile except the last 10
Print only lines containing "pattern" in inputfile
Print only lines not containing "pattern" in inputfile
Display inputfile all on one line (replace newlines by spaces)
Display the first 10 lines of inputfile
Display the last 10 lines of inputfile
Display all lines of inputfile except for the first 10
Display all lines of inputfile except for the last 10
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by commas)
Display inputfile all on one line (replace newlines by tabs)
Display the amount of free and used memory on the system
List all the files in a directory
Create a new directory
Remove a directory
Move a file from one location to another
Copy a file from one location to another
Display source and mount point of the file system containing /some/path.
Display the amount of free space on the file system containing /some/path.
Display the amount of free space on all mounted file systems.
List all mounted file systems.
Display standard input as printable characters or backslash escapes
Display standard input in octal notation
Display standard input in decimal notation
Display standard input in hexadecimal notation
Display standard input as 16-bit little-endian words in hexadecimal notation
Display standard input as 32-bit little-endian words in hexadecimal notation
Display standard input as 16-bit big-endian words in hexadecimal notation
Display the contents of sample_0002.gz with lk=1& removed
Display the contents of sample_0003.gz with lk=1& removed
Display the contents of sample_0004.gz with lk=1& removed
Display the contents of sample_0005.gz with lk=1& removed
Display the contents of sample_0006.gz with lk=1& removed
Display the contents of sample_0007.gz with lk=1& removed
Display the contents of sample_0008.gz with lk=1& removed
Display the contents of sample_0009.gz with lk=1& removed
Display the contents of sample_0010.gz with lk=1& removed
Display the contents of sample_0011.gz with lk=1& removed
Display the contents of sample_0012.gz with lk=1& removed
Display the contents of sample_0013.gz with lk=1& removed
Display the contents of sample_0014.gz with lk=1& removed
Display the contents of sample_0015.gz with lk=1& removed
Display the host's RSA fingerprint using the md5 hasing algorithm.
Display the host's DSA fingerprint using the md5 hasing algorithm.
Display the host's ECDSA fingerprint using the sha1 hasing algorithm.
Display the host's RSA fingerprint using the sha1 hasing algorithm.
Display the host's DSA fingerprint using the sha1 hasing algorithm.
Display the host's ECDSA fingerprint using the sha256 hasing algorithm.
Display the host's RSA fingerprint using the sha256 hasing algorithm.
Shows all lines in 'filename' that contain 'pattern'.
Shows all lines in 'filename' that do not contain 'pattern'.
Shows all lines in 'filename' that contain 'pattern1' or 'pattern2'.
Shows all lines in 'filename' that contain 'pattern1' and 'pattern2'.
Outputs the first 10 lines of 'filename'.
Outputs the last 10 lines of 'filename'.
Do not allow variables to be overwritten
Do not allow commands which would overwrite existing files to be executed
Do not allow the use of unset variables
Do not allow the use of undefined shell variables and functions
Do not allow the use of variables with the empty string as their value
Do not allow the use of variables which are not assigned values
Do not allow the use of variables which have not been previously declared
Do not allow the use of variables which are declared but not used
Do not allow the use of variables which are assigned values but not used
Dump a as hexadecimal bytes
Dump b as hexadecimal bytes
Dump 0 as hexadecimal bytes
Dump 1 as hexadecimal bytes
Dump 2 as hexadecimal bytes
Dump 3 as hexadecimal bytes
Dump 4 as hexadecimal bytes
Dump 5 as hexadecimal bytes
Dump 6 as hexadecimal bytes
Set the number of commands to remember in the history list
Ignore duplicate commands in the history list
Append new history entries to the history file
Do not overwrite the history file
Allow a script to be interrupted with SIGINT (Ctrl-C)
Exit immediately if a command exits with a non-zero status
Set the number of commands to remember in the history list
Append the history list to the file named by the value of the HISTFILE variable
Do not overwrite an existing file with the history list
Ignore duplicate entries in the history list
Ignore commands that begin with a space character
Usefull for setting options in scripts
Notify the user immediately of background job completion
Turn on history expansion
Turn on history substitution
Prints the value of the 'SHELL' environment variable.
Sets the value of the 'SHELL' environment variable to '/bin/bash'.
Prints the value of the 'HOME' environment variable.
Sets the value of the 'HOME' environment variable to '/home/user'.
Prints the value of the 'PATH' environment variable.
Enables shell option 'cdable_vars'.
Enables shell option 'cdspell'.
Enables shell option 'checkhash'.
Enables shell option 'checkjobs'.
Enables shell option 'checkwinsize'.
Enables shell option 'cmdhist'.
Enables shell option 'completion_ignore_case'.
Enables shell option 'complete_fullquote'.
Enables shell option 'direxpand'.
Enables shell option 'dirspell'.
Enables shell option 'dotglob'.
Enables shell option 'execfail'.
Enables shell option 'expand_aliases'.
Enables shell option 'extdebug'.
Enables shell option 'extglob'.
Enables shell option 'extquote'.
Enables shell option 'failglob'.
Enables shell option 'force_fignore'.
Enables shell option 'cdable_vars'.
Enables shell option 'cdspell'.
Enables shell option 'checkhash'.
Enables shell option 'checkjobs'.
Enables shell option 'checkwinsize'.
Enables shell option 'cmdhist'.
Enables shell option 'compat31'.
Enables shell option 'compat32'.
Enables shell option 'compat40'.
Enables shell option 'compat41'.
Enables shell option 'compat42'.
Enables shell option 'complete_fullquote'.
Prints all lines containing the word "hello" in the file "world.txt".
Prints all lines containing the word "hello" in the file "world.txt", case insensitive.
Prints all lines containing the word "hello" in the file "world.txt", case sensitive.
Prints all lines containing the word "hello" in the file "world.txt", case insensitive, with line numbers.
Prints all lines containing the word "hello" in the file "world.txt", case sensitive, with line numbers.
Searches for the string "hello" in all files in the current directory and its subdirectories.
Searches for the string "hello" in all files in the current directory and its subdirectories, case insensitive.
Prints the value of the 'HOME' shell variable.
Prints the value of the 'PATH' shell variable.
Prints the value of the 'SHELL' shell variable.
Prints the value of the 'USER' shell variable.
Prints the value of the 'TERM' shell variable.
Prints the value of the 'HOSTNAME' shell variable.
Enables shell option 'cdable_vars'.
Enables shell option 'cdspell'.
Enables shell option 'checkhash'.
Enables shell option 'checkjobs'.
Enables shell option 'checkwinsize'.
Enables shell option 'cmdhist'.
Enables shell option 'compat31'.
Enables shell option 'compat32'.
Enables shell option 'compat40'.
Enables shell option 'compat41'.
Enables shell option 'compat42'.
Enables shell option 'complete_fullquote'.
Enables shell option 'complete_overrides'.
Enables shell option 'direxpand'.
Enables shell option 'dirspell'.
Enables shell option 'dotglob'.
Enables shell option 'execfail'.
Prints the value of the 'RANDOM' shell variable.
Sets the value of the 'FOO' shell variable to 'bar'.
Prints the value of the 'PATH' shell variable.
Adds the directory '/foo/bar' to the end of the 'PATH' shell variable.
Prints the value of the 'HOME' shell variable.
Sets the value of the 'FOO' shell variable to 'bar', if it is not already set.
Prints the value of the 'USER' shell variable.
Sets the value of the 'FOO' shell variable to 'bar', if it is set.
Prints all lines containing the word "Linux" in the file "system-info".
Prints all lines containing the word "Linux" in the file "system-info", case insensitive.
Prints all lines in the file "system-info" that start with the word "Linux".
Prints all lines in the file "system-info" that end with the word "Linux".
Execute 2 and write output to standard output and file ${LOG_FILE}
Execute 3 and write output to standard output and file ${LOG_FILE}
Execute 4 and write output to standard output and file ${LOG_FILE}
Execute 5 and write output to standard output and file ${LOG_FILE}
Execute 6 and write output to standard output and file ${LOG_FILE}
Execute 7 and write output to standard output and file ${LOG_FILE}
Execute 8 and write output to standard output and file ${LOG_FILE}
Execute cat /tmp/iostat.running every 10 seconds
Execute cat /tmp/disk_usage.log every 5 minutes
Execute pwd every second
Execute date every second
Execute cal every second
Execute whoami every second
Execute mysqladmin -u root -pXXXXX processlist every second and append output to /root/plist.log
Execute ps aux | grep tablename every second and append output to /root/plist.log
Execute 'tail -f -n 50 mylogfile.txt | ccze' every 5 seconds and display with color support
Execute 'tail -f -n 100 mylogfile.txt | ccze' every 10 seconds and display with color support
Execute 'tail -f -n 200 mylogfile.txt | ccze' every 15 seconds and display with color support
Execute 'tput setaf 2; echo bar' with color support every 2 seconds
Execute 'tput setaf 3; echo baz' with color support every 2 seconds
Execute 'tput setaf 4; echo qux' with color support every 2 seconds
Execute 'tput setaf 5; echo quux' with color support every 2 seconds
Execute 'tput setaf 6; echo corge' with color support every 2 seconds
Execute 'tput setaf 7; echo grault' with color support every 2 seconds
Execute 'tput setaf 8; echo garply' with color support every 2 seconds
Execute 'tput setaf 9; echo waldo' with color support every 2 seconds
Execute 'tput setaf 10; echo fred' with color support every 2 seconds
Execute 'tput setaf 11; echo plugh' with color support every 2 seconds
Execute 'tput setaf 12; echo xyzzy' with color support every 2 seconds
Execute awk script script.awk that exists in $PATH with argument arg1
Execute awk script script.awk with argument arg1
Execute awk script script.awk with argument arg1 and pipe the output to less
Exit the shell immediately if a simple command exits with a non-zero status
If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully
Exit the shell immediately if a command is found but not executed
If set, the shell does not inherit any environment variables from the shell's parent process
If set, bash ignores SIGTERM (the "kill" signal)
If set, bash prompts the user for confirmation before exiting if there are any unsaved changes
Exit the shell if any command in a pipeline returns a non-zero status
Exit the shell if any variable is undefined
Exit the shell if any command in a subshell exits with a non-zero status
Exits from script with exit code 0.
Expands `whoami` as current user name, and adds resulted path to the directory stack.
Expands `whoami` as current user name, and changes directory to the user's home directory.
Export variable PS1 as the current username @ the hostname
Export variable PS2 as a > symbol
Export variable PS3 as a # symbol
Export variable PS4 as a + symbol
Extract 8 bytes as an unsigned integer that is $o offset into $pkg
Extract 16 bytes as an unsigned integer that is $o offset into $pkg
Extract 32 bytes as an unsigned integer that is $o offset into $pkg
Extract 64 bytes as an unsigned integer that is $o offset into $pkg
Extract 128 bytes as an unsigned integer that is $o offset into $pkg
Extract 8 bytes as an unsigned integer that is $o offset into $rpm
Extract 16 bytes as an unsigned integer that is $o offset into $rpm
Extract 32 bytes as an unsigned integer that is $o offset into $rpm
Extract 64 bytes as an unsigned integer that is $o offset into $rpm
Extract 128 bytes as an unsigned integer that is $o offset into $rpm
Extract any line in file1.txt which does not appear as the first ; delimited entry in file2.txt
Extract any line in file1.txt which does not appear as the second ; delimited entry in file2.txt
Extract any line in file1.txt which does not appear as the third ; delimited entry in file2.txt
Extract any line in file1.txt which does not appear as the fourth ; delimited entry in file2.txt
Get all files that start with 'my'
Get all files that end with '.html'
Extract tar.gz archive and go into the directory that would normally be created by extracting it.
Extract tar.gz archive and go into the directory that would normally be created by extracting it.
Extract tar.gz archive and go into the directory that would normally be created by extracting it.
Extracts a bz2 file.
Extracts a gz file.
Extracts a tar file.
Filter contents of 'file' through awk commands written in script.awk, display the result.
Use grep to find all lines in 'file' containing 'pattern'.
Use grep to find all lines in 'file' containing 'pattern', display only the matching part of the line.
Use grep to find all lines in 'file' not containing 'pattern'.
Find all files in current directory and subdirectories that contain 'pattern'.
Filters out all empty lines from the output of the command crontab -u $user -l ignoring errors
Filters out all lines that don't contain the word "cron" from the output of the command crontab -u $user -l ignoring errors
Find all DNS records for 'www.google.com'
Find the MX record for 'google.com'
Find the TXT record for 'google.com'
Find all files/directories 2 levels down the current directory that are enlisted in file 1
Find all files/directories 3 levels down the current directory that are enlisted in file 1
Find all files/directories 4 levels down the current directory that are enlisted in file 1
Find all files/directories 5 levels down the current directory that are enlisted in file 1
Find all files/directories 6 levels down the current directory that are enlisted in file 1
Find all files/directories 7 levels down the current directory that are enlisted in file 1
Find all files/directories 8 levels down the current directory that are enlisted in file 1
Find all files/directories 9 levels down the current directory that are enlisted in file 1
Find all files/directories with 'my key phrase' in their names under current directory
Find the directory with least access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Find the directory with most access time under current directory and assign it to $filename
Finds all files with the extension .txt in the current directory.
Finds all files with the extension .txt in the home directory.
Finds real time report in a 'sleep 2' command execution statistic.
Finds real time report in a 'sleep 3' command execution statistic.
Finds real time report in a 'sleep 4' command execution statistic.
For each line in 'file', print result =  followed by the line backwards.
For each line in 'file', print the line in reverse.
Print the first 10 lines of 'file'.
Print the last 10 lines of 'file'.
Print lines containing 'pattern' in 'file'.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 7.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 30.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled day of the month to 1.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled month to Jan.
Create a new directory named dir
Remove the directory named dir
Change the working directory to dir
Print the working directory
Forcibly create symbolic links in target directory ~/staging for all files located in directory ~/mirror
Create a symbolic link named "file" in the current working directory that points to "/path/to/file"
Create a symbolic link named "file" in the directory "dir" that points to "/path/to/file"
Print the first column of a file
Print the second column of a file
Print the third column of a file
Print the fourth column of a file
Generate a list of all files in the current directory
Generate a list of all files in the current directory, including hidden files
Generate a list of all files in the current directory, including hidden files, sorted by modification time
Generate a list of all files in the current directory, including hidden files, sorted by alphabetical order
List all files in the current directory, including hidden files
List all files in the current directory, sorted by modification time
List all files in the current directory, sorted by size
Display the amount of free space on the filesystem containing file
Display statistics about disk usage for the current directory
Get the actual grep exectuable path
Get the actual awk exectuable path
Get the actual sed exectuable path
Get the actual curl exectuable path
Get the actual tar exectuable path
Get the actual gzip exectuable path
Get the actual gunzip exectuable path
Get the actual bzip2 exectuable path
Gets IP address of 'en1' network interface.
Gets IP address of 'wlp2s0' network interface.
Gets IP address of all active network interfaces in system.
Gets IP addresses of all network interfaces.
Gets the MAC address of all network interfaces.
Gets the IP address of a specific network interface.
Gets MAC address of en1 network interface.
Gets MAC address of en2 network interface.
Gets MAC address of en3 network interface.
Gets MAC address of en4 network interface.
Gets MAC address of fw0 network interface.
Gets MAC address of fw1 network interface.
Gets MAC address of fw2 network interface.
Gets MAC address of fw3 network interface.
Gets MAC address of fw4 network interface.
Gets MAC address of mfib0 network interface.
Gets MAC address of mfib1 network interface.
Gets MAC address of mfib2 network interface.
Gets MAC address of lo0 network interface.
Gets MAC address of gif0 network interface.
Gets MAC addresses of all IP6 network interfaces.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Grab variable = value pairs from a windows style .ini file into the current shell.
Get all lines from a file that contain a certain word.
Get all lines from a file that contain a certain word, ignoring case.
Get all lines from a file that do not contain a certain word.
Count the number of times a certain word appears in a file.
Print out every line in a file that contains a certain word.
Print out every line in a file that does not contain a certain word.
Print out every line in a file that contains a certain word, in reverse order.
Rename all files matching file*.txt to have the extension .bak
Copy all files matching file*.txt to the directory backup
Move all files matching file*.txt to the directory backup
Immediately kill all processes listening on TCP port 3000.
Immediately kill all processes listening on TCP port 3001.
Immediately kill all processes listening on TCP port 3002.
Immediately kill all processes listening on TCP port 3003.
Immediately kill all processes listening on TCP port 3004.
Immediately kill all processes listening on TCP port 3005.
Immediately kill all processes listening on TCP port 3006.
Immediately kill all processes listening on TCP port 3007.
Immediately kill all processes listening on TCP port 3008.
Print all lines of a file that contain the word "bash"
Print all lines of a file that do not contain the word "bash"
Print all lines of a file that contain the word "Bash"
Print all lines of a file that do not contain the word "Bash"
Print all lines of a file that contain the word "bash" in any case
Print all lines of a file that do not contain the word "bash" in any case
Print all lines of a file that contain the word "Bash" in any case
Print the first 10 lines of a file
Print the last 10 lines of a file
Print the first 10 characters of each line of a file
Print the last 10 characters of each line of a file
Print lines 1-10 of a file
Print lines 11-20 of a file
Insert | every 30 characters in file longline
Insert _ every 30 characters in file longline
Insert * every 30 characters in file longline
Insert + every 30 characters in file longline
Insert = every 30 characters in file longline
Insert - every 30 characters in file longline
Insert the current date on line 15 of test.html
Insert the current time on line 15 of test.html
Insert the current user on line 15 of test.html
Insert the current working directory on line 15 of test.html
Append the contents of file2 to file1
Copy file1 to file2
Create an empty file named file1
Delete file1
Display the first 10 lines of file1
Display the last 10 lines of file1
Sort the contents of file1 in reverse alphabetical order
List all files in the current directory, including hidden files
List all files in the current directory, excluding hidden files
Move to the previous directory
Move to the home directory
Create a new directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
List all existing environment variables in the current shell.
List all files in the current directory, including hidden files
List all files in the current directory, sorted by size
List each subdirectory name composing the current working directory
List all files and subdirectories in the current working directory
List all files in the current working directory
List all files in the current directory that contain the string "bash"
List all files in the current directory that end with the ".sh" extension
Print the contents of the file "bashrc" to the screen
Print the number of lines in the file "bashrc"
List all files in the current directory whose names contain 'X'
List all files in the current directory whose names do not contain 'X'
List all files in the current directory that are executable
List all files in the current directory, including hidden files.
List all files in the current directory, sorted by size.
List all files in the current directory, sorted by modification time.
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, sorted by modification time
List all files in the current directory whose names contain the letter "x"
List all files in the current directory whose names end with the letter "x"
List all files in the current directory whose names start with the letter "x"
List all files in the current directory that contain the string "bash"
List all files in the current directory that end with the ".sh" extension
Print the contents of the file "bashrc" to the screen
Print the number of lines in the file "bashrc"
Print the last 10 lines of the file "bash_history"
Find all files in the current directory that contain the string "bash" and print their names to the screen
List all files in the current directory that begin with a lowercase letter
List all files in the current directory that end with a period
Get the first column of data from infile
Get the second column of data from infile
Get the third column of data from infile
Get the fourth column of data from infile
Generate a list of all the files in the current directory that begin with the letter 'a'
Move the file 'temp.txt' into the subdirectory 'test'
Copy the file 'temp.txt' into the subdirectory 'test'
Display the contents of the file 'temp.txt'
Display the contents of the file 'temp.txt', pausing at each page of output
Generate a report of all users on the system
Generate a report of all groups on the system
Generate a report of all currently logged in users
Generate a report of all processes running as the user 'www-data'
Join lines of two files on a common field
Split a file into multiple pieces
Remove duplicate lines from a file
Shuffle lines in a file
Reverse the order of lines in a file
Sort lines in a file
Print the first 10 lines of a file
Modify and rewrite 'file' replacing the second instance of foo on each line with bar
Modify and rewrite 'file' replacing the third instance of foo on each line with bar
Modify and rewrite 'file' replacing all instances of foo on each line with bar
Modify and rewrite 'file' replacing the first instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the second instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Create a new cpuset called 'newset'
Attach the task with PID '1234' to the cpuset 'newset'
Set CPU 0 and 1 to be online in the cpuset 'newset'
Mount ntfs-3g filesystem /dev/mapper/myvolume on /media/volume
Mount ntfs-3g filesystem /dev/sda1 on /media/volume
Mount ntfs-3g filesystem /dev/sdb2 on /media/volume
Mount ntfs-3g filesystem /dev/sdc3 on /media/volume
Mount ntfs-3g filesystem /dev/sdd4 on /media/volume
Mount ntfs-3g filesystem /dev/sde5 on /media/volume
Mount ntfs-3g filesystem /dev/sdf6 on /media/volume
Mount ntfs-3g filesystem /dev/sdg7 on /media/volume
Mount proc file system on /var/snmp4/proc
Mount proc file system on /var/snmp5/proc
Mount proc file system on /var/snmp6/proc
Mount proc file system on /var/snmp7/proc
Mount proc file system on /var/snmp8/proc
Mount proc file system on /var/snmp9/proc
Mount proc file system on /var/snmp10/proc
Mount proc file system on /var/snmp11/proc
Mount proc file system on /var/snmp12/proc
Mount proc file system on /var/snmp13/proc
Mount proc file system on /var/snmp14/proc
Mount proc file system on /var/snmp15/proc
Mount proc file system on /var/snmp16/proc
Number each line in foobar as right-justified zero padded to a width of 9
Number each line in foobar as left-justified zero padded to a width of 9
Number each line in foobar as right-justified space padded to a width of 9
Number each line in foobar as left-justified space padded to a width of 9
Numerically sort file table by the fourth character of the second field, ignoring leading spaces
Numerically sort file table by the fifth character of the second field, ignoring leading spaces
Numerically sort file table by the sixth character of the second field, ignoring leading spaces
Numerically sort file table by the seventh character of the second field, ignoring leading spaces
Numerically sort file table by the eighth character of the second field, ignoring leading spaces
Numerically sort file table by the ninth character of the second field, ignoring leading spaces
Output lines 16224 to 16482 of 'file', and stop reading 'file' after line 16482.
Output the first ten lines of 'file'.
Output the last ten lines of 'file'.
Output all but the last ten lines of 'file'.
Output all but the first ten lines of 'file'.
Output all lines of 'file' containing the word 'bash'.
Output all lines of 'file' not containing the word 'bash'.
Output all lines of 'file' containing the word 'bash' followed by a number.
Output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.
Output all lines starting at line 16224 until the end of the file.
Output all lines from the beginning of the file until line 16482.
Using head and tail, output all lines starting at line 16224 until the end of the file.
Page through the standard output of 'make' using less.
Prepend date to ping output to google.com
Prepend date and time to ping output to google.com
Append date to ping output to google.com
Prepends date to ping output
Prepends time to ping output
Appends date to ping output
Appends time to ping output
Outputs only date for each line of ping output
Print operator: followed by the full name of ${USER}
Print the current working directory
List the contents of the current working directory
Change the current working directory to the user's home directory
Create a new directory named 'foo' in the current working directory
Print 2000 astarisk ('*')
Print 3000 astarisk ('*')
Print 4000 astarisk ('*')
Print 5000 astarisk ('*')
Print 6000 astarisk ('*')
Print 7000 astarisk ('*')
Print 8000 astarisk ('*')
Print 9000 astarisk ('*')
Print the first line of 123456789
Print the last line of 123456789
Print the first 2 lines of 123456789
Print the last 2 lines of 123456789
Print the first 3 lines of 123456789
Print the last 3 lines of 123456789
Print the first 4 lines of 123456789
Print the last 4 lines of 123456789
Print the first 5 lines of 123456789
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print A record for domain 'domain.' from 'some.other.ip.address' nameserver
Print A record for domain 'domain.' from 8.8.8.8 nameserver
Print MX record for domain 'domain.' from 8.8.8.8 nameserver
Print a line of $variable '-' characters
Print a line of $variable '=' characters
Print a line of $variable '*' characters
Print a line of $variable '+' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable ',' characters
Print a line of $variable '.' characters
Print a randomly sorted list of numbers from 1 to 10 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 100 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 1000 to file /tmp/lst and the screen followed by  -------
Print a tab separated table in table.txt with cell borders
Print a tab separated table in table.txt without cell borders
Print a comma separated table in table.txt with cell borders
Print amount of space available on the file system containg path to the current working directory.
Print amount of space available on the file system containg path to the home directory.
Print amount of space available on the file system containg path to the root directory.
Print amount of space available on the file system containg path to the usr directory.
Print amount of space available on the file system containg path to the var directory.
Print and save the ping results of 50 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 75 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print content of '2' file
Print content of '3' file
Print content of '4' file
Print content of '5' file
Print content of '6' file
Print content of '7' file
Print content of '8' file
Print content of '9' file
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated decimal bytes on a single line
Print contents of file as space separated unsigned decimal bytes on a single line
Print contents of file as space separated signed decimal bytes on a single line
Print contents of file as space separated ASCII characters on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated unsigned decimal words on a single line
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as comma separated hexadecimal bytes on a single line
Print contents of file as colon separated hexadecimal bytes on a single line
Print contents of file as semicolon separated hexadecimal bytes on a single line
Print the first column of a CSV file
Print the last column of a CSV file
Use grep to find all lines in a file containing the word "foo"
Use grep to find all lines in a file containing the word "bar"
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with % character removed
Print each column in file with ^ character removed
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each logged in user's full name
Print the full name of the user with the UID of 1000
Print the full name of the user with the UID of 1001
Print the full name of the user with the UID of 1002
Print the full name of the user with the UID of 1003
Print the full name of the user with the UID of 1004
Print every 16 bytes of standard input in groups of two followed by a space
Print every 8 bytes of standard input in groups of two followed by a space
Print every 4 bytes of standard input in groups of two followed by a space
Print last 20 commands in history
Print last 30 commands in history
Print last 40 commands in history
Print the number of lines, words and bytes for each file recursively
Print the number of words for each file recursively
Print lines in the sorted contents of a.txt that are not in the sorted contents of b.txt
Print lines in the sorted contents of a.txt that are in the sorted contents of b.txt
Print lines in the sorted contents of a.txt that are in the sorted contents of b.txt, with a tab character between the columns
Print lines unique to file1
Print lines unique to file2
Print linker search path using gcc formatted on new lines
Print the current user's login name
Print the current user's login name
Print the current user's UID and GID
Print the groups the current user is in
Print the current working directory
Change the current working directory
List the contents of the current working directory
Copy files and directories
Move or rename files and directories
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 50 using up to 4 processes
Print numbers from 1 to 60 using up to 4 processes
Print numbers from 1 to 70 using up to 4 processes
Print numbers from 1 to 80 using up to 4 processes
Print numbers from 1 to 90 using up to 4 processes
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 100
Print numbers from 1 to 1000
Print numbers from 1 to 10000
Print numbers from 100 to 200
Print numbers from 1000 to 2000
Print the MX record for domain example.com
Print the TXT record for domain example.com
Print the NS record for domain example.com
Print the SOA record for domain example.com
Print the A record for domain example.com
Print the numbers 1 through 10
Print the numbers 11 through 20
Print the numbers 21 through 30
Print the numbers 31 through 40
Print the numbers 41 through 50
Print space separated list of numbers from $start to $end
Print comma separated list of numbers from $start to $end
Print newline separated list of numbers from $start to $end
Print space separated numbers from 1 to 10
Print space separated numbers from 1 to 100
Print space separated numbers from 1 to 1000
Print space separated numbers from 1 to 10000
Print space separated numbers from 1 to 5
Print newline separated numbers from 1 to 5
Print comma separated numbers from 1 to 5
Print tab separated numbers from 1 to 5
Print sub domains of mydomain.com
Print the A record for mydomain.com
Print the MX record for mydomain.com
Print the IP addresses for the current host name
Get the current hostname
Get the domain name associated with the current hostname
Get the fully qualified domain name associated with the current hostname
Get all IP addresses associated with the current hostname
Print the IP addresses for the current host name
Get the canonical hostname
Get the IP address for a hostname
Resolve an IP address to a hostname
Print the SHA-1 message digest of /path/to/destination/file
Print the SHA-256 message digest of /path/to/destination/file
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common sixth whitespace separated fields in file1 and file2
Print the common seventh whitespace separated fields in file1 and file2
Print the common eighth whitespace separated fields in file1 and file2
Print the common ninth whitespace separated fields in file1 and file2
Print the contents of $FILE starting from line 3
Print the contents of $FILE starting from line 4
Print the contents of $FILE starting from line 5
Print the contents of $FILE starting from line 6
Print the contents of $FILE starting from line 7
Print the contents of $FILE starting from line 8
Print the contents of $FILE starting from line 9
Print the current working directory
List all files in the current working directory
Change the current working directory to the user's home directory
Create a new directory
Remove a directory
Move a file or directory
Copy a file or directory
Remove a file
Print the contents of a file
Print the current working directory
List all files in the current working directory
Change the current working directory to the user's home directory
Create a new directory
Remove a directory
Move or rename a file or directory
Copy a file or directory
Print the day 2 days ago
Print the day 3 days ago
Print the day 4 days ago
Print the day 5 days ago
Print the day 6 days ago
Print the day 7 days ago
Print the day 8 days ago
Print the day 9 days ago
Print the day 10 days ago
Print the day 11 days ago
Print the day 12 days ago
Print the first word of every line in input
Print the last word of every line in input
Print the second word of every line in input
Print the third word of every line in input
Print the fourth word of every line in input
Print the git log in a tabular form
Print the git log for the last 10 commits
Print the git log for a specific author
Print the git log for a specific committer
Print the git log for a specific date range
Print the git log for a specific file
Print the current working directory
List the contents of the current working directory
Change the current working directory to the user's home directory
Create a new directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
Remove a file
Print the contents of a file
Display the last few lines of a file
Display the first few lines of a file
Print the number of characters in file.txt.
Print the number of words in file.txt.
Print the number of bytes in file.txt.
Print the number of fields in file.txt.
Print the lines from standard input in reverse order
Print the lines from standard input in random order
Print the lines from standard input in reverse alphabetical order
Print the lines from standard input in alphabetical order
Print the first $opt lines of file $OPTARG
Print the last $opt lines of file $OPTARG
Print all but the last $opt lines of file $OPTARG
Print all but the first $opt lines of file $OPTARG
Print lines $opt through $OPTARG of file
Print lines $opt through the end of file
Reverse the order of lines in file $OPTARG
Sort the lines in file $OPTARG
Sort the lines in file $OPTARG in reverse order
Print all lines of file /etc/passwd that contain the word "daemon"
Print all lines of file /etc/services that do not contain the word "ssh"
Print all lines of file /etc/group that end with the character "d"
Print all lines of file /etc/shadow that contain the character "!"
Print what year it was 1 day ago
Print what year it was 10 days ago
Print what year it was 100 days ago
Print working directory separated by newlines instead of forward slashes
Print working directory in reverse
Use tr to swap the characters in the working directory
Prints all child processes of a process with id 20238, separated with comma.
Prints all processes running on the system, in a tree-like format.
Prints the calendar of July, 2009.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints elapsed time of command execution.
Prints real path of the folder containing $0 file.
Prints the current working directory.
Prints the contents of a file.
Prints the contents of a file, one page at a time.
Prints the first 10 lines of a file.
Prints the last 10 lines of a file.
Copies a file.
Moves or renames a file.
Prints the value of the 'HOME' shell variable.
Prints the value of the 'PATH' shell variable.
Prints the value of the 'SHELL' shell variable.
Prints the value of the 'USER' shell variable.
Prints the value of the 'LOGNAME' shell variable.
Prints the value of the 'HOSTNAME' shell variable.
Prints the amount of time the system has been running.
Prints the current date and time.
Prints the current working directory.
Lists the contents of the current working directory.
Push the directory containing the first existing command found in all arguments to the directory stack.
Push the directory containing the first existing command found in all arguments to the directory stack.
Push the directory containing the first existing command found in all arguments to the directory stack.
Push the directory containing the first existing command found in all arguments to the directory stack.
Push the directory containing the first existing command found in all arguments to the directory stack.
Push the directory containing the first existing command found in all arguments to the directory stack.
Pushes current folder to the directory stack.
Pushes current folder to the directory stack.
Pushes current folder to the directory stack.
Pushes current folder to the directory stack.
Pushes directory path that saved in $line variable to the dirs stack, expanding symbol '~', if present, as home folder path.
Pushes the current working directory to the top of the directory stack.
Pushes the previous working directory to the top of the directory stack.
Read 10 bytes from $0 and print them by replacing the set '\000-\377' with '#'
Read 20 bytes from $0 and print them by replacing the set '\000-\377' with '#'
Read 30 bytes from $0 and print them by replacing the set '\000-\377' with '#'
Read 40 bytes from $0 and print them by replacing the set '\000-\377' with '#'
Read all *.txt file paths under /foo into a Bash array ($files)
Read all file paths under /foo into a Bash array ($files)
Read all directory paths under /foo into a Bash array ($dirs)
List all *.txt files under /foo
List all files under /foo
Read hexadecimal bytes from device /dev/midi2
Read hexadecimal bytes from device /dev/midi3
Read hexadecimal bytes from device /dev/midi4
Read hexadecimal bytes from device /dev/midi5
Read hexadecimal bytes from device /dev/midi6
Read hexadecimal bytes from device /dev/midi7
Read hexadecimal bytes from device /dev/midi8
Read hexadecimal bytes from device /dev/midi9
Read hexadecimal bytes from device /dev/midi10
Read hexadecimal bytes from device /dev/midi11
Read hexadecimal bytes from device /dev/midi12
Read hexadecimal bytes from device /dev/midi13
Read hexadecimal bytes from device /dev/midi14
Read hexadecimal bytes from device /dev/midi15
Read hexadecimal bytes from device /dev/midi16
Recursively bind /sys to /var/snmp3/sys
Recursively bind /proc to /var/snmp3/proc
Recursively bind /run to /var/snmp3/run
Recursively bind /dev/pts to /var/snmp3/dev/pts
Mount the USB drive at /dev/sdb1 to /media/usb0
Recursively bind /dev to /var/snmp3/dev
Recursively bind /proc to /var/snmp3/proc
Recursively bind /run to /var/snmp3/run
Recursively change the owner and group of subdir2 to user2
Recursively change the owner and group of subdir3 to user3
Recursively change the owner and group of subdir4 to user4
Recursively change the owner and group of subdir5 to user5
Recursively change the owner and group of subdir6 to user6
Recursively change the owner and group of subdir7 to user7
Recursively change the owner and group of subdir8 to user8
Recursively change the owner and group of subdir9 to user9
Recursively changes group ownership of everything in a '/home/user2/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user3/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user4/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user5/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user6/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user7/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user8/project/dev' folder to 'project_dev'.
Recursively changes group ownership of everything in a '/home/user9/project/dev' folder to 'project_dev'.
Prints the first 10 lines of a file.
Prints the last 10 lines of a file.
Shows all files in a directory, including hidden files.
Shows information about a file, including its permissions.
Shows the contents of a file.
Copies a file from one location to another.
Moves a file from one location to another.
Prints the first column of output from 'ps -ef'
Prints the second column of output from 'ps -ef'
Prints the third column of output from 'ps -ef'
Prints the fourth column of output from 'ps -ef'
Prints the fifth column of output from 'ps -ef'
Prints the sixth column of output from 'ps -ef'
Prints the seventh column of output from 'ps -ef'
Prints the eighth column of output from 'ps -ef'
Remount / with read and write permission
Mount /dev/sda1 on /mnt
Mount /dev/sda2 on /mnt
Mount /dev/sda3 on /mnt
Mount /dev/fd0 on /mnt
Create a mount point for CD-ROM
List all the files in /etc/
Change the working directory to /etc/
Create a new directory called test in /etc/
Remove the directory called test in /etc/
Copy the file called foo from the current directory to /etc/
Move the file called foo from the current directory to /etc/
Remount /system as read only
Remount /boot as read only
Remount /home as read only
Remount / as read only
Remount /proc as read only
Remount /system with read and write permission
Mount /system with read and write permission
Mount /system with read-only permission
Mount /system with read and write permission for user
Remount rfs filesystem /dev/stl13 on /system with read and write permission
Remount rfs filesystem /dev/stl14 on /system with read and write permission
Remount rfs filesystem /dev/stl15 on /system with read and write permission
Remount rfs filesystem /dev/stl16 on /system with read and write permission
Remount rfs filesystem /dev/stl17 on /system with read and write permission
Remount rfs filesystem /dev/stl18 on /system with read and write permission
Remount rfs filesystem /dev/stl19 on /system with read and write permission
Remount rfs filesystem /dev/stl20 on /system with read and write permission
Remount rfs filesystem /dev/stl21 on /system with read and write permission
Remount rfs filesystem /dev/stl22 on /system with read and write permission
Remount rfs filesystem /dev/stl23 on /system with read and write permission
Remount rfs filesystem /dev/stl24 on /system with read and write permission
Remount rfs filesystem /dev/stl25 on /system with read and write permission
Remount rfs filesystem /dev/stl26 on /system with read and write permission
Remount rfs filesystem /dev/stl27 on /system with read and write permission
Remount rfs filesystem /dev/stl28 on /system with read and write permission
Remount yaffs2 filesystem /dev/block/mtdblk5 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk6 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk7 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk8 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk9 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk10 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk11 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk12 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk13 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk14 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk15 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk16 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk17 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk18 to /system as read only
Remount yaffs2 filesystem /dev/block/mtdblk19 to /system as read only
List all mounted filesystems
Mount the CD-ROM drive
Mount the floppy drive
Remount subtree /usr/sbin on /path/to/chroot/jail/usr/sbin as a bind
Remount subtree /usr/lib on /path/to/chroot/jail/usr/lib as a bind
Remount subtree /usr/local/bin on /path/to/chroot/jail/usr/local/bin as a bind
Remount subtree /usr/local/sbin on /path/to/chroot/jail/usr/local/sbin as a bind
List all the files in the current directory
List all the files in the current directory, including hidden files
List all the files in the current directory, including hidden files, in long format
Change the working directory to the user's home directory
Remove all files except for those with the .txt extension in the current directory
Remove all files except for those with the .jpg extension in the current directory
Remove all files except for those with the .png extension in the current directory
Remove all files except for those with the .gif extension in the current directory
Remove the 456_ prefix from all filenames of .txt files in current directory.
Remove the 789_ prefix from all filenames of .txt files in current directory.
Remove the 012_ prefix from all filenames of .txt files in current directory.
Remove the 345_ prefix from all filenames of .txt files in current directory.
Remove the path $1 from the PATH environment variable
Add the path $1 to the PATH environment variable
Print all the paths in the PATH environment variable
Removes alias with 'ls' name.
Removes alias with 'grep' name.
Removes alias with 'mv' name.
Removes alias with 'rm' name.
Removes alias with 'mkdir' name.
Removes alias with 'cp' name.
Removes all files from current folder but 10 newest ones.
Removes all files from current folder but 15 newest ones.
Removes all files from current folder but 20 newest ones.
Removes all files from current folder but 25 newest ones.
Removes all files from current folder but 30 newest ones.
Removes all files from current folder but 35 newest ones.
Removes all files from current folder but 40 newest ones.
Removes all files from current folder but 45 newest ones.
Removes shell alias with name 'ls'.
Removes shell alias with name 'grep'.
Removes shell alias with name 'mv'.
Removes shell alias with name 'cp'.
Removes shell alias with name 'rm'.
Removes shell alias with name 'mkdir'.
Removes shell alias with name 'rmdir'.
Removes shell alias with name 'cat'.
Removes shell alias with name 'more'.
Removes shell alias with name 'less'.
Removes shell alias with name 'vi'.
Removes shell alias with name 'vim'.
Rename blah2 to blah2-new
Rename blah3 to blah3-new
Rename blah4 to blah4-new
Rename blah5 to blah5-new
Rename blah6 to blah6-new
Rename blah7 to blah7-new
Rename blah8 to blah8-new
Rename blah9 to blah9-new
Rename blah10 to blah10-new
Rename file1 to file1-new
Rename file2 to file2-new
Rename file3 to file3-new
Rename file4 to file4-new
Rename file5 to file5-new
Rename dir1 to dir1-new
Rename dir2 to dir2-new
Rename dir3 to dir3-new
Rename dir4 to dir4-new
Rename file0002.txt to 2.txt
Rename file0003.txt to 3.txt
Rename file0004.txt to 4.txt
Rename file0005.txt to 5.txt
Rename file0006.txt to 6.txt
Rename file0007.txt to 7.txt
Rename file0008.txt to 8.txt
Rename file0009.txt to 9.txt
Rename file0010.txt to 10.txt
Rename file0011.txt to 11.txt
Rename file0012.txt to 12.txt
Rename file002abc.txt to abc2.txt
Rename file003abc.txt to abc3.txt
Rename file004abc.txt to abc4.txt
Rename file005abc.txt to abc5.txt
Rename file006abc.txt to abc6.txt
Rename file007abc.txt to abc7.txt
Rename file008abc.txt to abc8.txt
Rename file009abc.txt to abc9.txt
Rename file010abc.txt to abc10.txt
Rename file011abc.txt to abc11.txt
Rename file012abc.txt to abc12.txt
Rename all .html files to .txt
Rename all .htm files to .txt
Rename all .xml files to .txt
Rename all .csv files to .txt
Rename all .js files to .txt
Rename all .jpg files, changing the string _h.jpg into _half.jpg.
Rename all .jpeg files, changing the string _h.jpeg into _half.jpeg.
Rename all .gif files, changing the string _h.gif into _half.gif.
Rename all .tif files, changing the string _h.tif into _half.tif.
Rename all .tiff files, changing the string _h.tiff into _half.tiff.
Print out the first 10 lines of image.png
Print out the last 10 lines of image.png
Print out the middle 10 lines of image.png
Print out all but the first 10 lines of image.png
Print out all but the last 10 lines of image.png
Print out only the even numbered lines of image.png
Print out only the odd numbered lines of image.png
Replace all newlines from standard input except the last with spaces
Remove all leading whitespace from standard input
Remove all trailing whitespace from standard input
Replace all whitespace from standard input with a single space
Print only lines from standard input that contain at least one alphabetic character
Print only lines from standard input that contain at least one non-alphabetic character
Print only lines from standard input that contain at least one digit
Replace all newlines from standard input except the last with spaces
Remove all leading whitespace from standard input
Remove all trailing whitespace from standard input
Replace all whitespace with a single space from standard input
Print only lines from standard input that contain at least one non-whitespace character
Print only lines from standard input that contain at least one alphabetic character
Replace all newlines from standard input except the last with spaces
Remove all leading whitespace from standard input
Remove all trailing whitespace from standard input
Replace all whitespace with a single space from standard input
Print only lines from standard input that contain at least one alphabetic character
Print only lines from standard input that contain at least one numeric character
Print only lines from standard input that contain at least one alphabetic or numeric character
Replace all newlines with spaces in the contents of file
Replace all instances of "foo" with "bar" in file
Replace all instances of "foo" with "bar" in every file in directory
Append text to the end of file
Prepend text to the beginning of file
Display the first 10 lines of file
Display the last 10 lines of file
Display all lines of file containing "foo"
Display all lines of file not containing "foo"
Display all lines of file containing "foo" or "bar"
Display all lines of file containing "foo" and "bar"
Sort lines of file alphabetically
Sort lines of file numerically
Reverse the order of lines in file
Print the first column of space-separated values in file
Print the second column of space-separated values in file
Print the first three columns of space-separated values in file
List all files in the current directory, including hidden files
List all files in the current directory, sorted by size
List all files in the current directory, sorted by modification time
Show the amount of free space on the file system containing the current directory
Show the amount of free space on all mounted file systems
Report file system mounted at $path_in_question disk usage if canonical path $path_in_question is a mount point.
List all the files in the current directory.
List all the files in the current directory, including hidden files.
List all the files in the current directory, including hidden files, in long format.
Reports time consumed by command 'sleep 2' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 3' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 4' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 5' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 6' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 7' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 8' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 2' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 3' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 4' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 2'.
Reports time consumed by command 'sleep 3'.
Reports time consumed by command 'sleep 4'.
Reports time consumed by command 'sleep 5'.
Reports time consumed by command 'sleep 6'.
Reports time consumed by command 'sleep 7'.
Reports time consumed by command 'sleep 8'.
Reports time consumed by command 'sleep 9'.
Represent the current time as seconds since epoch and save it to variable 'TODAY'
Get the current time in seconds since epoch
Get the current time in seconds since the start of the day
Get the current time in seconds since the start of the month
Request A record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request AAAA record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request CNAME record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request MX record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request NS record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Request PTR record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG'
Run 'make' with parameter K_VERSION set to current kernel release.
Run 'make' with parameter K_VERSION set to current kernel release and output to file.
Run 'make' with parameter K_VERSION set to current kernel release and verbose output.
Run the command 'true' with an empty environment variable doSecond
Run the command 'true' with an empty environment variable doThird
Run the command 'true' with an empty environment variable doFourth
Run the command 'true' with an empty environment variable doFifth
Run the command 'true' with an empty environment variable doSixth
Run the command 'true' with an empty environment variable doSeventh
Run the command 'true' with an empty environment variable doEighth
Run the command 'true' with an empty environment variable doNinth
Run the command 'true' with an empty environment variable doTenth
Run the command 'true' with an empty environment variable doEleventh
Run the command 'true' with an empty environment variable doTwelfth
Run the command 'true' with an empty environment variable doThirteenth
Run the command 'true' with an empty environment variable doFourteenth
Run the command 'true' with an empty environment variable doFifteenth
Run the command 'true' with an empty environment variable doSixteenth
Run the command 'true' with an empty environment variable doSeventeenth
Run the command 'true' with an empty environment variable doEighteenth
Run the command 'true' with an empty environment variable doNineteenth
Run the command 'true' with an empty environment variable doSecond
Run the command 'true' with an empty environment variable doThird
Run the command 'true' with an empty environment variable doFourth
Run the command 'true' with an empty environment variable doFifth
Run the command 'true' with an empty environment variable doSixth
Run the command 'true' with an empty environment variable doSeventh
Run the command 'true' with an empty environment variable doEighth
Run the command 'true' with an empty environment variable doNinth
Run the command 'true' with an empty environment variable doTenth
Run the command 'true' with an empty environment variable doEleventh
Run the command 'true' with an empty environment variable doTwelfth
Run the command 'true' with an empty environment variable doThirteenth
Run the command 'true' with an empty environment variable doFourteenth
Run the command 'true' with an empty environment variable doFifteenth
Run the command 'true' with an empty environment variable doSixteenth
Run the command 'true' with an empty environment variable doSeventeenth
Run the command 'true' with an empty environment variable doEighteenth
Run the command 'true' with an empty environment variable doNineteenth
Runs 'tty' command in a subshell that is opened by built-in function 'false'.
Runs 'tty' command in a subshell that is opened by built-in function 'test'.
Runs 'tty' command in a subshell that is opened by built-in function '['.
Runs 'tty' command in a subshell that is opened by built-in function '[['.
Runs 'tty' command in a subshell that is opened by built-in function 'getopts'.
Runs 'tty' command in a subshell that is opened by built-in function 'hash'.
Runs 'tty' command in a subshell that is opened by built-in function 'pwd'.
Runs 'tty' command in a subshell that is opened by built-in function 'readonly'.
Runs 'tty' command in a subshell that is opened by built-in function 'shift'.
Runs 'tty' command in a subshell that is opened by built-in function 'times'.
Runs 'tty' command in a subshell that is opened by built-in function 'trap'.
Runs 'tty' command in a subshell that is opened by built-in function 'umask'.
Save IP addresses of the host name in variable ip
Get the hostname of the machine
Get the domain name of the machine
Get the network address of the machine
Get the broadcast address of the machine
Save the date in variable d
Save the user name in variable u
Save the host name in variable h
Save the current working directory in variable cwd
Save the contents of the file in variable f
Save the system information in variable sysinfo
Save number of lines with any-cased 'merge' from $COMMIT_EDITMSG file in 'MERGE' variable
Save number of lines with any-cased 'conflict' from $COMMIT_EDITMSG file in 'CONFLICT' variable
Save number of lines with any-cased 'error' from $COMMIT_EDITMSG file in 'ERROR' variable
Save the current date to variable 'Date'
Save the current time to variable 'Time'
Save the current year to variable 'Year'
Save the current month to variable 'Month'
Save the current day to variable 'Day'
Save the first two letters of the system host name to variable DC
Save the first three letters of the system host name to variable DCL
Save the first four letters of the system host name to variable DCLI
Save the first five letters of the system host name to variable DCLIN
Save the first six letters of the system host name to variable DCLINT
Save the first seven letters of the system host name to variable DCLINUX
Save the first eight letters of the system host name to variable DCLINUXA
Save the sha1 sum hash of ${my_iso_file} to variable sha1
Save the sha256 sum hash of ${my_iso_file} to variable sha256
Save the md5 sum hash of ${my_other_file} to variable md5
Save the sha1 sum hash of ${my_other_file} to variable sha1
Save the network node hostname append with '-', the current date and '.txt' into variable 'filename'
Save the output of the date command into variable 'output'
Save the output of the uname command into variable 'output'
Save the value of $USER into variable 'username'
Save the value of $HOME into variable 'home'
Save the short host name appended with .mysqldb in variable DBPREFIX
Save the FQDN host name appended with .mysqldb in variable DBPREFIX
Saves 'ps' output together with time report to a file 'time.txt'.
Saves 'df' output together with time report to a file 'time.txt'.
Saves 'top' output together with time report to a file 'time.txt'.
Saves 'free' output together with time report to a file 'time.txt'.
Saves 'uptime' output together with time report to a file 'time.txt'.
Saves printed calendar of February,1901 in positional variables.
Saves printed calendar of February,1902 in positional variables.
Saves printed calendar of February,1903 in positional variables.
Saves printed calendar of February,1904 in positional variables.
Saves printed calendar of February,1905 in positional variables.
Saves printed calendar of February,1906 in positional variables.
Saves printed calendar of February,1907 in positional variables.
Saves printed calendar of February,1908 in positional variables.
Saves printed calendar of February,1909 in positional variables.
Saves printed calendar of February,1910 in positional variables.
Saves printed calendar of February,1911 in positional variables.
Saves printed calendar of February,1912 in positional variables.
Saves printed calendar of February,1913 in positional variables.
Saves printed calendar of February,1914 in positional variables.
Saves printed calendar of February,1915 in positional variables.
Saves printed calendar of February,1916 in positional variables.
Saves printed calendar of February,1917 in positional variables.
Saves printed calendar of February,1918 in positional variables.
Saves printed calendar of February,1919 in positional variables.
Saves state of shell option 'nocaseglob' in an 'old_nocaseglob' variable.
Saves state of shell option 'nounset' in an 'old_nounset' variable.
Saves state of shell option 'pipefail' in an 'old_pipefail' variable.
Saves state of shell option 'posix' in an 'old_posix' variable.
Saves state of shell option 'privileged' in an 'old_privileged' variable.
Saves state of shell option 'radixsort' in an 'old_radixsort' variable.
Saves state of shell option 'shiftround' in an 'old_shiftround' variable.
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, in long format
Search for all occurrences of "foo" in bar.txt
Print the first 10 lines of foo.txt
Print the last 10 lines of foo.txt
Print the contents of foo.txt, one page at a time
Print the contents of foo.txt, one line at a time
Print the number of lines in foo.txt
Print the number of words in foo.txt
Search for ifconfig in the output of history and print 5 lines that precede and follow
Search for cat in the output of history and print 5 lines that precede and follow
Search for ls in the output of history and print 5 lines that precede and follow
Search for chmod in the output of history and print 5 lines that precede and follow
Search for vid=123 in all compressed files found under /my_home matching *log.20140227*
Search for vid=123 in all compressed files found under /my_home matching *log.20140228*
Search for vid=123 in all compressed files found under /my_home matching *log.20140229*
Search for vid=123 in all compressed files found under /my_home matching *log.20140301*
Search for vid=123 in all compressed files found under /my_home matching *log.20140302*
Search for vid=123 in all compressed files found under /my_home matching *log.20140303*
Search for vid=123 in all compressed files found under /my_home matching *log.20140304*
Search for vid=123 in all compressed files found under /my_home matching *log.20140305*
Search for vid=123 in all compressed files found under /my_home matching *log.20140306*
Search for vid=123 in all compressed files found under /my_home matching *log.20140307*
Search for vid=123 in all compressed files found under /my_home matching *log.20140308*
Search for vid=123 in all compressed files found under /my_home matching *log.20140309*
Search for vid=123 in all compressed files found under /my_home matching *log.20140310*
List all files in the current directory, including hidden files
List all files in the current directory, in long format
List all files in the current directory, in reverse alphabetical order
Search for line 111 in file active_record.rb with 2 lines of context
Search for line 222 in file active_record.rb with 2 lines of context
Search for line 333 in file active_record.rb with 2 lines of context
Search for line 444 in file active_record.rb with 2 lines of context
Search for line 555 in file active_record.rb with 2 lines of context
Search for line 666 in file active_record.rb with 2 lines of context
Search for line 777 in file active_record.rb with 2 lines of context
Search for line 888 in file active_record.rb with 2 lines of context
List all the files in the current directory
Change the working directory to the Desktop
Create a new directory called "test"
Set the 'noclobber' shell variable causing bash to return an error if you try to overwrite an existing file.
Set the 'errexit' shell variable causing bash to return an error if any command in a pipeline returns a non-zero exit status.
Set the 'nounset' shell variable causing bash to return an error if you try to use a variable that is not set.
Set the 'noclobber' shell option causing bash to print an error message if you try to overwrite an existing file with > or >>
Set the 'errexit' shell option causing bash to exit immediately if a command exits with a non-zero status
Set the 'nounset' shell option causing bash to print an error message if you try to use a variable that hasn't been set
Set the host name to myServersHostname
Set the domain name to myDomain.com
Set the system's time zone to America/New_York
Set the system's date and time to Jan 1, 2020 12:00:00 AM
Set the host name to the contents of /etc/hostname
Set the domain name to the contents of /etc/domainname
Set the system's time zone to the contents of /etc/timezone
Set the timestamp of B to the same one as A
Set the timestamp of C to the same one as A
Set the timestamp of D to the same one as A
Set the timestamp of E to the same one as A
Set the timestamp of F to the same one as A
Set the timestamp of G to the same one as A
Set the timestamp of H to the same one as A
Set the timestamp of I to the same one as A
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'dir' to the directory name of first argument to script or function, that is the part before the last slash.
Set variable 'ext' to the file extension of first argument to script or function, that is the part following the last dot.
If first argument to script or function is a directory, set variable 'file' to the base name of the first regular file in that directory.
If first argument to script or function is a directory, set variable 'dir' to the name of the first regular file in that directory.
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'dir' to the directory name of first argument to script or function, that is the part following the last slash.
Set variable 'root' to the root directory of first argument to script or function, that is the part following the last slash.
Set variable 'ext' to the filename extension of first argument to script or function, that is the part following the last dot.
Prints all positional arguments.
Prints all positional arguments, one per line.
Prints first positional argument.
Prints second positional argument.
Prints third positional argument.
Shifts the positional parameters to the left by 1.
Shifts the positional parameters to the left by 2.
List all files in the current directory, including hidden files
List all files in the current directory, sorted by size
List all files in the current directory, sorted by modification time
Show manual for the grep command
Show manual for the chmod command
Show manual for the cp command
Show manual for the mv command
Show manual for the rm command
Show manual for the mkdir command
Show manual for the rmdir command
Show manual for the touch command
Show manual of the grep command
Show manual of the chmod command
Show manual of the cp command
Show manual of the mv command
Show manual of the rm command
Show manual of the mkdir command
Show manual of the rmdir command
Show manual of the touch command
Show manual of the grep utility
Show manual of the chmod utility
Show manual of the cp utility
Show manual of the mv utility
Show manual of the rm utility
Show manual of the mkdir utility
Show manual of the rmdir utility
Show manual of the touch utility
Show manual page for the grep utility
Show manual page for the chmod utility
Show manual page for the cp utility
Show manual page for the mv utility
Show manual page for the rm utility
Show manual page for the mkdir utility
Show manual page for the rmdir utility
Show manual page for the touch utility
Show manual page of grep
Show manual page of chmod
Show manual page of ls
Show manual page of cp
Show manual page of mv
Show manual page of rm
Show manual page of mkdir
Show manual page of rmdir
Show manual page of touch
Show manual page of cat
Show manual page of less
Show manual page of head
Show manual page of tail
Show manual page of sort
Show manual page of uniq
Show manual page of wc
List all files in the current directory, including hidden files.
List all files in the current directory, sorted by size.
List all files in the current directory, sorted by modification time.
Show information about the process with id 20238.
Show information about all processes running on the system.
Show information about all processes running on the system, sorted by memory usage.
Show information about all processes running on the system, sorted by cpu usage.
Shows only IP4, not IP6 address of network interface eth0.
Shows only IP6, not IP4 address of network interface eth0.
Shows only the MAC address of network interface eth0.
Shows only the broadcast address of network interface eth0.
Shows only the netmask of network interface eth0.
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, in long format
List all files in the current directory, in reverse alphabetical order
List all files in the current directory.
List all files in the current directory, including hidden files.
List all files in the current directory, including hidden files, and display them in reverse alphabetical order.
List all files in the current directory, including hidden files, and display them in long format.
Sort the lines of the file 'temp.txt' and change it in-place
Sort the lines of the file 'temp2.txt' and change it in-place
Sort the lines of the file 'temp3.txt' and change it in-place
Sort the lines of the file 'temp4.txt' and change it in-place
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix x_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix y_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix z_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix a_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix b_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix c_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix d_
Split $INFILE into files of at most $SPLITLIMT with a numeric suffix and a prefix e_
Split 2011.psv into chunks of at most 50000000 lines each as input to ./filter.sh
Use tr to convert all upper-case letters in 2011.psv to lower case
Use sed to delete all lines in 2011.psv that contain the word "delete"
Use grep to print all lines in 2011.psv that contain the word "print"
Use awk to print the first column of every line in 2011.psv
Use sort to sort 2011.psv by the second column
Split ADDRESSS_FILE into files containing at most 10 lines and prefix temp_file_
Split ADDRESSS_FILE into files containing at most 5 lines and prefix temp_file_
Split file.txt into files of at most 20 lines each with a prefix new
Split file.txt into files of at most 30 lines each with a prefix new
Split file.txt into files of at most 40 lines each with a prefix new
Split input.txt into files with 1 line each and use a prefix output. and a suffix length of 5
Split input.txt into files with 2 lines each and use a prefix output. and a suffix length of 5
Split input.txt into files with 3 lines each and use a prefix output. and a suffix length of 5
Split input.txt into files with 4 lines each and use a prefix output. and a suffix length of 5
Split input_file into files of at most 100 lines each with prefix output_file
Split input_file into files of at most 200 lines each with prefix output_file
Split input_file into files of at most 300 lines each with prefix output_file
Split input_file into files of at most 400 lines each with prefix output_file
Starts new detached tmux session 'vims' with new windows 'vim0' and opens file 'foo' within.
Starts new detached tmux session 'vims' with new windows 'vim1' and opens file 'bar' within.
Starts new detached tmux session and runs command $CMD within.
Starts new detached tmux session and runs command $CMD within.
Symlinks all of formula’s installed files into the Homebrew prefix.
Symlinks all of formula’s installed files into the Homebrew prefix.
Symlinks all of formula’s installed files into the Homebrew prefix.
Symlinks all of formula’s installed files into the Homebrew prefix.
Take a file path from standard input and remove it.
Remove the file located at /path/to/file.txt
Takes path list from '.exportfiles.text' file, cuts off first path segment.
Takes path list from '.exportfiles.text' file, cuts off first two path segments.
Unsets GIT_WORK_TREE variable.
Unsets GIT_COMMITTER_EMAIL variable.
Unsets GIT_AUTHOR_EMAIL variable.
Unsets GIT_COMMITTER_NAME variable.
Unsets GIT_AUTHOR_NAME variable.
Unsets GNUPLOT_PS_DIR variable.
Unsets GNUPLOT_PDF_DIR variable.
Unsets GNUPLOT_CMD variable.
Unsets array member with index 3.
Unsets array member with index 4.
Unsets array member with index 5.
Unsets array member with index 6.
Unsets array member with index 7.
Unsets array member with index 8.
Unzip file.gz and print each line with the 2nd | separated field greater than 5
Unzip file.gz and print each line with the 3rd | separated field greater than 5
Unzip file.gz and print each line with the 4th | separated field greater than 5
Unzip file.gz and print each line with the 5th  or | separated field greater than 10
Unzip file.gz and print each line with the 5th  or | separated field greater than 15
Unzip file.gz and print each line with the 5th  or | separated field greater than 20
Unzip file.gz and print each line with the 5th  or | separated field greater than 25
Unzip file.gz and print each line with the 5th  or | separated field greater than 30
Unzip file.gz and print each line with the 5th  or | separated field greater than 35
Unzip file.gz and print each line with the 5th  or | separated field greater than 40
Unzip file.gz and print each line with the 5th  or | separated field greater than 45
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Use metaflac to extract the album field from myfile.flac, and set the variable ALBUM to the value of that field.
Use metaflac to extract the title field from myfile.flac, and set the variable TITLE to the value of that field.
Use metaflac to extract the date field from myfile.flac, and set the variable DATE to the value of that field.
Use metaflac to extract the tracknumber field from myfile.flac, and set the variable TRACKNUMBER to the value of that field.
Verbosely compresses all files on first depth level keeping original files in place.
Verbosely compresses all files on second depth level keeping original files in place.
Verbosely compresses all files on third depth level keeping original files in place.
Verbosely compresses all files on fourth depth level keeping original files in place.
Verbosely compresses all files on fifth depth level keeping original files in place.
List the contents of a gzipped file
Decompress a gzipped file
Compress a file using gzip
Clear the screen
Move up one directory
List files in current directory
Create a new directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
Clear the screen
Change directory to the home directory
List all files in the current directory, including hidden files
List all files in the current directory, excluding hidden files
Move up one directory
Create a new directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
Remove a file
Print the contents of a file to the terminal window
Print the contents of a file to the terminal window, one page at a time
Clear the screen
Change directory to the home directory
List all files in the current directory, including hidden files
Print the working directory
Create a new directory
Remove an empty directory
Delete a file
Copy a file from one location to another
Move a file from one location to another
Display the contents of a file
Clear the history file
Delete all history entries older than three days
Display the last five commands entered
Display all commands starting with "s"
Run the last command starting with "s"
View manual page of the grep command
View manual page of the ls command
View manual page of the chmod command
View manual page of the cp command
View manual page of the mv command
View manual page of the rm command
View manual page of the mkdir command
View manual page of the rmdir command
List all files in the current directory, including hidden files.
List all files in the current directory, in long format.
List all files in the current directory, sorted by modification time.
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, in long format
Wrap each line in file.txt to fit in 80 characters
Wrap each line in file.txt to fit in 80 characters
Wrap each line in file.txt to fit in 80 characters
Wrap each line in file.txt to fit in 80 characters
Wrap each line in file.txt to fit in 80 characters
Print the first 30 characters of each line in longline.
Print the first 30 characters of each line in longline.
Wrap standard input to fit in 11 characters per line
Wrap standard input to fit in 12 characters per line
Wrap standard input to fit in 13 characters per line
Wrap standard input to fit in 14 characters per line
Wrap standard input to fit in 15 characters per line
Wrap standard input to fit in 16 characters per line
Wrap standard input to fit in 17 characters per line
Wrap standard input to fit in 18 characters per line
Wrap standard input to fit in 19 characters per line
Write output of ant to the console
Write output of ant to build.log
Write error of ant to the console
Write output of bash myscript.sh to standard output
Write output of bash myscript.sh to standard output and to output.log
Write output of bash myscript.sh to standard output and to error.log
Write output of bash myscript.sh to standard output and to output.txt
Write output of bash myscript.sh to standard output and to error.txt
Write output of bash myscript.sh to standard output and to output_error.txt
Write standard output of ./a.out to standard output and to file output
Write standard output of ./a.out to standard output and to file output
Write standard error of ./a.out to standard output and to file output
Write standard output of ./a.out to standard output and to file output
Write standard error of ./a.out to standard output and to file output
Write standard output of ./a.out to file output
Write standard output to the console and append to file log
Append standard output and error to file log
Send standard output and error to /dev/null
Generate a list of all files in the current directory
Generate a list of all files in the current directory, including hidden files
Generate a list of all files in the current directory, including hidden files, sorted by modification time
Write standard output to the console and append to file log
Write the standard output of someCommand to the console
Write the standard output of someCommand to someFile
Write the standard error of someCommand to the console
Write the standard error of someCommand to someFile
Append the standard output of someCommand to someFile
Append the standard error of someCommand to someFile
Write the standard output of someCommand to the console and append it to someFile
Write the standard error of someCommand to the console and append it to someFile
Write the standard output of someCommand to the console and write it to someFile
bind word pwd\n to key code \e[25~
bind word pwd\n to key code \e[26~
bind word pwd\n to key code \e[27~
bind word pwd\n to key code \e[28~
bind word pwd\n to key code \e[29~
bind word pwd\n to key code \e[30~
bind word pwd\n to key code \e[31~
bind word pwd\n to key code \e[32~
bind word pwd\n to key code \e[33~
bind word pwd\n to key code \e[34~
bind word pwd\n to key code \e[35~
bind word pwd\n to key code \e[36~
bind word pwd\n to key code \e[37~
bind word pwd\n to key code \e[38~
change the owner of the file /path/to/yourapp to root
change owner of the file it to user root
change group of the file it to group root
make the file it read-only for the user
make the file it read-only for the group
make the file it read-only for others
make the file it writable for the user
make the file it writable for the group
make the file it writable for others
make the file it executable for the user
make the file it executable for the group
change group of the file file to group group_name
change owner and group of the file file to user user_name and group group_name
change mode of the file file to mode
change mode of the directory dir to mode
recursively change owner of the directory dir to user user_name
recursively change group of the directory dir to group group_name
check readline bindings for \x61
check readline bindings for \x62
check readline bindings for \x63
check readline bindings for \x64
check readline bindings for \x65
check readline bindings for \x66
check readline bindings for \x67
check readline bindings for \x68
check readline bindings for \x69
check readline bindings for \x6A
check readline bindings for \x6B
display the manual page of grep
display the manual page of chmod
display the manual page of ls
display the manual page of cp
display the manual page of mv
display the manual page of rm
display the manual page of mkdir
display the manual page of rmdir
display the manual page of touch
find all files with a certain extension
list all files in a directory
list all files in a directory, including hidden files
list all files in a directory, including hidden files, in long format
find all files with a certain extension
list all files in a directory
move back one character
move forward one character
move to the beginning of the line
move to the end of the line
move up one line
change to the /etc directory
list the contents of the current directory
create a new directory
remove a directory
move a file
download a file from a url
download a file from a url and save it as filename
download a file from a url using HTTP 1.1
download a file from a url using a specified port
print bindings for p and e with no case sensitivity
print bindings for c and s with no case sensitivity
print bindings for v and m with no case sensitivity
print bindings for t and r with no case sensitivity
print bindings for g and h with no case sensitivity
print bindings for b and n with no case sensitivity
print readline bindings that use key code '\\e\\C-k'
print readline bindings that use key code '\\e\\C-j'
print readline bindings that use key code '\\e\\C-l'
print readline bindings that use key code '\\e\\C-m'
print readline bindings that use key code '\\e\\C-n'
print readline bindings that use key code '\\e\\C-o'
print the last word in a.txt
print the last word in b.txt
print the last word in c.txt
print the last word in d.txt
print the last word in e.txt
print the last word in f.txt
print the last word in g.txt
print the last word in h.txt
print the last word in i.txt
use only the first 10 lines of a file
use only the last 10 lines of a file
display all lines of a file containing a specified word
display all lines of a file not containing a specified word
sort the lines of a file in alphabetical order
sort the lines of a file in reverse alphabetical order
print first 10 lines of file
print last 10 lines of file
print all lines except the first 10
print all lines except the last 10
delete first 10 lines of file
delete last 10 lines of file
delete all lines except the first 10
run bash shell as user root
run bash shell as user bob
run bash shell as user alice
set alias ... for command cd ../..
set alias .... for command cd ../../..
set alias ..... for command cd ../../../..
set alias ...... for command cd ../../../../..
set alias ....... for command cd ../../../../../..
set alias ........ for command cd ../../../../../../..
set alias ......... for command cd ../../../../../../../..
set alias .......... for command cd ../../../../../../../../..
set alias X3 for command | cut -d' ' -f3
set alias X4 for command | cut -d' ' -f4
set alias X5 for command | cut -d' ' -f5
set alias X6 for command | cut -d' ' -f6
set alias X7 for command | cut -d' ' -f7
set alias X8 for command | cut -d' ' -f8
set alias X9 for command | cut -d' ' -f9
set alias c2 for command awk '{print \$2}'
set alias c3 for command awk '{print \$3}'
set alias c4 for command awk '{print \$4}'
set alias c5 for command awk '{print \$5}'
set alias c6 for command awk '{print \$6}'
set alias c7 for command awk '{print \$7}'
set alias c8 for command awk '{print \$8}'
set alias .. for command 'cd ..'
set alias ... for command 'cd ../..'
set alias .... for command 'cd ../../..'
set alias ..... for command 'cd ../../../..'
set alias ...... for command 'cd ../../../../..'
set alias cd.. for command 'cd ../..'
set alias cd... for command 'cd ../../..'
set alias cd.... for command 'cd ../../../..'
set alias cd..... for command 'cd ../../../../..'
set alias ls-a for command 'ls -a'
set alias ls-l for command 'ls -l'
set alias update for command 'sudo apt-get update && sudo apt-get upgrade'
set alias cls for command 'clear'
set alias dir for command 'ls -l'
set alias .. for command 'cd ..'
set alias home for command 'cd ~'
set alias cp for command 'cp -i'
set alias mv for command 'mv -i'
set alias rm for command 'rm -i'
set alias l for command ls -l
set alias la for command ls -la
set alias ll for command ls -ll
set alias  for command ls -a
set alias l for command 'ls -l'
set alias la for command 'ls -la'
set alias ll for command 'ls -ll'
set alias ll for command 'ls -l'
set alias la for command 'ls -a'
set alias lr for command 'ls -r'
set alias lt for command 'ls -t'
set alias ld for command 'ls -d'
set alias lm for command 'ls -m'
set alias lh for command 'ls -h'
set alias lx for command 'ls -x'
set alias lk for command 'ls -k'
set alias lS for command 'ls -S'
set alias doresetit for command 'eval `resetit-sh`'
set alias dogetit for command 'eval `getit-sh`'
set alias .. for command cd ..
set alias ... for command cd ../..
set alias bar for command $'echo B \'*\' is born at $(date)'
set alias baz for command $'echo C \'*\' is born at $(date)'
set alias qux for command $'echo D \'*\' is born at $(date)'
set alias quux for command $'echo E \'*\' is born at $(date)'
set alias corge for command $'echo F \'*\' is born at $(date)'
set alias grault for command $'echo G \'*\' is born at $(date)'
set alias garply for command $'echo H \'*\' is born at $(date)'
set alias waldo for command $'echo I \'*\' is born at $(date)'
set alias fred for command $'echo J \'*\' is born at $(date)'
set alias plugh for command $'echo K \'*\' is born at $(date)'
set alias xyzzy for command $'echo L \'*\' is born at $(date)'
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias foo for command BAR=baz
set alias bar for command pwd
set alias baz for command ls
set alias git-root for command 'cd $(git rev-parse --show-cdup)'
set alias git-status for command 'git status'
set alias git-add for command 'git add .'
set alias git-commit for command 'git commit -m'
set alias go for command 'GOPATH=$go'
set alias godoc for command 'godoc -http=:6060'
set alias gocode for command 'gocode -s -a -i -t .'
set alias gofmt for command 'gofmt -w .'
set alias j8 for command 'JAVA_HOME=`/usr/libexec/java_home -v 1.8`'
set alias j9 for command 'JAVA_HOME=`/usr/libexec/java_home -v 9`'
set alias j10 for command 'JAVA_HOME=`/usr/libexec/java_home -v 10`'
set alias l for command ls -l
set alias la for command ls -la
set alias ll for command 'ls -l'
set alias l for command 'ls'
set alias lr for command 'ls -R'
set alias lt for command 'ls -lt'
set alias ltr for command 'ls -ltr'
set alias lf for command 'ls -F'
set alias lvim for command vim -c \normal '0\'
set alias ll for command ls -l
set alias la for command ls -a
set alias lli for command ls -li
set alias lr for command ls -r
set alias ls for command ¨ls -l¨
set alias rm for command ¨rm -rf¨
set alias cp for command ¨cp -r¨
set alias mycd for command cd `echo $1`
set alias myls for command ls `echo $1`
set alias mymv for command mv `echo $1`
set alias myrm for command rm `echo $1`
set alias mycat for command cat `echo $1`
set alias mychmod for command chmod `echo $1`
set alias mycp for command cp `echo $1`
set alias myfind for command find `echo $1`
set alias mygrep for command grep `echo $1`
set alias mykill for command kill `echo $1`
set alias mymkdir for command mkdir `echo $1`
set alias mymore for command more `echo $1`
set alias mymv for command mv `echo $1`
set alias myps for command ps `echo $1`
set alias prettyjson for command 'python -m json.tool'
set alias l for command 'ls -l'
set alias la for command 'ls -la'
set alias ll for command 'ls -ll'
set alias  for command 'ls -a'
set alias c for command 'clear'
set alias mv for command 'mv -i'
set alias cp for command 'cp -i'
set alias rm for command 'rm -i'
set alias unix for command date +%s
set alias windows for command date /t
set alias mac for command date +%s
set alias now for command date +%s
set alias tomorrow for command date +%s+1d
set alias yesterday for command date +%s-1d
set alias nextweek for command date +%s+1w
set alias unix for command 'echo $(date +%s)'
set alias windows for command 'echo %time%'
set alias now for command 'echo $(date)'
set alias today for command 'echo $(date +"%A, %B %-d, %Y")'
set alias yesterday for command 'echo $(date --date="yesterday")'
set alias tomorrow for command 'echo $(date --date="tomorrow")'
set alias week for command 'echo $(date +"%V")'
set alias month for command 'echo $(date +"%m")'
set alias myip for command 'curl ifconfig.me'
set alias update for command 'sudo apt-get update'
set alias upgrade for command 'sudo apt-get upgrade'
set alias autoremove for command 'sudo apt-get autoremove'
set alias clean for command 'sudo apt-get clean'
set alias mydisk for command 'df -h'
set alias myram for command 'free -m'
set alias myip for command 'curl ifconfig.me'
set alias update for command 'sudo apt-get update'
set alias upgrade for command 'sudo apt-get upgrade'
set alias autoremove for command 'sudo apt-get autoremove'
set alias clean for command 'sudo apt-get clean'
set alias edit_hosts for command 'sudo nano /etc/hosts'
view the manual page of grep
view the manual page of chmod
view the manual page of ls
view the manual page of cp
view the manual page of mv
view the manual page of rm
view the manual page of mkdir
view the manual page of rmdir
view the manual page of touch
Display the percentage of CPU usage.
Display the percentage of CPU idle time.
Display the percentage of CPU usage for user processes.
Display the percentage of CPU usage for system processes.
Display process information once, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 5 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information for processes whose name contain the string "firefox", adding __CUSTOM_LINE_MARKER at the end of each line.
Display the percentage of CPU usage allocated to user processes.
Display the percentage of CPU usage allocated to kernel processes.
Display the percentage of CPU usage not allocated to processes.
Display the total amount of memory in the system.
Display the amount of free memory in the system.
Display various information about process currently taking the most CPU time.
Find the process currently taking the most CPU time.
Find the process currently taking the most memory.
List all processes running on the system.
List all processes running on the system, including hidden processes.
List all processes running on the system, including hidden processes and their full command lines.
List all processes running on the system, including hidden processes, their full command lines, and other process information.
Monitor all processes belonging to user 'abc' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'def' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'ghi' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'jkl' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'mno' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'pqr' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'stu' in batch mode and displaying info each 30 seconds up to 10 times.
Monitor all processes belonging to user 'vwx' in batch mode and displaying info each 30 seconds up to 10 times.
Use 'top' to monitor the newest instance of ProgramName.
Use 'htop' to monitor the newest instance of ProgramName.
Use 'iotop' to monitor the newest instance of ProgramName.
Use 'atop' to monitor the newest instance of ProgramName.
Use 'top' to monitor the oldest instance of ProgramName.
Use 'top' to monitor the second oldest instance of ProgramName.
Add prefix_ to every non-blank line in a.txt
Add suffix_ to every non-blank line in a.txt
Add prefix_ and suffix_ to every non-blank line in a.txt
Output every third line starting from the first line of a.txt
Output every third line starting from the second line of a.txt
Add a line number to every line in infile
Add a line number to every line in infile, starting at 10
Add a line number to every line in infile, starting at 10 and incrementing by 5
Add a line number to every non-blank line in infile
Add a line number to every non-blank line in infile, starting at 10
Add directory $HOME/Documents to the directory stack
Add directory $HOME/Downloads to the directory stack
Add directory $HOME/Music to the directory stack
Add executable permission to a.out
Add read and write permissions to foo.txt for the user
Add read, write, and execute permissions to bar.txt for the group
Add read and execute permissions to baz.txt for others
Remove all permissions from qux.txt
Make foo.txt read-only for the user
Make bar.txt write-only for the group
Make baz.txt executable for others
Append the string "& Bytes" to the end of every line in $TEMPFILE and format the result as a table
Append & Kilobytes to the end of every line in $TEMPFILE and format the result as a table
Append & Megabytes to the end of every line in $TEMPFILE and format the result as a table
Append & Gigabytes to the end of every line in $TEMPFILE and format the result as a table
Append & Terabytes to the end of every line in $TEMPFILE and format the result as a table
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Calculate sha1 sum of file $ecriv
Calculate the checksum of file $ecriv
Prints the path of the current working directory
Shows the amount of free and used disk space on the current filesystem
Shows information about the currently logged in users
Shows a list of all running processes
Shows the system's hostname
Generate a list of all files in the current directory
Copy file1.txt to file2.txt
Move file1.txt to file2.txt
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'make'
Calculate the md5sum of the executable file of command 'cmake'
Calculate the cos values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and y.txt
Calculate the tan values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and y.txt
Calculate the cot values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and y.txt
Calculate the sec values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and y.txt
List all files in the current directory, including hidden files.
List all files in the current directory, sorted by size.
List all files in the current directory, sorted by modification time.
List all files in the current directory, sorted by name.
Make a new directory.
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running knm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running lnm.sh to be run every 10 minutes instead of 5 minutes.
List all files in the current directory, including hidden files
List all files in the current directory, in long format
List all files in the current directory, in reverse alphabetical order
Print working directory
List contents of current directory
List contents of current directory, including hidden files
List contents of current directory in long format
List contents of current directory, including hidden files, in long format
Change directory to the parent of the current directory
Create a new directory named 'dir'
Remove the directory named 'dir', if it is empty
Recursively remove the directory named 'dir', and all its contents
Move the file 'file1' to the directory 'dir'
Copy the file 'file1' to the directory 'dir'
Rename the file 'file1' to 'file2'
Display the contents of the file 'file'
Display the first 10 lines of the file 'file'
Print working directory
List files in current directory
List all files in current directory, including hidden files
List files in current directory, with additional information
List files in current directory, with human-readable file sizes
List files in current directory, sorted by modification time
List files in current directory, sorted by modification time in reverse order
List files in current directory, sorted by file size
Make a new directory
Remove a directory
Move a file or directory
Copy a file or directory
Remove a file or directory
Print the contents of a file to the screen
Print the contents of a file to the screen, one page at a time
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
List all the running processes
List all the running processes and their details
List all the running processes in a tree format
Get the current working directory
Create a new directory
Remove an empty directory
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, in long format
List all files in the current directory, in reverse alphabetical order
Print the contents of the file to the screen
Move the file to the trash
Empty the trash
Create a new directory
Remove a directory
Create a new file
Use tar to compress the contents of the /etc/ directory
Use gzip to compress the file named foo
Use bzip2 to compress the file named bar
Use xz to compress the file named baz
Concatenate with a space every other line in input.txt
Join every two lines in input.txt with a comma
Output the first column of input.txt
Output the second column of input.txt
Output the third column of input.txt
Output the fourth column of input.txt
Continuously write 1111111111111111 without newlines to /dev/to/overwrite
Continuously write 2222222222222222 without newlines to /dev/to/overwrite
Continuously write 3333333333333333 without newlines to /dev/to/overwrite
Continuously write 4444444444444444 without newlines to /dev/to/overwrite
Continuously write 5555555555555555 without newlines to /dev/to/overwrite
Continuously write 6666666666666666 without newlines to /dev/to/overwrite
Continuously write 7777777777777777 without newlines to /dev/to/overwrite
Continuously write 8888888888888888 without newlines to /dev/to/overwrite
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
List all files in current working directory
List all files in current working directory, including hidden files
List all files in current working directory in long format
List all files in current working directory, sorted by modification time
Create a new directory
Remove an empty directory
List all the files in the current directory
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, and show additional information about each file
Count the number of differing lines in file1 and file2 with 1 line of unified context
Count the number of differing lines in file1 and file2 with 2 lines of unified context
Count the number of differing lines in file1 and file2 with 3 lines of unified context
Count the number of differing lines in file1 and file2 with 4 lines of unified context
Count the number of differing lines in file1 and file2 with 5 lines of unified context
Count the number of differing lines in file1 and file2 with 6 lines of unified context
Count the number of differing lines in file1 and file2 with 7 lines of unified context
Count the number of differing lines in file1 and file2 with 8 lines of unified context
Print the current user's username
Print the current working directory
List the contents of the current directory
Change the current working directory
Create a new directory
Remove an empty directory
Create a new file
Remove a file
Copy a file from one location to another
Count the number of users logged in minus one
Count the number of users logged in minus one
Count the number of users logged in minus one
Count the number of users logged in minus one
Find all files under /usr/src that contain string foo and print their names
Find all files under /usr/src that contain string foo and print their paths
Find all files under /usr/src that contain string foo and print the number of lines that contain foo
List all files in current directory
List all files in current directory, including hidden files
List all files in current directory, including hidden files, in long format
Copy file1 to file2
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, including hidden files, in long format
List all files in the current directory, in reverse alphabetical order
Counts lines in each of the *.php files in the current folder and prints the total count.
Counts lines in each of the *.js files in the current folder and prints the total count.
Counts lines in each of the *.css files in the current folder and prints the total count.
Prints the first column of file fileName
Prints the second column of file fileName
Prints the third column of file fileName
Prints the fourth column of file fileName
Prints the fifth column of file fileName
Prints the sixth column of file fileName
Prints the seventh column of file fileName
Prints the eighth column of file fileName
Prints the ninth column of file fileName
Create a new screen session
Detach from a screen session
Generate a new ssh key and store it in the file ~/.ssh/id_rsa
Create a symbolic link named .bash_profile to .bashrc
Create a symbolic link named .inputrc to .bashrc
Create a symbolic link named .profile to .bashrc
Create a symbolic link named /lib/libc.so.1 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.2 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.3 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.4 to /lib/libc.so.6
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Create compressed archive from my_large_file_3 and my_large_file_4 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[aeiou]/X} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[0-9]/X} and saves it in 'rand_str' variable.
Delete newlines from output of 'hg st -R $path' and save to variable var
Delete all files in current directory
Delete all files in directory 'foo'
Delete file 'bar.txt'
Delete the first line of $FILE using intermediate file $FILE.tmp
Delete the last line of $FILE using intermediate file $FILE.tmp
Delete the second line of $FILE using intermediate file $FILE.tmp
Delete the third line of $FILE using intermediate file $FILE.tmp
Delete the fourth line of $FILE using intermediate file $FILE.tmp
Delete the fifth line of $FILE using intermediate file $FILE.tmp
Delete the line containing start plus the next 3 lines from standard input
Delete the line containing start plus the next 2 lines from standard input
Delete the line containing start plus the next 1 lines from standard input
Display the last part of a file
Output the first part of files
Print selected parts of lines from each FILE to standard output
Disables shell option 'compat32'.
Disables shell option 'compat40'.
Disables shell option 'compat41'.
Disables shell option 'compat42'.
Enables shell option 'compat31'.
Enables shell option 'compat32'.
Enables shell option 'compat40'.
Enables shell option 'compat41'.
Disables shell option 'nounset'.
Disables shell option 'pipefail'.
Display /tmp/file as a table of width 30 with columns filled before rows
Display /tmp/file as a table of width 40 with columns filled before rows
Display /tmp/file as a table of width 50 with columns filled before rows
Display /tmp/file as a table of width 60 with columns filled before rows
Display /tmp/file as a table of width 70 with columns filled before rows
Display /tmp/file as a table of width 80 with columns filled before rows
Display /tmp/file as a table of width 90 with columns filled before rows
Display system's hostname
Display the current operating system
Display the current kernel version
Display the current kernel release
Display difference between one.txt and two.txt, side-by-side with a context of 2 lines.
Display difference between one.txt and two.txt, in context format.
Display difference between one.txt and two.txt, in unified format.
Display differences between files a.txt and b.txt side-by-side.
Display differences between files a.txt and b.txt, one line at a time.
Display differences between list of files in /etc and /usr/etc.
Display differences between list of files in /home and /usr/home.
Display differences between list of files in /var and /usr/var.
Display differences between list of files in /tmp and /usr/tmp.
Display differences between list of files in /opt and /usr/opt.
Display differences between list of files in /mnt and /usr/mnt.
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by tabs)
Display inputfile all on one line (replace newlines by spaces)
Display the first 10 lines of inputfile
Display the last 10 lines of inputfile
Display all lines of inputfile except the first 10
Display all lines of inputfile except the last 10
List all the files in a directory
Change the working directory
Create a directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
Display source and mount point of the file system containing /some/path.
Display the amount of free space on the file system containing /some/path.
Display the amount of free space on all mounted file systems.
List all mounted file systems.
Dynamically defines tmux session name to attach to.
Dynamically defines tmux session name to attach to.
Prints the value of the 'SHELL' environment variable.
Sets the value of the 'SHELL' environment variable to '/bin/bash'.
Prints the value of the 'HOME' environment variable.
Sets the value of the 'HOME' environment variable to '/home/user'.
Prints the value of the 'PATH' environment variable.
Enables shell option 'cdable_vars'.
Enables shell option 'cdspell'.
Enables shell option 'checkhash'.
Enables shell option 'checkjobs'.
Enables shell option 'checkwinsize'.
Enables shell option 'cmdhist'.
Enables shell option 'completion_ignore_case'.
Enables shell option 'correctall'.
Enables shell option 'direxpand'.
Enables shell option 'dirspell'.
Enables shell option 'dotglob'.
Enables shell option 'execfail'.
Enables shell option 'expand_aliases'.
Enables shell option 'cdable_vars'.
Enables shell option 'cdspell'.
Enables shell option 'checkhash'.
Enables shell option 'checkjobs'.
Enables shell option 'checkwinsize'.
Enables shell option 'cmdhist'.
Enables shell option 'compat31'.
Enables shell option 'compat32'.
Enables shell option 'compat40'.
Prints the value of shell option 'nocaseglob'.
Prints the value of the 'HOME' shell variable.
Prints the value of the 'PATH' shell variable.
Prints the value of the 'SHELL' shell variable.
Prints the value of the 'USER' shell variable.
Prints the value of the 'TERM' shell variable.
Prints the value of the 'HOSTNAME' shell variable.
Prints the value of the 'RANDOM' shell variable.
Sets the value of the 'FOO' shell variable to 'bar'.
Prints the value of the 'PATH' shell variable.
Adds the directory '/foo/bar' to the value of the 'PATH' shell variable.
Prints the value of the 'HOME' shell variable.
Sets the value of the 'FOO' shell variable to 'bar'.
Prints the value of the 'SHELL' shell variable.
Prints all currently defined aliases.
Prints the value of the given shell option.
Sets the value of the given shell option.
Changes the value of an environment variable.
Displays all exported environment variables and functions.
Runs a command in a modified environment.
Deletes an environment variable.
Displays help information for builtin commands.
Execute chown -R ask:ask /www/askapache.com in the background on server askapache
Execute pwd on host something as user root
Execute date on host something as user root
Execute whoami on host something as user root
Execute df -h on host something as user root
Execute du -sh on host something as user root
Execute free -m on host something as user root
Execute ps aux on host something as user root
Execute ssh raptor.lan hostname on server genja.org
Execute 'tput setaf 2; echo foo' with color support every 2 seconds
Execute 'tput setaf 3; echo foo' with color support every 2 seconds
Execute 'tput setaf 4; echo foo' with color support every 2 seconds
Execute 'tput setaf 5; echo foo' with color support every 2 seconds
Execute 'tput setaf 6; echo foo' with color support every 2 seconds
Execute 'tput setaf 7; echo foo' with color support every 2 seconds
Execute 'tput setaf 8; echo foo' with color support every 2 seconds
Execute 'tput setaf 9; echo foo' with color support every 2 seconds
Execute 'tput setaf 10; echo foo' with color support every 2 seconds
Execute 'tput setaf 11; echo foo' with color support every 2 seconds
Execute 'tput setaf 12; echo foo' with color support every 2 seconds
Execute 'tput setaf 13; echo foo' with color support every 2 seconds
Execute /usr/bin/grep with $* arguments
Execute /usr/bin/awk with $* arguments
Execute /usr/bin/sed with $* arguments
Execute /usr/bin/sort with $* arguments
Execute /usr/bin/uniq with $* arguments
Execute /usr/bin/wc with $* arguments
Execute /usr/bin/head with $* arguments
Exits from script with exit code 0.
Exits from script with exit code 2.
Exits from script with exit code 3.
Exits from script with exit code 4.
Exits from script with exit code 5.
Exits from script with exit code 6.
Exits from script with exit code 7.
Exits from script with exit code 8.
Expands `whoami` as current user name, and adds resulted path to the directory stack.
Expands `whoami` as current user name, and changes directory to the user's home directory.
Export variable PS1 as the current username @ the hostname
Export variable PS2 as a > symbol
Export variable PS3 as a # symbol
Export variable PS4 as a + symbol
Get all files that start with 'my'
Get all files that end with '.html'
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers.
File 'mydatafile' has a number on each line, display the average of these numbers.
File 'mydatafile' has a number on each line, display the largest of these numbers.
File 'mydatafile' has a number on each line, display the smallest of these numbers.
Display the first column of file 'mydatafile'.
Display the second column of file 'mydatafile'.
Display the third column of file 'mydatafile'.
Display the fourth column of file 'mydatafile'.
Filter the cron list of user user2 through my_wonderful_sed_script and re-apply the resulting output.
Filters out all empty lines from the output of the command crontab -u $user -l ignoring errors
Filters out all lines that begin with a # from the output of the command crontab -u $user -l ignoring errors
Filters out all lines that begin with a space from the output of the command crontab -u $user -l ignoring errors
Find all DNS records for 'www.google.com'
Find the MX record for 'google.com'
Find the TXT record for 'google.com'
Find the number of hard links to a file
Find the inode number of a file
Find the device ID of a file
Find the file size in bytes
Find the block size of a file system
Find the total number of blocks in a file system
Find all files/directories 2 levels down the current directory that are enlisted in file 1
Find all files/directories 3 levels down the current directory that are enlisted in file 1
Find all files/directories 4 levels down the current directory that are enlisted in file 1
Find all files/directories 5 levels down the current directory that are enlisted in file 1
Find all files/directories 6 levels down the current directory that are enlisted in file 1
Find all files/directories 7 levels down the current directory that are enlisted in file 1
Find all files/directories 8 levels down the current directory that are enlisted in file 1
Find all files/directories 9 levels down the current directory that are enlisted in file 1
Find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar
Find all files/directories with 'my key phrase' in their names under current directory
Find all top level directories under /home that doesn't contain a file/directory named 'etc'
Find all top level directories under /home that doesn't contain a file/directory named 'boot'
Find all top level directories under /home that doesn't contain a file/directory named 'dev'
Find all top level directories under /home that doesn't contain a file/directory named 'lib'
Find all top level directories under /home that doesn't contain a file/directory named 'media'
Find all top level directories under /home that doesn't contain a file/directory named 'mnt'
Find all top level directories under /home that doesn't contain a file/directory named 'opt'
Find all top level directories under /home that doesn't contain a file/directory named 'sbin'
Find all top level directories under /home that doesn't contain a file/directory named 'srv'
Find all top level directories under /home that doesn't contain a file/directory named 'tmp'
Find all top level directories under /home that doesn't contain a file/directory named 'usr'
Find all xml files under current directory and archive them to .bz2 archives
Find all xml files under /tmp/data and archive them to .bz2 archives
Find all xml files under /tmp/data and archive them to .gz archives
Find the directory with least access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Find the directory with most access time under current directory and assign it to $filename
Finds real time report in a 'sleep 2' command execution statistic.
Finds real time report in a 'sleep 3' command execution statistic.
Finds real time report in a 'sleep 4' command execution statistic.
Finds real time report in a 'sleep 5' command execution statistic.
Finds user time report in a 'sleep 1' command execution statistic.
Finds user time report in a 'sleep 2' command execution statistic.
Finds user time report in a 'sleep 3' command execution statistic.
Finds user time report in a 'sleep 4' command execution statistic.
Prints the current working directory.
Lists all files in the current working directory.
Changes the current working directory.
Shows your command history.
Runs a command as another user.
Creates a new directory.
Copies files and directories.
Moves or renames files and directories.
Deletes files and directories.
Prints the contents of a file.
Finds files and directories.
Compresses files and directories.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 7.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 30.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 45.
Print the first column
Print the second column
Print the third column
Print the fourth column
Display the number of processes.
Display the number of processes.
Display the number of processes.
Display the number of processes.
Display the number of processes.
Display the percentage of CPU usage allocated to user processes.
Display the percentage of CPU usage allocated to system processes.
Display the percentage of CPU usage allocated to idle processes.
Display various information about process currently taking the most CPU time.
Monitor only processes whose command contains string_to_match_in_cmd_line.
List all processes whose command contains string_to_match_in_cmd_line.
List all processes whose command contains string_to_match_in_cmd_line and are running as the specified user.
Use 'top' to monitor process 'a.out', printing information 100 times.
Use 'htop' to monitor process 'a.out', printing information 100 times.
Use 'ps' to monitor process 'a.out', printing information 100 times.
Use 'top' to monitor the newest instance of ProgramName.
Use 'htop' to monitor the newest instance of ProgramName.
Use 'top' to monitor the oldest instance of ProgramName.
Use 'top' to monitor the second oldest instance of ProgramName.
Add prefix to every non-blank line in file.txt
Add suffix to every non-blank line in file.txt
Join every two lines in file.txt with joinstring
Output the first column of file.txt
Output the second column of file.txt
Output the third column of file.txt
Output the fourth column of file.txt
Add prefix_ to every non-blank line in a.txt
Add suffix_ to every non-blank line in a.txt
Add prefix_ and suffix_ to every non-blank line in a.txt
Output every third line starting from the first line of a.txt
Output every third line starting from the second line of a.txt
Add a date time stamp to every line of output in ping google.com
Add a date time stamp to every line of output in ping yahoo.com
Add a date time stamp to every line of output in ping msn.com
Add a date time stamp to every line of output in ping amazon.com
Add a date time stamp to every line of output in ping host
Get the current date and time
Get the current time
Get the current date
Add a line number to every line in infile
Add a line number to every line in infile, starting at 10
Add a line number to every line in infile, starting at 10 and incrementing by 5
Add a line number to every non-blank line in infile
Add a line number to every non-blank line in infile, starting at 10
Add directory $HOME/Documents to the directory stack
Add directory $HOME/Downloads to the directory stack
Add directory $HOME/Music to the directory stack
Append the string "& Bytes" to the end of every line in $TEMPFILE and format the result as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result, and format it as a table
Append & Bytes to the end of every line in $TEMPFILE, reverse the order of the lines, and format the result as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result by the second column, and format the result as a table
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Calculate sha1 sum of file ${my_iso_file} and save it to variable 'sha1'
Calculate sha256 sum of file ${my_iso_file} and save it to variable 'sha256'
Use tar to compress the directory $dir into the file $dest_file
Use tar to uncompress the file $source_file into the directory $dest_dir
Copy the file $source_file to the location $dest_file
Move the file $source_file to the location $dest_file
Create the directory $dir
Remove the directory $dir
Recursively list the contents of the directory $dir
List the contents of the directory $dir
Change the working directory to $dir
Generate a list of all files in the current directory
Copy all files matching '*.cpp' to the directory '/tmp'
Move all files matching '*.o' to the directory '/tmp'
Delete all files matching '*.out'
Create a new directory named 'project'
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'make'
Calculate the md5sum of the executable file of command 'cmake'
Calculate the sum of all the numbers from 1 to 100000
Calculate the sum of all the numbers from 1 to 99999
Calculate the sum of all the numbers from 1 to 99998
Calculate the sum of all the numbers from 1 to 99997
Calculate the sum of all the numbers from 1 to 99996
Calculate the sum of all the numbers from 1 to 99995
Calculate the sum of all the numbers from 1 to 99994
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running knm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running lnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running anm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
List files in /path/to/pdf
Print working directory
Make a new directory named /path/to/newdirectory
Remove the directory named /path/to/newdirectory
Move file1.txt from the current directory to the directory /path/to/destination
Copy file1.txt from the current directory to the directory /path/to/destination
Change directory to the basename of $1 with .tar.gz removed
Change directory to the basename of $1 with .tgz removed
Change directory to the basename of $1 with .tar removed
Change directory to the basename of $1 with .zip removed
Change directory to the basename of $1 with .rar removed
Change owner of script.sh to root
Change owner of file to user_name
Change group of folder to group_name
Change group of file to group_name
Change permissions of folder to 755
Change permissions of file to 644
Copy file1 to file2
Move or rename file1 to file2
Change owner to $FUID of $FILE2
Change group to $FGID of $FILE2
Make $FILE2 readable by user $FUID
Make $FILE2 writable by user $FUID
Make $FILE2 executable by user $FUID
Make $FILE2 readable by group $FGID
Make $FILE2 writable by group $FGID
Make $FILE2 executable by group $FGID
Make $FILE2 readable by all users
Make $FILE2 writable by all users
Change permissions of .bash_logout, .bashrc, and .profile to 644
Change permissions of all files in the current directory to 444
Change permissions of all files in the current directory to 644
Change permissions of all files in the /etc/ directory to 444
Change the owner of it to root
Change the group of it to root
Change the owner of $JBOSS_HOME to $JBOSS_USER
Change the group of $JBOSS_CONSOLE_LOG to $JBOSS_GROUP
Change the group of $JBOSS_HOME to $JBOSS_GROUP
Change the permissions of $JBOSS_CONSOLE_LOG to 775
Change the group of destination_dir to group
Change the owner and group of destination_dir to user and group
Change the mode of destination_dir to mode
Print the working directory
Change to the parent directory of the current directory
Create a new directory named 'foo' in the current directory
Remove the directory named 'foo', if it is empty
Delete the file named 'foo'
Copy the file named 'foo' to a new file named 'bar'
Change user to amzadm and group to root of /usr/bin/aws
Change user to root and group to root of /usr/bin/aws
Check if 'nullglob' shell option is enabled, and if so, saves its status in 'is_nullglob' variable.
Check if 'nounset' shell option is enabled, and if so, saves its status in 'is_nounset' variable.
Check if 'pipefail' shell option is enabled, and if so, saves its status in 'is_pipefail' variable.
Check if 'errexit' shell option is enabled, and if so, saves its status in 'is_errexit' variable.
Check if 'noclobber' shell option is enabled, and if so, saves its status in 'is_noclobber' variable.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
List all processes running on the system
List all processes running on the system, including their PIDs
List all processes running on the system, including their parent PIDs
List all processes running on the system, including their process IDs and parent process IDs
List all processes running on the system, including their command names
List all the running processes
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file
Compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for second file
Use tar to compress the contents of /etc/ into a file called etc.tar
Use tar to compress the contents of /home/ into a file called home.tar
Concatenate with a space every other line in input.txt
Join every two lines in input.txt with a comma
Join every two lines in input.txt with a tab
Output the first column of input.txt
Output the second column of input.txt
Output the first and third columns of input.txt
Output the lines of input.txt that contain the word "foo"
Output the lines of input.txt that do not contain the word "foo"
Sort the lines of input.txt alphabetically
Continuously write UUUUUUUUUUUUUUUUU without newlines to /dev/to/overwrite
Continuously write 1111111111111111 without newlines to /dev/to/overwrite
Continuously write 2222222222222222 without newlines to /dev/to/overwrite
Continuously write AAAAAAAAAAAAAAAA without newlines to /dev/to/overwrite
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert the first 1024 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 2048 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 4096 bytes of /dev/urandom to a string of hexadecimal bytes
Copies ${FILE} to COLLECT folder with unique name formatted like 'job_XXXXXXXXX'.
Creates a new directory called COLLECT if it does not already exist.
Prints out the contents of ${FILE}.
Prints out the contents of ${FILE}, one page at a time.
Prints out the contents of ${FILE}, ten lines at a time.
Prints out the last ten lines of ${FILE}.
Change working directory to user's home directory
Move the file foo.sh into the subdirectory bar
Remove the file foo.sh
Display the contents of the file foo.sh
Create a new directory named bar
Show current working directory
Create a new directory
Remove an empty directory
Delete a non-empty directory and all its contents
Copy a file from one location to another
Move a file from one location to another
Prints all lines in a file that contain the word "error"
Prints all lines in a file that contain the word "Error"
Prints all lines in a file that contain the word "ERROR"
Prints all lines in a file that contain the word "errors"
Prints all lines in a file that contain the word "Errors"
Prints the first column of file fileName
Prints the second column of file fileName
Prints the third column of file fileName
Prints the fourth column of file fileName
Prints the fifth column of file fileName
Prints the sixth column of file fileName
Prints the seventh column of file fileName
Prints the eighth column of file fileName
Prints the ninth column of file fileName
Prints out all files in a git repository that contain the word "error".
Prints out all files in a git repository that contain the word "warning".
Create a compressed archive of /home and split the contents into files with at most 4000 MiB each and use prefix /media/DRIVENAME/BACKUPNAME.tgz
Create a compressed archive of /etc and split the contents into files with at most 2000 MiB each and use prefix /media/DRIVENAME/BACKUPNAME.tgz
Create a new screen session
Detach from a screen session
Reattach to a detached screen session
Reattach to a screen session if only one exists, otherwise create a new session
Create a symbolic link named /lib/libc.so.1 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.2 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.3 to /lib/libc.so.6
Create a symbolic link named /lib/libc.so.4 to /lib/libc.so.6
Create a tar archive of all regular files modified in the last 24 hours
Create a tar archive of all regular files modified in the last week
Create a tar archive of all regular files modified in the last month
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Create compressed archive from my_large_file_3 and my_large_file_4 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[![:alnum:]]/} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[[:upper:]]/} and saves it in 'rand_str' variable.
Delete all files in the current directory
Delete all files in the home directory
Delete all files in the home directory except for file1.txt
Only delete files in the current directory that start with "a"
Delete every second line from output of seq 10
Output numbers 1-10
Delete the line containing start plus the next 3 lines from standard input
Delete the line containing start plus the next 2 lines from standard input
Delete the line containing start plus the next 1 lines from standard input
Delimit standard input with : and display as a table
Display the first 10 lines of standard input
Display the last 10 lines of standard input
Display the first column of standard input
Display the second column of standard input
Display the third column of standard input
Display the fourth column of standard input
Display difference between one.txt and two.txt, side-by-side with a few lines of context.
Display difference between one.txt and two.txt, in context format.
Display difference between one.txt and two.txt, in unified format.
Display differences between files a.txt and b.txt side-by-side.
Display differences between files a.txt and b.txt, one line at a time.
Display in an optimized way file status for all regular files in the current directory tree suppressing error messages
Display file status for all regular files in the current directory tree
Display file status for all files in the current directory tree
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by tabs)
Display inputfile all on one line (replace newlines by commas)
Display inputfile all on one line (replace newlines by spaces)
Display the first 10 lines of inputfile
Display the last 10 lines of inputfile
Display all lines of inputfile except the first 10
Display all lines of inputfile except the last 10
Print only lines containing "pattern" in inputfile
Print only lines not containing "pattern" in inputfile
Print lines matching both "pattern1" and "pattern2" in inputfile
Display source and mount point of the file system containing /some/path.
Display the amount of free space on the file system containing /some/path.
Display the amount of used space on the file system containing /some/path.
Display the total size of the file system containing /some/path.
Display the contents of sample_0002.gz with lk=1& removed
Display the contents of sample_0003.gz with lk=1& removed
Display the contents of sample_0004.gz with lk=1& removed
Display the contents of sample_0005.gz with lk=1& removed
Display the contents of sample_0006.gz with lk=1& removed
Display the contents of sample_0007.gz with lk=1& removed
Display the contents of sample_0008.gz with lk=1& removed
Display the contents of sample_0009.gz with lk=1& removed
Display the contents of sample_0010.gz with lk=1& removed
Display the contents of sample_0011.gz with lk=1& removed
Display the contents of sample_0012.gz with lk=1& removed
Display the contents of sample_0013.gz with lk=1& removed
Display the contents of sample_0014.gz with lk=1& removed
Display the contents of sample_0015.gz with lk=1& removed
Updates Homebrew formulae.
Upgrades all outdated, installed formulae using Homebrew.
Uninstalls a Homebrew formula.
Searches all known formulae for a partial or exact match.
Displays information about installed formulae.
Opens the homepage of the specified formula in the default browser.
This command will ping the specified IP address once and return the TTL value.
This command will display the ARP table for the system, containing information on the mapping of IP addresses to MAC addresses.
This command will display the current routing table for the system.
Execute cd /some/directory/myprogram in the background on target machine user@target and write standard output to foo.out
Execute cd /some/directory/myprogram in the background on target machine user@target and write standard error to foo.err
Execute pwd on host something as user root
Execute date on host something as user root
Execute whoami on host something as user root
Execute cat /etc/passwd on host something as user root
Execute mkdir test on host something as user root
Execute rm -r test on host something as user root
Execute chmod 777 test on host something as user root
Execute cp file1 file2 on host something as user root
Execute mv file1 file2 on host something as user root
Execute touch file1 on host something as user root
Execute grep "test" file1 on host something as user root
Execute less file1 on host something as user root
Execute head file1 on host something as user root
Execute ssh raptor.lan hostname on server genja.org
Execute 'tput setaf 2; echo foo' with color support every 2 seconds
Execute 'tput setaf 3; echo foo' with color support every 2 seconds
Execute 'tput setaf 4; echo foo' with color support every 2 seconds
Execute 'tput setaf 5; echo foo' with color support every 2 seconds
Execute 'tput setaf 6; echo foo' with color support every 2 seconds
Execute 'tput setaf 7; echo foo' with color support every 2 seconds
Execute 'tput setaf 8; echo foo' with color support every 2 seconds
Execute 'tput setaf 9; echo foo' with color support every 2 seconds
Execute 'tput setaf 10; echo foo' with color support every 2 seconds
Execute 'tput setaf 11; echo foo' with color support every 2 seconds
Execute 'tput setaf 12; echo foo' with color support every 2 seconds
Execute 'tput setaf 13; echo foo' with color support every 2 seconds
Execute /usr/bin/grep with $* arguments
Execute /usr/bin/awk with $* arguments
Execute /usr/bin/sed with $* arguments
Execute /usr/bin/sort with $* arguments
Execute /usr/bin/uniq with $* arguments
Execute /usr/bin/wc with $* arguments
Exits from script with exit code 0.
Exits from script with exit code 2.
Exits from script with exit code 3.
Exits from script with exit code 4.
Exits from script with exit code 5.
Exits from script with exit code 6.
Exits from script with exit code 7.
Exits from script with exit code 8.
Expands `whoami` as current user name, and adds resulted path to the directory stack.
Expands `whoami` as current user name, and changes directory to the user's home directory.
Export variable PS1 as the current username @ the hostname
Export variable PS2 as a > symbol
Export variable PS3 as a # symbol
Export variable PS4 as a + symbol
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to the nearest integer.
File 'mydatafile' has a number on each line, display the sum of these numbers.
File 'mydatafile' has a number on each line, display the average of these numbers.
File 'mydatafile' has a number on each line, display the largest of these numbers.
File 'mydatafile' has a number on each line, display the sum of these numbers.
File 'mydatafile' has a number on each line, display the average of these numbers.
File 'mydatafile' has a number on each line, display the largest of these numbers.
File 'mydatafile' has a number on each line, display the smallest of these numbers.
Display the first column of file 'mydatafile'.
Display the second column of file 'mydatafile'.
Display the third column of file 'mydatafile'.
Display the fourth column of file 'mydatafile'.
Display the fifth column of file 'mydatafile'.
Filters out all empty lines from the output of the command crontab -u $user -l ignoring errors
Filters out all lines that don't contain the word "cron" from the output of the command crontab -u $user -l ignoring errors
Find all DNS records for 'www.google.com'
Find the MX record for 'google.com'
Find the TXT record for 'google.com'
Find all files/directories 2 levels down the current directory that are enlisted in file 1
Find all files/directories 3 levels down the current directory that are enlisted in file 1
Find all files/directories 4 levels down the current directory that are enlisted in file 1
Find all files/directories 5 levels down the current directory that are enlisted in file 1
Find all files/directories 6 levels down the current directory that are enlisted in file 1
Find all files/directories 7 levels down the current directory that are enlisted in file 1
Find all files/directories 8 levels down the current directory that are enlisted in file 1
Find all files/directories 9 levels down the current directory that are enlisted in file 1
Find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar
Find all files/directories with 'my key phrase' in their names under current directory
Find all files/directories with 'my key phrase' in their names under current directory
Find all top level directories under /home that doesn't contain a file/directory named 'bin'
Find all files under /home that are larger than 1MB
Find all files under /home that are exactly 1KB
Find all files under /home that are smaller than 1KB
List all files in /etc that end with .conf
List all files in /etc that start with apache
List all files in /etc that contain the word dhcp
Find all xml files under current directory and archive them to .bz2 archives
Find all xml files under /tmp/data and archive them to .bz2 archives
Find all xml files under /tmp/data and archive them to .gz archives
Find the directory with least access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Find the directory with most access time under current directory and assign it to $filename
Finds all folders that contain 'ssh' file and have 'bin' in path.
Finds all folders that contain 'ssh' file and have 'sbin' in path.
Finds all folders that contain 'ssh' file and have 'usr' in path.
Finds real time report in a 'sleep 2' command execution statistic.
Finds real time report in a 'sleep 3' command execution statistic.
Finds real time report in a 'sleep 4' command execution statistic.
Finds real time report in a 'sleep 5' command execution statistic.
Finds real time report in a 'sleep 6' command execution statistic.
Finds real time report in a 'sleep 7' command execution statistic.
Finds real time report in a 'sleep 8' command execution statistic.
Finds real time report in a 'sleep 9' command execution statistic.
For each line in 'file', print result =  followed by the line backwards.
For each line in 'file', print result =  followed by the line in reverse order.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 7.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 30.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled day of the month to 1.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled month to 1.
Forcibly create symbolic links in target directory ~/staging for all files located in directory ~/mirror
Create a symbolic link named "link" in the current working directory that points to "target_file"
Create a symbolic link named "link" in directory "dir" that points to "target_file"
Create a hard link named "link" in the current working directory that points to "target_file"
Print the first column
Print the second column
Print the third column
Print the fourth column
Display the amount of free space on the current filesystem
Format the filename and modification time of files starting with t as a table
Get the status of a process
Get AAAA record for domain $domain
Get CNAME record for domain $domain
Get MX record for domain $domain
Get NS record for domain $domain
Get PTR record for domain $domain
Get SOA record for domain $domain
Get domain name with 'google' from address $1
Get domain name with 'yahoo' from address $1
Get domain name with 'bing' from address $1
Get the actual grep exectuable path
Get the actual awk exectuable path
Get the actual sed exectuable path
Get the actual tr exectuable path
Get the actual wc exectuable path
Get the actual cut exectuable path
Get the actual sort exectuable path
Get the actual uniq exectuable path
Get the actual head exectuable path
Get the actual tail exectuable path
Gets IP address of 'en0' selected network interface.
Gets IP address of 'wlp4s0' selected network interface.
Gets IP address of 'en1' network interface.
Gets IP address of 'wlp2s0' network interface.
Gets IP address of second listed active network interface in system.
Gets IP address of third listed active network interface in system.
Gets IP address of fourth listed active network interface in system.
Gets IP address of fifth listed active network interface in system.
Gets IP address of sixth listed active network interface in system.
Gets IP address of seventh listed active network interface in system.
Gets IP address of eighth listed active network interface in system.
Gets IP address of ninth listed active network interface in system.
Gets IP address of second listed network interface in system.
Gets IP address of third listed network interface in system.
Gets IP address of fourth listed network interface in system.
Gets IP address of fifth listed network interface in system.
Gets IP address of sixth listed network interface in system.
Gets IP address of seventh listed network interface in system.
Gets IP address of eighth listed network interface in system.
Gets IP address of ninth listed network interface in system.
Gets IP addresses of all network interfaces.
Gets the MAC address of all network interfaces.
Gets the IP address of a specific network interface.
Gets MAC address of en1 network interface.
Gets MAC address of en2 network interface.
Gets MAC address of en3 network interface.
Gets MAC address of en4 network interface.
Gets MAC address of fw0 network interface.
Gets MAC address of fw1 network interface.
Gets MAC address of fw2 network interface.
Gets MAC address of fw3 network interface.
Gets MAC address of gif0 network interface.
Gets MAC address of grs0 network interface.
Gets MAC address of hme0 network interface.
Gets MAC address of hme1 network interface.
Gets MAC address of hme2 network interface.
Gets MAC address of hme3 network interface.
Gets MAC address of hp-il0 network interface.
Gets MAC address of ieee80211_monitor0 network interface.
Gets MAC address of ieee80211_radiotap0 network interface.
Gets MAC address of irlan0 network interface.
Gets MAC address of irlan1 network interface.
Gets MAC addresses of all IP4 network interfaces.
Gets the IP address of the default gateway.
Gets the IP address of the specified interface.
Gets the netmask of the specified interface.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Gets a job with defined number back to the foreground.
Shows all lines in the file foo that contain the word bar.
Shows all lines in the file foo that contain the word bar, case-insensitively.
Shows all lines in the file foo that do not contain the word bar.
Shows all lines in the file foo that contain the word bar, followed by the line number on which it occurs.
Shows all lines in the file foo that contain the word bar, preceded by the line number on which it occurs.
Grab variable = value pairs from a windows style .ini file into the current shell.
Get all lines from a file that contain a certain word.
Get all lines from a file that contain a certain word, ignoring case.
Get all lines from a file that do not contain a certain word.
Count the number of times a certain word appears in a file.
Print all lines in a file that are longer than a certain number of characters.
Print all lines in a file that are shorter than a certain number of characters.
Immediately kill all processes using TCP port 3000 on the system.
Immediately kill all processes using TCP port 3000 on the system.
Print all lines of a file that contain the word "bash"
Print all lines of a file that do not contain the word "bash"
Print all lines of a file that contain the word "Bash"
Print all lines of a file that do not contain the word "Bash"
Print all lines of a file that contain the word "bash" in any case
Print all lines of a file that do not contain the word "bash" in any case
Print all lines of a file that contain the word "Bash" in any case
Print the first 10 lines of a file
Print the last 10 lines of a file
Print all but the first 10 lines of a file
Insert | every 30 characters in file longline
Insert _ every 30 characters in file longline
Insert * every 30 characters in file longline
Insert + every 30 characters in file longline
Insert = every 30 characters in file longline
Insert - every 30 characters in file longline
Insert the current date on line 15 of test.html
Insert the current time on line 15 of test.html
Insert the current user on line 15 of test.html
Insert the current working directory on line 15 of test.html
Insert the contents of file1 on line 15 of test.html
Append the contents of file1 to the end of test.html
Prepend the contents of file1 to the beginning of test.html
Replace all occurrences of “foo” with “bar” in test.html
Delete all lines in test.html that contain “foo”
Delete all lines in test.html that do not contain “foo”
Print only lines 5-10 of test.html
Install 'mono-devel' package, answering 'no' for all questions.
Installs 'firefox' package without using 'sublime2' repository.
Installs 'firefox' package without using 'sublime3' repository.
Installs 'firefox' package without using 'sublime4' repository.
Installs 'firefox' package without using 'sublime5' repository.
Installs 'firefox' package without using 'sublime6' repository.
Installs 'firefox' package without using 'sublime7' repository.
Installs 'firefox' package without using 'sublime8' repository.
Installs all packages from a current folder, excluding ones that match pattern '*foo*'.
Installs all packages from a current folder, excluding ones that match pattern '*bar*'.
Installs all packages from a current folder, excluding ones that match pattern '*baz*'.
Installs all packages from a current folder, excluding ones that match pattern '*qux*'.
Installs all packages from a current folder, excluding ones that match pattern '*quux*'.
Installs all packages from a current folder, excluding ones that match pattern '*corge*'.
Installs the kernel-devel package
Installs the gcc package
Installs the make package
Installs the patch package
Installs the systemtap-sdt-devel package
Installs the elfutils-libelf-devel package
List all files in the current directory, including hidden files.
List all files in the current directory, sorted by size.
List all files in the current directory, sorted by modification time.
Left justify number each non-blank line in log.txt as input to sed ...
Left justify number each non-blank line in file.txt as input to sed ...
Left justify number each non-blank line in data.txt as input to sed ...
List each subdirectory name composing the current working directory
List all files in the current directory and subdirectories
List all directories in the current directory
List all files in the current directory, sorted by size
Lists available updates for installed packages.
Checks for available updates for all installed packages.
Checks for available updates for the specified package.
Login to remote system app2 through an ssh gateway system called gw
Login to remote system app3 through an ssh gateway system called gw
Login to remote system app4 through an ssh gateway system called gw
Login to remote system app5 through an ssh gateway system called gw
Login to remote system app6 through an ssh gateway system called gw
Login to remote system app7 through an ssh gateway system called gw
Login to remote system app8 through an ssh gateway system called gw
Login to remote system app9 through an ssh gateway system called gw
Login to remote system app10 through an ssh gateway system called gw
Login to remote system app11 through an ssh gateway system called gw
Login to remote system app12 through an ssh gateway system called gw
Login to remote system app13 through an ssh gateway system called gw
Login to remote system app14 through an ssh gateway system called gw
Get the first column of infile
Get the second column of infile
Get the third column of infile
Get the fourth column of infile
Get the fifth column of infile
Mathematically sum each line in the output of ...
Generate a list of all the files in the current directory that begin with the letter 'a'
Move the file 'temp.txt' into the subdirectory 'test'
Copy the file 'temp.txt' into the subdirectory 'test'
Change the permissions of the file 'temp.txt' so that only the owner can read and write it
Merge already sorted files *.txt and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix output
Split a file into multiple files with a maximum of 1000 lines each
Split a file into multiple files with a maximum of 1000 lines each and prefix each file with the string "x"
Join files 'text.txt' and 'codes.txt' by outputting any lines whose first field in the first matches the first field in the second.
Join files 'text.txt' and 'codes.txt' by outputting any lines whose first field in the first matches the second field in the second.
Modify and rewrite 'file' replacing the second instance of foo on each line with bar
Modify and rewrite 'file' replacing the third instance of foo on each line with bar
Modify and rewrite 'file' replacing all instances of foo on each line with bar
Modify and rewrite 'file' replacing the first instance of foo on each line with bar, but only printing lines that are modified
Modify and rewrite 'file' replacing the second instance of foo on each line with bar, but only printing lines that are modified
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, but only printing lines that are modified
Move all files and directories in the current directory to /foo
Move all files in the current directory to /foo
Move all directories in the current directory to /foo
Move all .txt files in the current directory to /foo
Move all files and directories matching *.boo in the current directory to subdir
Move all files and directories matching *.foo in the current directory to subdir
Move all files and directories matching *.bar in the current directory to subdir
Number each line in /etc/passwd as right-justified zero padded to a width of 9
Number each line in /etc/group as right-justified zero padded to a width of 9
Number each line in /etc/shadow as right-justified zero padded to a width of 9
Number each line in /etc/gshadow as right-justified zero padded to a width of 9
Number each line in /etc/passwd- as right-justified zero padded to a width of 9
Number each line in /etc/group- as right-justified zero padded to a width of 9
Number each line in /etc/shadow- as right-justified zero padded to a width of 9
Number each line in foobar as right-justified zero padded to a width of 9
Number each line in foobar as left-justified zero padded to a width of 9
Number each line in foobar as right-justified space padded to a width of 9
Number each line in foobar as left-justified space padded to a width of 9
Number each line in foobar as right-justified zero padded to a width of 10
Number each line in foobar as left-justified zero padded to a width of 10
Number each line in foobar as right-justified space padded to a width of 10
Number every line of standard input as zero padded to 6 characters followed by -
Number every line of standard input as one padded to 6 characters followed by -
Number every line of standard input as two padded to 6 characters followed by -
Number every line of standard input as three padded to 6 characters followed by -
Number every line of standard input as four padded to 6 characters followed by -
Output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.
Output all lines starting at line 16224 until the end of the file.
Output all lines from the beginning of the file until line 16482.
Prepend 'foo' to the file 'bar'
Append 'foo' to the file 'bar'
Replace 'foo' with 'bar' in the file 'baz'
Copy the file 'foo' to the file 'bar'
Prepend date to ping output to google.com
Prepend date and time to ping output to google.com
Append date to ping output to google.com
Prepends date to ping output
Prepends time to ping output
Appends date to ping output
Appends time to ping output
Outputs only date for each line of ping output
Prints all lines from /etc/passwd that contain the word root.
Prints all lines from /etc/passwd that do not contain the word root.
Prints all lines from /etc/passwd that contain the word daemon.
Prints all lines from /etc/passwd that do not contain the word daemon.
Prints all lines from /etc/passwd that contain the word bin.
Prints all lines from /etc/passwd that do not contain the word bin.
Prints all lines from /etc/passwd that contain the word sys.
Prints all lines from /etc/passwd that do not contain the word sys.
Prints all lines from /etc/passwd that contain the word sync.
Print 1 byte from /dev/urandom as an unsigned decimal value and no address radix
Print 1 byte from /dev/urandom as a signed octal value and no address radix
Print 1 byte from /dev/urandom as an unsigned octal value and no address radix
Print 1 byte from /dev/urandom as a signed decimal value and show the address radix in hexadecimal
Print 1 byte from /dev/urandom as an unsigned decimal value and show the address radix in hexadecimal
Print 1 byte from /dev/urandom as a signed octal value and show the address radix in hexadecimal
Print the first 3 lines of file.txt
Print the last 3 lines of file.txt
Print all but the last 3 lines of file.txt
List all files in the current directory
List all files in the current directory, including hidden files
List all files in the current directory, one file per line
Sort the contents of file.txt alphabetically
Sort the contents of file.txt numerically
Reverse the order of the lines in file.txt
Print IP addresses of the current host
Get public IP address
Get IP address of a domain
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print A record for domain 'domain.' from 'some.other.ip.address' nameserver
Print MX record for domain 'domain.' from 'some.other.ip.address' nameserver
Print A record for domain 'domain.' from 8.8.8.8 nameserver
Print MX record for domain 'domain.' from 8.8.8.8 nameserver
Print TXT record for domain 'domain.' from 8.8.8.8 nameserver
Print a line of $variable '-' characters
Print a line of $variable '=' characters
Print a line of $variable '*' characters
Print a line of $variable '+' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable ',' characters
Print a line of $variable '.' characters
Print a line of 98 '=' characters
Print a line of 97 '=' characters
Print a line of 96 '=' characters
Print a line of 95 '=' characters
Print a line of 94 '=' characters
Print a line of 93 '=' characters
Print a line of 92 '=' characters
Print a line of 91 '=' characters
Print a line of 90 '=' characters
Print a line of 89 '=' characters
Print a line of 88 '=' characters
Print a line of 87 '=' characters
Print a line of 86 '=' characters
Print a line of 85 '=' characters
Print a line of 84 '=' characters
Print a line of 83 '=' characters
Print a line of 82 '=' characters
Print a line of 81 '=' characters
Print a randomly sorted list of numbers from 1 to 10 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 100 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 1000 to file /tmp/lst and the screen followed by  -------
Print amount of space available on the file system containg path to the current working directory.
Print amount of space available on the file system containg path to the home directory.
Print amount of space available on the file system containg path to the root directory.
Print amount of space available on the file system containg path to the usr directory.
Print amount of space available on the file system containg path to the var directory.
Print amount of space available on the file system containing path to the current working directory.
Print amount of space available on the file system containing path to the home directory.
Print amount of space available on the file system containing path to the root directory.
Print and save the ping results of 50 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 75 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print content of '2' file
Print content of '3' file
Print content of '4' file
Print content of '5' file
Print content of '6' file
Print content of '7' file
Print content of '8' file
Print content of '9' file
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated decimal bytes on a single line
Print contents of file as space separated unsigned decimal bytes on a single line
Print contents of file as space separated signed decimal bytes on a single line
Print contents of file as space separated ASCII characters on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated unsigned decimal words on a single line
Print the first string $s
Print the last string $s
Use tr to remove all occurrences of $r in $s
Use sed to remove all occurrences of $r in $s
Use grep to print all lines in $s that contain $r
Use awk to print all lines in $s that contain $r
Use cut to print the first field of every line in $s
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with % character removed
Print each column in file with ^ character removed
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with ~ character removed
Print each column in file with ^ character removed
Print every 16 bytes of standard input in groups of two followed by a space
Print every 8 bytes of standard input in groups of two followed by a space
Print every 4 bytes of standard input in groups of two followed by a space
Print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20
Print every 21 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-21
Print every 22 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-22
Print every 23 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-23
Print every 24 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-24
Print every 25 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-25
Print every 26 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-26
Print every 27 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-27
Print the name of the current branch.
List all available branches.
Switch to the specified branch.
Create a new branch with the specified name.
Delete the specified branch.
Print the name of the current branch.
List all branches.
List all remote branches.
Switch to a different branch.
Create a new branch.
Delete a branch.
Force delete a branch.
Print last 20 commands in history
Print last 30 commands in history
Print last 40 commands in history
Print last 11 commands in history with the first 7 characters removed
Print last 12 commands in history with the first 7 characters removed
Print last 13 commands in history with the first 7 characters removed
Print last 14 commands in history with the first 7 characters removed
Print last 15 commands in history with the first 7 characters removed
Print last 16 commands in history with the first 7 characters removed
Print last 17 commands in history with the first 7 characters removed
Print last 18 commands in history with the first 7 characters removed
Print last 19 commands in history with the first 7 characters removed
Print last 20 commands in history with the first 7 characters removed
Print last 21 commands in history with the first 7 characters removed
Print last 22 commands in history with the first 7 characters removed
Print last 23 commands in history with the first 7 characters removed
Print last 24 commands in history with the first 7 characters removed
Print last 25 commands in history with the first 7 characters removed
Print last 26 commands in history with the first 7 characters removed
Print last 27 commands in history with the first 7 characters removed
Print lines in the sorted contents of a.txt that are not in the sorted contents of b.txt
Print lines in the sorted contents of a.txt that are in the sorted contents of b.txt
Print lines in the sorted contents of a.txt that are in the sorted contents of b.txt, with a tab character between the columns
Print lines unique to file1
Print lines unique to file2
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 50 using up to 4 processes
Print numbers from 1 to 60 using up to 4 processes
Print numbers from 1 to 70 using up to 4 processes
Print numbers from 1 to 80 using up to 4 processes
Print numbers from 1 to 90 using up to 4 processes
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 10 with padded leading zeros
Print numbers from 1 to 100 with padded leading zeros
Print numbers from 1 to 1000 with padded leading zeros
Print numbers from 1 to 100
Print numbers from 1 to 1000
Print numbers from 1 to 10000
Print numbers from 10 to 100
Print numbers from 100 to 1000
Print top-level domains
Print mail servers for domain google.com
Print name servers for domain microsoft.com
Print start of authority record for domain apple.com
Print space separated list of numbers from $start to $end
Print comma separated list of numbers from $start to $end
Print newline separated list of numbers from $start to $end
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Get the canonical hostname
Get the IP address for a given hostname
Print the SHA-1 message digest of /path/to/destination/file
Print the SHA-256 message digest of /path/to/destination/file
Print the content of the file 'file' deleting the last four lines
Print the content of the file 'file' deleting the first four lines
Print the contents of $FILE starting from line 3
Print the contents of $FILE starting from line 4
Print the contents of $FILE starting from line 5
Print the contents of $FILE starting from line 6
Print the contents of $FILE starting from line 7
Print the contents of $FILE starting from line 8
Print the contents of $FILE starting from line 9
Print the current working directory
List all files in the current working directory
Change the current working directory to the user's home directory
Create a new directory
Remove a directory
Move a file or directory
Copy a file or directory
Remove a file
Print the contents of a file
Print the current working directory
List all files and directories in the current working directory
Change the current working directory to the user's home directory
Create a new directory
Remove a directory
Copy a file
Move a file
Remove a file
Print the day 2 days ago
Print the day 3 days ago
Print the day 4 days ago
Print the day 5 days ago
Print the day 6 days ago
Print the day 7 days ago
Print the day 8 days ago
Print the day 9 days ago
Print the day 10 days ago
Print the day 11 days ago
Print the day 12 days ago
Print the first three bytes of my_driver in octal
Print the first four bytes of my_driver in octal
Print the first five bytes of my_driver in octal
Print the first six bytes of my_driver in octal
Print the first seven bytes of my_driver in octal
Print the git log in a tabular form
Print the git log for the last 10 commits
Print the git log for a specific author
Print the git log for a specific committer
Print the git log for a specific date range
Print the git log for a specific file
Print the last 20 commands in history
Print the last 30 commands in history
Print the last 40 commands in history
Print the last 50 commands in history
Print the last 60 commands in history
Print the last 70 commands in history
Print the last 80 commands in history
Print the last 90 commands in history
Print the time to ping 8.8.8.8 followed by a time stamp if the ping is greater than 58
Print the time to ping 8.8.8.8 followed by a time stamp if the ping is greater than 100
Print the time to ping 8.8.8.8 followed by a time stamp if the ping is greater than 150
Print the lines from standard input in reverse order
Print the lines from standard input in random order
Print the lines from standard input in numerical order
Print the lines from standard input in alphabetical order
Print the first $opt lines of file $OPTARG
Print the last $opt lines of file $OPTARG
Print all but the last $opt lines of file $OPTARG
Print all but the first $opt lines of file $OPTARG
Print lines $opt through $OPTARG of file
Print lines $opt through the end of file
Print lines 1 through $opt of file
Print the first 10 lines of file.txt
Print the last 10 lines of file.txt
Print the contents of file.txt in reverse order
Print all lines of file.txt containing the word "ERROR"
Print all lines of file.txt containing the word "ERROR" and the line number
Print all lines of file.txt not containing the word "ERROR"
Print all lines of file.txt that start with the word "ERROR"
Print variable $module in formatted rows
Print the first 10 lines of file.txt
Print the last 10 lines of file.txt
Print the contents of file.txt in reverse order
Print all lines of file.txt containing the word “ERROR”
Print what year it was 1 day ago
Print what year it was 10 days ago
Print what year it was 100 days ago
Print tomorrow's date as yyy:mm:dd
Print the date one week ago as yyy:mm:dd
Print the date two weeks ago as yyy:mm:dd
Print the date one month ago as yyy:mm:dd
Print the date two months ago as yyy:mm:dd
Print the date three months ago as yyy:mm:dd
Print the date four months ago as yyy:mm:dd
Print the date five months ago as yyy:mm:dd
Prints all child processes of a process with id 20238, separated with comma.
Prints all processes running on the system, in a tree-like format.
Prints brief information about available package with word 'vim'.
Prints brief information about available package with word 'tmux'.
Prints brief information about available package with word 'rsync'.
Prints brief information about available package with word 'redis'.
Prints brief information about available package with word 'python'.
Prints brief information about available package with word 'openssh'.
Prints brief information about available package with word 'nginx'.
Prints brief information about available package with word 'mysql'.
Prints brief information about available package with word 'monit'.
Prints brief information about available package with word 'memcached'.
Prints brief information about available package with word 'logrotate'.
Prints calendar of March, 1900.
Prints calendar of April, 1900.
Prints calendar of May, 1900.
Prints calendar of June, 1900.
Prints calendar of July, 1900.
Prints calendar of August, 1900.
Prints calendar of September, 1900.
Prints calendar of October, 1900.
Prints calendar of November, 1900.
Prints the calendar of July, 2009.
Prints current directory name
Prints parent directory name
Prints the home directory
Prints git log message with a custom time format string
Prints git log messages for a specific author
Prints git log messages for a specific date range
Prints git log messages for a specific file
Prints help on 'apt-get' utility.
Prints help on 'dpkg' utility.
Prints help on 'rpm' utility.
Read a line from standard input into the first argument using an interactive shell with prompt >
Read a line from standard input into the second argument using an interactive shell with prompt >
Read a line from standard input into the third argument using an interactive shell with prompt >
Read a line from standard input into the fourth argument using an interactive shell with prompt >
Read a line from standard input into the fifth argument using an interactive shell with prompt >
Read a line from standard input into the sixth argument using an interactive shell with prompt >
Read a line from standard input into the seventh argument using an interactive shell with prompt >
Read a line from standard input with a timeout of 0.2 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.3 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.4 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.5 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.6 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.7 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.8 seconds and prompt This will be sent to stderr
Read a line from standard input with a timeout of 0.9 seconds and prompt This will be sent to stderr
Read hexadecimal bytes from device /dev/midi2
Read hexadecimal bytes from device /dev/midi3
Read hexadecimal bytes from device /dev/midi4
Read hexadecimal bytes from device /dev/midi5
Read hexadecimal bytes from device /dev/midi6
Read hexadecimal bytes from device /dev/midi7
Read hexadecimal bytes from device /dev/midi8
Read hexadecimal bytes from device /dev/midi9
Read hexadecimal bytes from device /dev/midi10
Read hexadecimal bytes from device /dev/midi11
Read hexadecimal bytes from device /dev/midi12
Read hexadecimal bytes from device /dev/midi13
Read hexadecimal bytes from device /dev/midi14
Read hexadecimal bytes from device /dev/midi15
Read hexadecimal bytes from device /dev/midi16
List all available screen sessions
Create a new screen session with the name "foo"
Detach from the current screen session
Recursively add user read permission to all files under /path/to/git/repo/objects
Recursively add group write permission to all files under /path/to/git/repo/objects
Recursively add group read permission to all files under /path/to/git/repo/objects
Recursively add world write permission to all files under /path/to/git/repo/objects
Recursively change owner to $JBOSS_AS_USER of $JBOSS_AS_DIR
Recursively change the owner and group of /var/benedict-data/ to benedict
Recursively change the owner and group of /var/caroline-data/ to caroline
Recursively change the owner and group of /var/daniel-data/ to daniel
Recursively change the owner and group of /var/emily-data/ to emily
Recursively change the owner and group of /var/frank-data/ to frank
Recursively change the owner and group of /var/grace-data/ to grace
Recursively change the owner and group of /var/henry-data/ to henry
Recursively change the owner and group of /var/ian-data/ to ian
Recursively change the owner and group of /var/jacob-data/ to jacob
Recursively change the owner and group of /var/jayden-data/ to jayden
Recursively change the owner and group of /home/user1 and 775 to your_user_name
Recursively change the owner and group of /home/user2 and 775 to your_user_name
Recursively change the owner and group of /home/user3 and 775 to your_user_name
Recursively change the owner and group of subdir2 to user2
Recursively change the owner and group of subdir3 to user3
Recursively change the owner and group of subdir4 to user4
Recursively change the owner and group of subdir5 to user5
Recursively change the owner and group of subdir6 to user6
Recursively change the owner and group of subdir7 to user7
Recursively change the owner and group of subdir8 to user8
Recursively change the owner and group of subdir9 to user9
Recursively change the owner and group of subdir3 to user3
Recursively change the owner and group of subdir4 to user4
Recursively change the owner and group of subdir5 to user5
Recursively change the owner and group of subdir6 to user6
Recursively change the owner and group of subdir7 to user7
Recursively change the owner and group of subdir8 to user8
Recursively change the owner and group of subdir9 to user9
Recursively change the owner and group of all files in the current directory to bin
Recursively change the owner and group of all files in the current directory to daemon
Recursively change the user and group of all files in /etc/passwd to root
Recursively change the user and group of all files in /etc/shadow to root
Recursively change the user and group of all files in /etc/group to root
Recursively change the user and group of all files in /etc/gshadow to root
Recursively copies everything from '/aaa/aaa/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/bbb/bbb/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/ccc/ccc/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/ddd/ddd/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/eee/eee/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/fff/fff/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/ggg/ggg/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/hhh/hhh/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively copies everything from '/iii/iii/' to the '/xxx/xxx' overwriting the existing files and answering 'yes' on each request for overwriting.
Recursively removes all files like '_*' and '.DS_Store' from /var/www/html/ folder.
Remove all files like '_*' and '.DS_Store' from the current directory.
Prints the first 10 lines of a file.
Prints the last 10 lines of a file.
Shows the current working directory.
Shows all files in the current working directory, including hidden files.
Shows all files in the current working directory, excluding hidden files.
Shows all files in the current working directory, including hidden files, in long format.
Shows all files in the current working directory, excluding hidden files, in long format.
Creates a new directory.
Redirects standard output to file.
Redirects standard error to file.
Appends standard output to file.
Appends standard error to file.
Remove all the files and directories that are in /dir1 but not in /dir2.
Remove all the files and directories that are in /dir2 but not in /dir1.
Recursively copy all files and directories from /dir1 to /dir2.
Remove all files in a directory except for hidden files
Remove all files in a directory except for hidden files and directories
Remove all files in a directory except for hidden directories
Recursively remove all empty directories
Remove the 456_ prefix from all filenames of .txt files in current directory.
Remove the 789_ prefix from all filenames of .txt files in current directory.
Remove the 012_ prefix from all filenames of .txt files in current directory.
Remove the 345_ prefix from all filenames of .txt files in current directory.
Remove the 678_ prefix from all filenames of .txt files in current directory.
Remove the path $1 from the PATH environment variable
Add the path $1 to the PATH environment variable
Print all the paths in the PATH environment variable
Remove a file
Remove a directory
Removes alias with 'ls' name.
Removes alias with 'grep' name.
Removes alias with 'mv' name.
Removes alias with 'rm' name.
Removes alias with 'mkdir' name.
Removes alias with 'cp' name.
Removes all files from current folder but 10 newest ones.
Removes all files from current folder but 15 newest ones.
Removes all files from current folder but 20 newest ones.
Removes all files from current folder but 25 newest ones.
Removes all files from current folder but 30 newest ones.
Removes all files from current folder but 35 newest ones.
Removes all files from current folder but 40 newest ones.
Removes all files from current folder but 45 newest ones.
Removes shell alias with name 'ls'.
Removes shell alias with name 'grep'.
Removes shell alias with name 'mv'.
Removes shell alias with name 'rm'.
Removes shell alias with name 'mkdir'.
Removes shell alias with name 'cd'.
Removes shell alias with name 'exit'.
Removes shell alias with name 'chmod'.
Rename file0002.txt to 2.txt
Rename file0003.txt to 3.txt
Rename file0004.txt to 4.txt
Rename file0005.txt to 5.txt
Rename file0006.txt to 6.txt
Rename file0007.txt to 7.txt
Rename file0008.txt to 8.txt
Rename file0009.txt to 9.txt
Rename file0010.txt to 10.txt
Rename file0011.txt to 11.txt
Rename file0012.txt to 12.txt
Rename file002abc.txt to abc2.txt
Rename file003abc.txt to abc3.txt
Rename file004abc.txt to abc4.txt
Rename file005abc.txt to abc5.txt
Rename file006abc.txt to abc6.txt
Rename file007abc.txt to abc7.txt
Rename file008abc.txt to abc8.txt
Rename file009abc.txt to abc9.txt
Rename file010abc.txt to abc10.txt
Rename file011abc.txt to abc11.txt
Rename file012abc.txt to abc12.txt
Rename file013abc.txt to abc13.txt
Rename all .jpg files, changing the string _h.jpg into _half.jpg.
Rename all .jpeg files, changing the string _h.jpeg into _half.jpeg.
Rename all .gif files, changing the string _h.gif into _half.gif.
Rename all .tif files, changing the string _h.tif into _half.tif.
Rename all .tiff files, changing the string _h.tiff into _half.tiff.
Replace - with 0 in columns 4 and 5 of file test.in and format as a table
Replace - with 0 in columns 1, 4 and 5 of file test.in and format as a table
Replace - with 0 in columns 2, 4 and 5 of file test.in and format as a table
Replace - with 0 in columns 3, 4 and 5 of file test.in and format as a table
Replace all colons with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all semicolons with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all asterisks with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all ampersands with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all left parentheses with newlines in $list and search for the first match to the regex ^$removepat\$ where $removepat is a variable and save the result to variable 'removestr'
Replace all newlines from standard input except the last with spaces
Remove all leading whitespace from standard input
Remove all trailing whitespace from standard input
Replace all whitespace from standard input with a single space
Print only lines from standard input that contain at least one non-whitespace character
Print only lines from standard input that contain at least one alphabetic character
Print only lines from standard input that contain at least one numeric character
Print only lines from standard input that contain at least one uppercase alphabetic character
Replace all newlines with spaces in the contents of file
Replace all instances of "foo" with "bar" in file
Replace all instances of "foo" with "bar" in every file in directory
Append text to the end of file
Prepend text to the beginning of file
Print the first 10 lines of file
Print the last 10 lines of file
Print lines 10-20 of file
Remove all files in the current directory that end with .txt
Create a new directory called foo
Move the file bar.txt into the directory foo
Copy the file baz.txt into the directory foo
Replace the leading spaces in the output of history with periods
Replace all spaces in the output of history with periods
Output the last 10 lines of history
Report file system mounted at $path_in_question disk usage if canonical path $path_in_question is a mount point.
Report file systems disk space usage pretty formatted.
Get free and used memory information.
Get free and used disk space information.
Get free and used swap space information.
List all open files.
List all listening ports.
Report only total size of file systems in terabytes.
Report only total size of file systems in terabytes.
Report only total size of file systems in terabytes.
Reports time consumed by command 'sleep 2' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 3' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 4' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 5' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 6' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 7' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 8' to the file time.txt together with command error output.
Reports time consumed by command 'sleep 2' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 3' to the file time.txt together, and saves command error output to sleep.stderr.
Reports time consumed by command 'sleep 4' to the file time.txt together, and saves command error output to sleep.stderr.
Run the command 'true' with an empty environment variable doSecond
Run the command 'true' with an empty environment variable doThird
Run the command 'true' with an empty environment variable doFourth
Run the command 'true' with an empty environment variable doFifth
Run the command 'true' with an empty environment variable doSixth
Run the command 'true' with an empty environment variable doSeventh
Run the command 'true' with an empty environment variable doEighth
Run the command 'true' with an empty environment variable doNinth
Run the command 'true' with an empty environment variable doTenth
Run the command 'true' with an empty environment variable doEleventh
Run the command 'true' with an empty environment variable doTwelfth
Run the command 'true' with an empty environment variable doThirteenth
Run the command 'true' with an empty environment variable doFourteenth
Run the command 'true' with an empty environment variable doFifteenth
Run the command 'true' with an empty environment variable doSixteenth
Run the command 'true' with an empty environment variable doSeventeenth
Run the command 'true' with an empty environment variable doEighteenth
Run the command 'true' with an empty environment variable doNineteenth
SSH into hostname on port 2222 as user myName
SSH into hostname on port 3333 as user myName
SSH into hostname on port 4444 as user myName
SSH into hostname on port 5555 as user myName
SSH into hostname on port 6666 as user myName
SSH into hostname on port 7777 as user myName
SSH into hostname on port 8888 as user myName
SSH into hostname on port 9999 as user myName
SSH into hostname on port 22 as user root
SSH into hostname on port 2222 as user root
SSH into hostname on port 3333 as user root
SSH into hostname on port 4444 as user root
SSH into hostname on port 5555 as user root
SSH into hostname on port 6666 as user root
SSH into hostname on port 7777 as user root
SSH into hostname on port 2222 as user myName
SSH into hostname on port 3333 as user myName
SSH into hostname on port 4444 as user myName
SSH into hostname on port 5555 as user myName
SSH into hostname on port 6666 as user myName
SSH into hostname on port 7777 as user myName
SSH into hostname on port 8888 as user myName
SSH into hostname on port 9999 as user myName
SSH into hostname on port 1111 as user myName
SSH into hostname on port 1212 as user myName
SSH into hostname on port 1313 as user myName
SSH into hostname on port 1414 as user myName
SSH into server as user user and interpret commands in /bin/bash until EOT is received
SSH into server as user user2 and interpret commands in /bin/bash until EOT is received
SSH into server as user user3 and interpret commands in /bin/bash until EOT is received
SSH into server as user user4 and interpret commands in /bin/bash until EOT is received
SSH into server as user user5 and interpret commands in /bin/bash until EOT is received
SSH into server as user user6 and interpret commands in /bin/bash until EOT is received
SSH into server as user user7 and interpret commands in /bin/bash until EOT is received
SSH into server as user user8 and interpret commands in /bin/bash until EOT is received
SSH into server as user user9 and interpret commands in /bin/bash until EOT is received
SSH into server as user user10 and interpret commands in /bin/bash until EOT is received
SSH into server as user user11 and interpret commands in /bin/bash until EOT is received
SSH into server as user user12 and interpret commands in /bin/bash until EOT is received
SSH into server as user user13 and interpret commands in /bin/bash until EOT is received
SSH into server as user user14 and interpret commands in /bin/bash until EOT is received
SSH into server as user user15 and interpret commands in /bin/bash until EOT is received
SSH into server as user user16 and interpret commands in /bin/bash until EOT is received
SSH into server as user user17 and interpret commands in /bin/bash until EOT is received
SSH into server as user user18 and interpret commands in /bin/bash until EOT is received
Save number of lines with any-cased 'merge' from $COMMIT_EDITMSG file in 'MERGE' variable
Save number of lines with any-cased 'conflict' from $COMMIT_EDITMSG file in 'CONFLICT' variable
Save number of lines with any-cased 'resolve' from $COMMIT_EDITMSG file in 'RESOLVE' variable
Save system information appended with the current date in 'filename' variable
Get system information and save it in 'filename'
Get system information and save it in 'filename' with the current date
Save the canonical filename of $BASH_SOURCE in variable me
Save the absolute filename of $BASH_SOURCE in variable me
Save the first two letters of the system host name to variable DC
Save the first three letters of the system host name to variable DCL
Save the first four letters of the system host name to variable DCLI
Save the network node hostname append with '-', the current date and '.txt' into variable 'filename'
Save the output of the 'ps -ef' command into the file named in the 'filename' variable
Append the output of the 'df -h' command to the file named in the 'filename' variable
Save the short host name appended with .mysqldb in variable DBPREFIX
Save the FQDN host name appended with .mysqldb in variable DBPREFIX
Search $MYGROUP in /etc/group, take the 4th colon separated field, replace comma with newline and save the result to variable 'MYUSERS'
Search for $USER in /etc/passwd, take the 3rd colon separated field, and save the result to variable 'MYUID'
Search for $USER in /etc/passwd, take the 4th colon separated field, and save the result to variable 'MYGID'
Change the working directory to DIR
Create a new directory named DIR
Search for all occurrences of "foo" in bar.txt
List all processes running on the system
List all processes owned by the current user
List all processes running on the system, including their PIDs
List all processes running on the system, including their process names
Search for vid=123 in all compressed files found under /my_home matching *log.20140226*
Search for pid=123 in all compressed files found under /my_home matching *log.20140226*
Search for user=123 in all compressed files found under /my_home matching *log.20140226*
Search for ip=123 in all compressed files found under /my_home matching *log.20140226*
Search for line 111 in file active_record.rb with 2 lines of context
Search for line 222 in file active_record.rb with 2 lines of context
Search for line 333 in file active_record.rb with 2 lines of context
Search for line 444 in file active_record.rb with 2 lines of context
Search for line 555 in file active_record.rb with 2 lines of context
Search for line 666 in file active_record.rb with 2 lines of context
Search for line 777 in file active_record.rb with 2 lines of context
Search for line 888 in file active_record.rb with 2 lines of context
Send 5 ping requests to address 12.34.56.78 and print only the last 2 lines of the summary output.
Send 10 ping requests to address 12.34.56.78 and print only the last 3 lines of the summary output.
Send 15 ping requests to address 12.34.56.78 and print only the last 4 lines of the summary output.
Send SIGHUP signal to all parents of zombie processes.
List all running processes.
List all running processes and their PIDs.
List all running processes, their PIDs, and the time they've been running.
List all processes belonging to the user.
Set variable finalName to the second-to-last slash-separated path component of variable path
Set variable finalName to the last slash-separated path component of variable path
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'dir' to the directory name of first argument to script or function, that is the part before the last slash.
Set variable 'ext' to the filename extension of first argument to script or function, that is the part following the last dot.
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash.
Set variable 'dir' to the directory name of first argument to script or function, that is the part before the last slash.
Set variable 'root' to the root directory of first argument to script or function, that is the part before the first slash.
Set variable 'ext' to the file extension of first argument to script or function, that is the part following the last dot.
Prints all positional arguments except the first one.
Prints all positional arguments except the last one.
Swaps the first two positional arguments.
Show manual for the grep command
Show manual for the chmod command
Show manual for the cp command
Show manual for the mv command
Show manual for the rm command
Show manual for the mkdir command
Show manual for the rmdir command
Show manual for the touch command
Show manual of the grep command
Show manual of the ls command
Show manual of the chmod command
Show manual of the cp command
Show manual of the mv command
Show manual of the rm command
Show manual of the mkdir command
Show manual of the rmdir command
Show manual of the touch command
Show manual page for the grep utility
Show manual page for the chmod utility
Show manual page for the cp utility
Show manual page for the mv utility
Show manual page for the rm utility
Show manual page for the mkdir utility
Show manual page for the rmdir utility
Show manual page for the touch utility
Shows all the listening ports on the system.
Shows all the established connections on the system.
Shows all the open ports on the system.
Shows only IP4, not IP6 address of network interface eth0.
Shows only IP6, not IP4 address of network interface eth0.
Shows only the MAC address of network interface eth0.
Shows only the broadcast address of network interface eth0.
Sort the lines of the file 'temp.txt' and change it in-place
Sort the lines of the file 'temp2.txt' and change it in-place
Sort the lines of the file 'temp3.txt' and change it in-place
Sort the lines of the file 'temp4.txt' and change it in-place
Split 2011.psv into chunks of at most 50000000 lines each as input to ./filter.sh
Use tr to convert all upper case characters in file.txt to lower case
Use grep to print all lines in file.txt that contain the word "hello"
Use sed to delete all lines in file.txt that contain the word "hello"
Use cut to extract the first column of data from file.txt
Use sort to sort the contents of file.txt in reverse alphabetical order
Split <file_name> into files of at most 512 MiB in size
Split <file_name> into files of at most 256 MiB in size
Split <file_name> into files of at most 128 MiB in size
Split <file_name> into files of at most 64 MiB in size
Split <file_name> into files of at most 32 MiB in size
Split <file_name> into files of at most 16 MiB in size
Split <file_name> into files of at most 8 MiB in size
Split <file_name> into files of at most 4 MiB in size
Split ADDRESSS_FILE into files containing at most 20 lines and prefix temp_file_
Split ADDRESSS_FILE into files containing at most 10 lines and prefix temp_file_
Split ADDRESSS_FILE into files containing at most 30 lines and prefix temp_file_
Split ADDRESSS_FILE into files containing at most 40 lines and prefix temp_file_
Split data.tsv into files of at most 100 MiB preserving lines and use a prefix of data.tsv. and numeric suffixes
Split data.tsv into files of at most 50 MiB preserving lines and use a prefix of data.tsv. and numeric suffixes
Split data.tsv into files of at most 25 MiB preserving lines and use a prefix of data.tsv. and numeric suffixes
Split data.tsv into files of at most 5000000 lines each with prefix _tmp
Split data.tsv into files of at most 1000000 lines each with prefix _tmp
Split data.tsv into files of at most 2000000 lines each with prefix _tmp
Split data.tsv into files of at most 3000000 lines each with prefix _tmp
Split database.sql into files of at most 100000 lines each with prefix database-
Split access.log into files of at most 1000 lines each with prefix access-
Split error.log into files of at most 500 lines each with prefix error-
Split file.txt into files of at most 20 lines each with a prefix new
Split file.txt into files of at most 30 lines each with a prefix new
Split file.txt into files of at most 40 lines each with a prefix new
Split hugefile.txt into files with 100000 lines each starting with part. and using numeric suffixes
Split hugefile.txt into files with 200000 lines each starting with part. and using numeric suffixes
Split hugefile.txt into files with 300000 lines each starting with part. and using numeric suffixes
Split hugefile.txt into files with 400000 lines each starting with part. and using numeric suffixes
Split input.txt into files with 1 line each and use a prefix output. and a suffix length of 5
Split input.txt into files with 2 lines each and use a prefix output. and a suffix length of 5
Split input.txt into files with 3 lines each and use a prefix output. and a suffix length of 5
Split input.txt into files with 4 lines each and use a prefix output. and a suffix length of 5
Split randn20M.csv into files of at most 5000000 lines each with prefix _tmp
Split randn20M.csv into files of at most 1000000 lines each with prefix _tmp
Split randn20M.csv into files of at most 2000000 lines each with prefix _tmp
Split randn20M.csv into files of at most 3000000 lines each with prefix _tmp
Split the output of tar [your params] into files of at most 500 MiB in size and use prefix output_prefix
Use gzip to compress the output of tar [your params]
Starts new detached tmux session and runs command $CMD within.
Starts new tmux session with name $NAME and runs command $CMD within.
Starts new tmux session with name $NAME and runs command $CMD within.
Starts new detached tmux session and runs command $CMD within.
Starts new tmux session with name $NAME and runs command $CMD within.
Starts new tmux session in directory $DIR and runs command $CMD within.
Attaches to an existing tmux session with name $NAME.
Symlinks all of formula’s installed files into the Homebrew prefix.
Symlinks all of formula’s installed files into the Homebrew prefix.
Take a file path from standard input and remove it.
Remove the file located at /path/to/file.txt
Takes first text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes second text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes third text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes fourth text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes fifth text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes sixth text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes seventh text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes eighth text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes ninth text field from file 'file.txt' as a domain name and gets short A record for this one.
Takes path list from '.exportfiles.text' file, cuts off first path segment.
Takes path list from '.exportfiles.text' file, cuts off first two path segments.
Unsets GIT_WORK_TREE variable.
Unsets GIT_COMMITTER_EMAIL variable.
Unsets GIT_AUTHOR_EMAIL variable.
Unsets GIT_COMMITTER_NAME variable.
Unsets GIT_AUTHOR_NAME variable.
Unsets GNUPLOT_PS_DIR variable.
Unsets GNUPLOT_LIB variable.
Unsets GNUPLOT_FONTPATH variable.
Unsets GNUPLOT_DPI variable.
Unsets GNUPLOT_CMD variable.
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Unzip and merge all small-*.gz files into files of 2000000 lines
Use metaflac to extract the album field from myfile.flac, and set the variable ALBUM to the value of that field.
Use metaflac to extract the title field from myfile.flac, and set the variable TITLE to the value of that field.
Use metaflac to extract the date field from myfile.flac, and set the variable DATE to the value of that field.
Use metaflac to extract the tracknumber field from myfile.flac, and set the variable TRACKNUMBER to the value of that field.
Use the output of ping google.com as input to awk script packet_loss.awk
Use the output of ping www.google.com as input to awk script packet_loss.awk
Use the output of ping 8.8.8.8 as input to awk script packet_loss.awk
Uses the time utility to report only real execution time of 'grep' command.
Uses the time utility to report only real execution time of 'wc' command.
Uses the time utility to report only real execution time of 'find' command.
Verbosely compresses all files on first depth level keeping original files in place.
Verbosely compresses all files on second depth level keeping original files in place.
Verbosely compresses all files on third depth level keeping original files in place.
Verbosely compresses all files on fourth depth level keeping original files in place.
List all files in the current directory, including hidden files
Create a new directory
Remove a directory
Move a file or directory
Copy a file or directory
Remove a file
Clear the screen
Move up one directory
List files in current directory
Create a new directory
Remove a directory
Copy a file from one location to another
Move a file from one location to another
View manual page of the grep command
View manual page of the ls command
View manual page of the chmod command
View manual page of the cp command
View manual page of the mv command
View manual page of the rm command
View manual page of the mkdir command
View manual page of the rmdir command
View manual page of the touch command
List all files in the current directory, including hidden files.
List all files in the current directory, in long format.
List all files in the current directory, sorted by modification time.
Wrap each line in longline to a maximum of 30 characters breaking at spaces
Wrap each line in longline to a maximum of 40 characters breaking at spaces
Wrap each line in longline to a maximum of 50 characters breaking at spaces
Wrap each line in longline to a maximum of 60 characters breaking at spaces
Wrap each line in longline to a maximum of 70 characters breaking at spaces
Write differences between files a.txt and b.txt side-by-side and not outputting common lines to file c.txt.
Write differences between files a.txt and b.txt as a list of commands that could be used to transform file a into file b.
Output the number of lines in file a.txt that are different from file b.txt
Output the number of characters that are different between files a.txt and b.txt
Write output of ant to the console
Write output of ant to build.log
Write error of ant to the console
Write standard output of ./a.out to standard output and to file output
Write standard output of ./a.out to standard output and to file output.gz
Write standard error of ./a.out to standard output and to file output
Write standard output of ./a.out to standard output and to file output
Write standard error of ./a.out to standard output and to file output
Write standard output to the console and append to file log
Append standard output and error to file log
Discard standard output
Discard standard error
create a new directory
move a file from one directory to another
copy a file from one directory to another
delete a file
list the files in a directory
bind word pwd\n to key code \e[25~
bind word pwd\n to key code \e[26~
bind word pwd\n to key code \e[27~
bind word pwd\n to key code \e[28~
bind word pwd\n to key code \e[29~
bind word pwd\n to key code \e[30~
bind word pwd\n to key code \e[31~
bind word pwd\n to key code \e[32~
bind word pwd\n to key code \e[33~
bind word pwd\n to key code \e[34~
bind word pwd\n to key code \e[35~
bind word pwd\n to key code \e[36~
bind word pwd\n to key code \e[37~
bind word pwd\n to key code \e[38~
change group of the file /etc/passwd to group daemon
change group of the file /etc/shadow to group daemon
change group of the file /etc/group to group daemon
change group of the file /etc/gshadow to group daemon
change group of the file /etc/passwd to group lighttpd
change group of the file /etc/shadow to group lighttpd
change group of the file /etc/group to group lighttpd
change group of the file /etc/gshadow to group lighttpd
change owner of the file /path/to/yourapp to root
change owner of the file dir1 to user root
change group of the file dir1 to group specialusers
make the file dir1 readable by everyone
make the file dir1 writable by everyone
make the file dir1 executable by everyone
make the file dir1 readable, writable, and executable by everyone
make the file dir1 readable and writable by the owner, and readable by everyone else
make the file dir1 writable by the owner, and readable and executable by everyone else
make the file dir1 readable and executable by the owner, and readable by everyone else
change owner of the file it to user root
change owner of the file script.sh to user root
change group of the file script.sh to group root
make the file script.sh readable by everyone
make the file script.sh writable by everyone
make the file script.sh executable by everyone
make the file script.sh readable, writable, and executable by everyone
make the file script.sh readable and writable by the owner, and readable by everyone else
make the file script.sh writable by the owner, and readable and executable by everyone else
make the file script.sh readable, writable, and executable by the owner, and readable by everyone else
change group of the file file to group group_name
change owner and group of the file file to user user_name and group group_name
change mode of the file file to mode
check readline bindings for \x61
check readline bindings for \x62
check readline bindings for \x63
check readline bindings for \x64
check readline bindings for \x65
check readline bindings for \x66
check readline bindings for \x67
check readline bindings for \x68
check readline bindings for \x69
check readline bindings for \x6A
check readline bindings for \x6B
check readline bindings for \x6C
display the manual page of grep
display the manual page of ls
display the manual page of chmod
display the manual page of cp
display the manual page of mv
display the manual page of rm
display the manual page of mkdir
display the manual page of rmdir
display the manual page of touch
extract 'archive.tar.gz' to /destination
extract 'archive.tar' to /destination
extract 'archive.tgz' to /destination
extract 'archive.bz2' to /destination
extract archive stored in $1
extract archive stored in $2
extract archive stored in $3
extract archive stored in $4
extract archive stored in $5
extract archive stored in $6
extract archive stored in $7
extract archive stored in $8
find all the css files in current folder and replace old string with new string
find all the js files in current folder and replace old string with new string
get info about tar from lbzip2 command
get info about tar from plzip command
gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt
gives the chars in line 10 and chars 10 to 13 of line 10, in tst.txt
gives the chars in line 15 and chars 15 to 18 of line 15, in tst.txt
find all files with a certain extension
find all files with a certain extension
list all files in a directory
show current working directory
change directory
create a new directory
delete a file
delete an empty directory
move back one character
move forward one character
move to the beginning of the line
move to the end of the line
move up one line
list all files in a directory
change directory
print working directory
exit the shell
clear the screen
move a file
copy a file
change to the /etc directory
list the contents of the current directory
create a new directory named foo
change to the foo directory
change to the /home/username directory
create a new directory named dirname
remove the directory named dirname
create a new file named filename
remove the file named filename
print the contents of filename
print the first 10 lines of filename
print the last 10 lines of filename
print lines starting at line num1 and ending at line num2 in filename
print bindings for p and e with no case sensitivity
print bindings for c and s with no case sensitivity
print bindings for v and m with no case sensitivity
print bindings for t and r with no case sensitivity
print bindings for g and h with no case sensitivity
print bindings for b and n with no case sensitivity
print readline bindings that use key code '\\e\\C-k'
print readline bindings that use key code '\\e\\C-j'
print readline bindings that use key code '\\e\\C-l'
print readline bindings that use key code '\\e\\C-m'
print readline bindings that use key code '\\e\\C-n'
print readline bindings that use key code '\\e\\C-o'
print the last word in a.txt
print the last word in b.txt
print the last word in c.txt
print the last word in d.txt
print the last word in e.txt
print the last word in f.txt
print the last word in g.txt
print the last word in h.txt
print the last word in i.txt
recursively change owner and group of the directory  /opt/bobd/ to user and group bobd
recursively change owner and group of the directory  /opt/carold/ to user and group carold
recursively change owner and group of the directory  /opt/danield/ to user and group danield
recursively change owner and group of the directory  /opt/edwardd/ to user and group edwardd
recursively change owner and group of the directory  /opt/frankd/ to user and group frankd
recursively change owner and group of the directory  /opt/georged/ to user and group georged
recursively change owner and group of the directory  /opt/henryd/ to user and group henryd
recursively change owner and group of the directory  /opt/ireneD/ to user and group ireneD
recursively change owner and group of the directory  /opt/jamesd/ to user and group jamesd
recursively change owner and group of the directory  /opt/joed/ to user and group joed
recursively change owner and group of the directory  /opt/kated/ to user and group kated
recursively change owner and group of the directory  /opt/larryd/ to user and group larryd
remove all the core files in the current directory
remove all the .o files in the current directory
remove all the .a files in the current directory
remove all the .so files in the current directory
save first 10 lines of a.txt to b.txt
save last 10 lines of a.txt to b.txt
displays the first 10 lines of a.txt
displays the last 10 lines of a.txt
displays lines from a.txt starting at line 5
displays all lines of a.txt except for the first 4
run bash shell as user root
run bash shell as user bob
run bash shell as user alice
list all files and folders in the current directory
create a new directory called test
change directory to the test folder
change to the /etc directory
list the contents of the /etc directory
change the password for user root
when using emacs keymap bind command "\e[2~" to key end_of_line
when using emacs keymap bind command "\e[3~" to key delete_char
when using emacs keymap bind command "\e[4~" to key end_of_file
when using emacs keymap bind command "\e[5~" to key page_up
when using emacs keymap bind command "\e[6~" to key page_down
when using emacs keymap bind command "\e[7~" to key beginning_of_page
when using emacs keymap bind command "\e[8~" to key end_of_page
when using emacs keymap bind command "\eOH" to key beginning_of_line
Display process information every 5 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 10 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 15 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 20 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display process information every 25 seconds, adding __CUSTOM_LINE_MARKER at the end of each line.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Display various information about process currently taking the most CPU time.
Monitor all processes whose command includes 'java'.
List all processes whose command includes 'java'.
Get information about the process with PID 1234.
Get information about the process with PID 1234.
Add prefix to every non-blank line in file.txt
Add suffix to every non-blank line in file.txt
Join every two lines in file.txt with joinstring
Output the first column of file.txt
Output the second column of file.txt
Output the third column of file.txt
Output the fourth column of file.txt
Add suffix to every non-blank line in file.txt
Add prefix to every non-blank line in file.txt
Output the last field of every line in file.txt
Output the first field of every line in file.txt
Output the second field of every line in file.txt
Output the third field of every line in file.txt
Output the fourth field of every line in file.txt
Output the second field of every line in file.txt
Output the third field of every line in file.txt
Output the fourth field of every line in file.txt
Output the fifth field of every line in file.txt
Add prefix_ to every non-blank line in a.txt
Add suffix_ to every non-blank line in a.txt
Add prefix_ and suffix_ to every non-blank line in a.txt
Output every third line starting from the first line of a.txt
Output every third line starting from the second line of a.txt
Add suffix_ to every non-blank line in a.txt
Add prefix_ to every non-blank line in a.txt
Output the first 10 lines of a.txt
Output the last 10 lines of a.txt
Output the middle 10 lines of a.txt
Output the even-numbered lines of a.txt
Add prefix_ and suffix_ to every non-blank line in a.txt
Add prefix_ and suffix_ to every non-blank line in b.txt
Add prefix_ and suffix_ to every non-blank line in c.txt
Add prefix_ and suffix_ to every non-blank line in d.txt
Add prefix_ and suffix_ to every non-blank line in e.txt
Add prefix_ and suffix_ to every non-blank line in f.txt
Add prefix_ and suffix_ to every non-blank line in g.txt
Add prefix_ and suffix_ to every non-blank line in h.txt
Add prefix_ and suffix_ to every non-blank line in i.txt
Replace all occurrences of foo with bar in a.txt
Replace all occurrences of foo with bar in b.txt
Replace all occurrences of foo with bar in c.txt
Replace all occurrences of foo with bar in d.txt
Replace all occurrences of foo with bar in e.txt
Replace all occurrences of foo with bar in f.txt
Replace all occurrences of foo with bar in g.txt
Replace all occurrences of foo with bar in h.txt
Replace all occurrences of foo with bar in i.txt
Replace all occurrences of foo with bar in j.txt
Replace all occurrences of foo with bar in k.txt
Replace all occurrences of foo with bar in l.txt
Replace all occurrences of foo with bar in m.txt
Replace all occurrences of foo with bar in n.txt
Replace all occurrences of foo with bar in o.txt
Replace all occurrences of foo with bar in p.txt
Replace all occurrences of foo with bar in q.txt
Replace all occurrences of foo with bar in r.txt
Replace all occurrences of foo with bar in s.txt
Replace all occurrences of foo with bar in t.txt
Replace all occurrences of foo with bar in every file in the current directory
Replace all occurrences of foo with bar in every file in the specified directory
Replace all occurrences of foo with bar in every file in the current directory, including subdirectories
Replace all occurrences of foo with bar in every file in the current directory, excluding subdirectories
Find all files containing the string foo in the current directory
Find all files containing the string foo in the specified directory
Find all files containing the string foo in the current directory, including subdirectories
Add a date time stamp to every line of output in ping google.com
Add a date time stamp to every line of output in ping yahoo.com
Add a date time stamp to every line of output in ping msn.com
Add a date time stamp to every line of output in ping amazon.com
Add a date time stamp to every line of output in ping www.google.com
Add a date time stamp to every line of output in ping www.yahoo.com
Add a date time stamp to every line of output in ping www.bing.com
Add a date time stamp to every line of output in ping www.aol.com
Add a date time stamp to every line of output in ping www.ask.com
Add directory $HOME/Documents to the directory stack
Add directory $HOME/Music to the directory stack
Add directory $HOME/Pictures to the directory stack
Append the string "& Kilobytes" to the end of every line in $TEMPFILE and format the result as a table
Append the string "& Megabytes" to the end of every line in $TEMPFILE and format the result as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result in reverse alphabetical order, and format the output as a table
Append & Bytes to the end of every line in $TEMPFILE, sort the result in numerical order, and format the output as a table
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Attach to a not detached screen session. (Multi display mode).
Calculate the number of words in file ${my_iso_file} and save it to variable 'words'
Calculate the number of characters in file ${my_iso_file} and save it to variable 'chars'
Append the string "This is a test." to file ${my_iso_file}
Prepend the string "This is a test." to file ${my_iso_file}
Display the first 10 lines of file ${my_iso_file}
Display the last 10 lines of file ${my_iso_file}
Display all lines of file ${my_iso_file} containing the string "test"
Display all lines of file ${my_iso_file} not containing the string "test"
Display all lines of file ${my_iso_file} containing the string "test", with line numbers
Create an empty file named ${my_empty_file}
Delete file ${my_empty_file}
Copy file ${my_source_file} to ${my_destination_file}
Move file ${my_source_file} to ${my_destination_file}
Copy all files matching '*.txt' from the current directory to the directory '/tmp'
Copy all files matching '*.log' from the current directory to the directory '/tmp'
Copy all files matching '*.jpg' from the current directory to the directory '/tmp'
Generate a list of all files in the current directory
Generate a list of all files in the current directory, including hidden files
Generate a list of all files in the current directory, including hidden files, and display them in long format
Generate a list of all files in the current directory, sorted by modification time
Calculate the md5sum of the executable file of command mv
Calculate the md5sum of the executable file of command ls
Calculate the md5sum of the executable file of command rm
Calculate the md5sum of the executable file of command mkdir
Calculate the md5sum of the executable file of command rmdir
Calculate the md5sum of the executable file of command touch
Calculate the md5sum of the executable file of command chmod
Calculate the md5sum of the executable file of command grep
Calculate the md5sum of the executable file of command man
Calculate the md5sum of the executable file of command cat
Calculate the md5sum of the executable file of command less
Calculate the md5sum of the executable file of command more
Calculate the md5sum of the executable file of command head
Calculate the md5sum of the executable file of command tail
Calculate the md5sum of the executable file of command cut
Calculate the md5sum of the executable file of command sort
Calculate the md5sum of the executable file of command uniq
Calculate the md5sum of the executable file of command wc
Calculate the md5sum of the executable file of command find
Calculate the md5sum of the executable file of command cat
Calculate the md5sum of the executable file of command ls
Calculate the md5sum of the executable file of command pwd
Calculate the md5sum of the executable file of command cp
Calculate the md5sum of the executable file of command mv
Calculate the md5sum of the executable file of command rm
Calculate the md5sum of the executable file of command mkdir
Calculate the md5sum of the executable file of command rmdir
Calculate the md5sum of the executable file of command touch
Calculate the md5sum of the executable file of command chmod
Calculate the md5sum of the executable file of command chown
Calculate the md5sum of the executable file of command grep
Calculate the sha1sum of the executable file of command grep
Calculate the md5sum of the executable file of command grep
Calculate the md5sum of the executable file of command awk
Calculate the md5sum of the executable file of command sed
Calculate the md5sum of the executable file of command tr
Calculate the md5sum of the executable file of command wc
Calculate the md5sum of the executable file of command grep
Calculate the md5sum of the executable file of command find
Calculate the md5sum of the executable file of command cat
Calculate the md5sum of the executable file of command top
Calculate the md5sum of the executable file of command grep
Calculate the md5sum of the executable file of command awk
Calculate the md5sum of the executable file of command sed
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'cat'
Calculate the md5sum of the executable file of command 'sed'
Calculate the md5sum of the executable file of command 'awk'
Calculate the md5sum of the executable file of command 'find'
Calculate the md5sum of the executable file of command 'grep'
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'gdb'
Calculate the md5sum of the executable file of command 'git'
Calculate the md5sum of the executable file of command 'go'
Calculate the md5sum of the executable file of command 'hg'
Calculate the md5sum of the executable file of command 'kill'
Calculate the md5sum of the executable file of command 'less'
Calculate the md5sum of the executable file of command 'ls'
Calculate the md5sum of the executable file of command 'make'
Calculate the md5sum of the executable file of command 'man'
Calculate the md5sum of the executable file of command 'mkdir'
Calculate the md5sum of the executable file of command 'mv'
Calculate the md5sum of the executable file of command 'nc'
Calculate the md5sum of the executable file of command 'node'
Calculate the md5sum of the executable file of command 'npm'
Calculate the md5sum of the executable file of command 'ping'
Calculate the md5sum of the executable file of command 'ps'
Calculate the md5sum of the executable file of command 'pwd'
Calculate the md5sum of the executable file of command 'python'
Calculate the md5sum of the executable file of command 'rm'
Calculate the md5sum of the executable file of command 'rmdir'
Calculate the md5sum of the executable file of command 'scp'
Calculate the md5sum of the executable file of command 'sed'
Calculate the md5sum of the executable file of command 'ssh'
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'awk'
Calculate the md5sum of the executable file of command 'sed'
Calculate the md5sum of the executable file of command 'find'
Calculate the md5sum of the executable file of command 'grep'
Calculate the md5sum of the executable file of command 'gcc'
Calculate the md5sum of the executable file of command 'g++'
Calculate the md5sum of the executable file of command 'make'
Calculate the md5sum of the executable file of command 'git'
Calculate the md5sum of the executable file of command 'svn'
Calculate the md5sum of the executable file of command 'curl'
Calculate the md5sum of the executable file of command 'wget'
Calculate the md5sum of the executable file of command 'vim'
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running script.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running myscript.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bnm.pl to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running foo.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bar.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running baz.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running qux.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running quux.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running corge.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running grault.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running garply.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running waldo.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fred.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running plugh.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 15 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 20 minutes instead of 5 minutes.
Change all cron jobs running anm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running cnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running enm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running fnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running gnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running inm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running foo.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running bar.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running baz.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running qux.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running quux.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running dnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running script.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 15 minutes instead of 5 minutes.
Change all cron jobs running hnm.sh to be run every 20 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 10 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 15 minutes instead of 5 minutes.
Change all cron jobs running jnm.sh to be run every 20 minutes instead of 5 minutes.
Change user to amzadm and group to root of /usr/local/bin/aws
Change user to ec2-user and group to root of /usr/local/bin/aws
Change user to amzadm and group to root of /usr/sbin/aws
Change user to root and group to root of /usr/sbin/aws
Change user to ubuntu and group to root of /usr/sbin/aws
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Checks that 'monit' user is in 'www-data' group.
Concatenate with a space every other line in input.txt
Join every two lines in input.txt with a comma
Output the first column of input.txt
Output the second column of input.txt
Output the third column of input.txt
Output the fourth column of input.txt
Join every two lines in input.txt with a tab
Join every three lines in input.txt with a tab
Join every four lines in input.txt with a tab
Output the first column of input.txt
Output the second column of input.txt
Output the third column of input.txt
Output the fourth column of input.txt
Output the third column of input.txt
Output the fourth column of input.txt
Output the fifth column of input.txt
Output the sixth column of input.txt
Output the seventh column of input.txt
Output the eighth column of input.txt
Output the ninth column of input.txt
Output the first column of input.txt
Output the third column of input.txt
Output the first, second, and third columns of input.txt
Continuously write 2222222222222222 without newlines to /dev/to/overwrite
Continuously write 3333333333333333 without newlines to /dev/to/overwrite
Continuously write 4444444444444444 without newlines to /dev/to/overwrite
Continuously write 5555555555555555 without newlines to /dev/to/overwrite
Continuously write 6666666666666666 without newlines to /dev/to/overwrite
Continuously write 7777777777777777 without newlines to /dev/to/overwrite
Continuously write 8888888888888888 without newlines to /dev/to/overwrite
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert Unix `cal` output to latex table code.
Convert the first 1024 bytes of /dev/urandom to a string of hexadecimal bytes
Convert the first 2048 bytes of /dev/urandom to a string of hexadecimal bytes
Changes the current working directory to the previous working directory
Changes the current working directory to the home directory
Copies a file to a directory.
Renames a file.
Deletes a file.
Prints the contents of a file.
Prints the contents of a file to the screen one page at a time.
Prints the contents of a file to the screen one line at a time.
Creates an empty file.
Creates a directory.
Changes the current working directory.
Changes the permissions of a file.
Changes the owner of a file.
Changes the group of a file.
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tgz_
Create compressed archive from my_large_file and split into files of size 1024 MiB with prefix myfiles_split.tgz
Create compressed archive from my_large_file_1 and my_large_file_2 and split into files of size 1024 MiB with prefix myfiles_split.tar
Creates random file name formatted like expression in variable ${str// /X} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[![:alnum:]]/} and saves it in 'rand_str' variable.
Creates random file name formatted like expression in variable ${str//[[:upper:]]/} and saves it in 'rand_str' variable.
Delete all lines of a file
Delete all empty lines from a file
Delete all leading whitespace from a file
Delete all trailing whitespace from a file
Delete all blank lines from a file (including lines with spaces)
Remove all blank lines from a file except for the last line
Remove all blank lines from a file except for the first line
Substitute all occurrences of pattern in each line of file
Substitute first occurrence of pattern in each line of file, but only on lines that contain the word "substitution"
Substitute all occurrences of pattern in each line of file, but only on lines that contain the word "substitution"
Substitute first occurrence of pattern in each line of file, but only on lines that do not contain the word "substitution"
Substitute pattern if it occurs at the end of a line
Substitute pattern if it occurs on a line by itself
Substitute pattern if it is found anywhere in the line
Substitute pattern if it is found at the beginning of a word
Substitute pattern if it is found at the end of a word
Delete all files in current directory except for files ending with '.txt'
Delete all files in current directory except for files ending with '.jpg'
Delete all files in current directory except for files ending with '.pdf'
Delete all files in current directory except for files ending with '.doc'
Display /tmp/file as a table of width 30 with columns filled before rows
Display /tmp/file as a table of width 40 with columns filled before rows
Display /tmp/file as a table of width 50 with columns filled before rows
Display /tmp/file as a table of width 60 with columns filled before rows
Display /tmp/file as a table of width 70 with columns filled before rows
Display /tmp/file as a table of width 40 with columns filled before rows
Display /tmp/file as a table of width 80 with columns filled before rows
Display /tmp/file as a table of width 100 with columns filled before rows
Display /tmp/file as a table of width 50 with columns filled before rows
Display /tmp/file as a table of width 100 with columns filled before rows
Display /tmp/file as a table of width 150 with columns filled before rows
Display /tmp/file as a table of width 200 with columns filled before rows
Display /tmp/file as a table of width 250 with columns filled before rows
Display /tmp/file as a table of width 60 with columns filled before rows
Display /tmp/file as a table of width 80 with columns filled before rows
Display /tmp/file as a table of width 100 with columns filled before rows
Display /tmp/file as a table of width 120 with columns filled before rows
Display /tmp/file as a table of width 140 with columns filled before rows
Display /tmp/file as a table of width 80 with columns filled before rows
Display /tmp/file as a table of width 90 with columns filled before rows
Display /tmp/file as a table of width 100 with columns filled before rows
Display /tmp/file as a table of width 110 with columns filled before rows
Display /tmp/file as a table of width 120 with columns filled before rows
Display /tmp/file as a table of width 130 with columns filled before rows
Display /tmp/file as a table of width 140 with columns filled before rows
Display difference between one.txt and two.txt, side-by-side.
Display difference between one.txt and two.txt, in context format.
Display difference between one.txt and two.txt, in side-by-side format.
Display inputfile all on one line (replace newlines by spaces)
Display inputfile all on one line (replace newlines by tabs)
Display inputfile all on one line (replace newlines by commas)
Display inputfile all on one line (replace newlines by spaces)
Display the first 10 lines of inputfile
Display the last 10 lines of inputfile
Display all but the first 10 lines of inputfile
Display all but the last 10 lines of inputfile
Print only lines containing "pattern" in inputfile
Print only lines not containing "pattern" in inputfile
Print lines matching both "pattern1" and "pattern2" in inputfile
Display inputfile all on one line (replace newlines by commas)
Display inputfile all on one line (replace newlines by semicolons)
Display inputfile all on one line (replace newlines by spaces)
Join every two lines of inputfile together with a comma in between
Replace all occurrences of "foo" with "bar" in every line of inputfile
Replace the first occurrence of "foo" with "bar" in every line of inputfile
Append the contents of inputfile2 to the end of inputfile1
List all the files in a directory
Change the working directory
Create a new directory
Remove a directory
Copy files and directories
Move files and directories
Display source and mount point of the file system containing /some/path.
Display the amount of free space on the file system containing /some/path.
Display the amount of used space on the file system containing /some/path.
Display the total size of the file system containing /some/path.
Display the amount of free space on the file system containing /some/path.
Display the amount of free space on all mounted file systems.
Display the amount of free and used space on the file system containing /some/path.
Display the amount of free and used space on all mounted file systems.
List all the files in /some/path.
List all the files in the current directory.
List all the files in /some/path, including hidden files.
Display the contents of sample_0002.gz with lk=1& removed
Display the contents of sample_0003.gz with lk=1& removed
Display the contents of sample_0004.gz with lk=1& removed
Display the contents of sample_0005.gz with lk=1& removed
Display the contents of sample_0006.gz with lk=1& removed
Display the contents of sample_0007.gz with lk=1& removed
Display the contents of sample_0008.gz with lk=1& removed
Display the contents of sample_0003.gz with lk=1& removed
Display the contents of sample_0004.gz with lk=1& removed
Display the contents of sample_0005.gz with lk=1& removed
Display the contents of sample_0006.gz with lk=1& removed
Display the contents of sample_0007.gz with lk=1& removed
Display the contents of sample_0008.gz with lk=1& removed
Display the contents of sample_0010.gz with lk=1& removed
Display the contents of sample_0011.gz with lk=1& removed
Display the contents of sample_0012.gz with lk=1& removed
Display the contents of sample_0013.gz with lk=1& removed
Display the contents of sample_0014.gz with lk=1& removed
Display the contents of sample_0015.gz with lk=1& removed
Display the contents of sample_0016.gz with lk=1& removed
Display the contents of sample_0017.gz with lk=1& removed
Display the contents of sample_0018.gz with lk=1& removed
Display the host's ECDSA fingerprint using the md5 hasing algorithm.
Display the host's ED25519 fingerprint using the md5 hasing algorithm.
Display the host's ECDSA fingerprint using the sha1 hasing algorithm.
Display the host's ED25519 fingerprint using the sha1 hasing algorithm.
Set the number of commands to remember in the history list
Set the number of commands to remember in the history list
Set the number of commands to remember in the history list
Set the number of commands to remember in the history list
Execute 'tput setaf 11; echo fred' with color support every 2 seconds
Execute 'tput setaf 12; echo fred' with color support every 2 seconds
Execute 'tput setaf 13; echo fred' with color support every 2 seconds
Execute 'tput setaf 14; echo fred' with color support every 2 seconds
Execute 'tput setaf 15; echo fred' with color support every 2 seconds
Execute 'tput setaf 16; echo fred' with color support every 2 seconds
Execute 'tput setaf 17; echo fred' with color support every 2 seconds
Execute 'tput setaf 18; echo fred' with color support every 2 seconds
Execute 'tput setaf 19; echo fred' with color support every 2 seconds
Execute 'tput setaf 20; echo fred' with color support every 2 seconds
Exits from script with exit code 1.
Exits from script with exit code 2.
Exits from script with exit code 3.
Exits from script with exit code 4.
Exits from script with exit code 5.
Exits from script with exit code 6.
Exits from script with exit code 7.
Exits from script with exit code 8.
Export variable PS1 as the current username @ the hostname
Export variable PS2 as a > symbol
Export variable PS3 as a # symbol
Export variable PS4 as a + symbol
Export variable PS4 as a - symbol
Export variable PS4 as a * symbol
Export variable PS4 as a / symbol
Export variable PS4 as a % symbol
Export variable PS4 as a ^ symbol
Export variable PS4 as a & symbol
Export variable PS4 as a | symbol
Export variable PS4 as a ~ symbol
Export variable PS4 as a ` symbol
Export variable PS4 as a ; symbol
Get the first column of file1.txt
Get the second column of file1.txt
Get the third column of file1.txt
Get the fourth column of file1.txt
Extract tar.gz archive and go into the directory that would normally be created by extracting it.
Extract tar.gz archive
Extracts a tar file.
Extracts a gzipped tar file.
Find the MX record for 'yahoo.com'
Find the MX record for 'bing.com'
Find the MX record for 'aol.com'
Find the MX record for 'ask.com'
Find the TXT record for 'yahoo.com'
Find the TXT record for 'bing.com'
Find the TXT record for 'aol.com'
Find the TXT record for 'ask.com'
Find all files/directories 3 levels down the current directory that are enlisted in file 2
Find all files/directories 3 levels down the current directory that are enlisted in file 3
Find all files/directories 3 levels down the current directory that are enlisted in file 4
Find all files/directories 3 levels down the current directory that are enlisted in file 5
Find all files/directories 3 levels down the current directory that are enlisted in file 6
Find all files/directories 3 levels down the current directory that are enlisted in file 7
Find all files/directories 3 levels down the current directory that are enlisted in file 8
Find all files/directories 3 levels down the current directory that are enlisted in file 9
Find all files/directories 4 levels down the current directory that are enlisted in file 2
Find all files/directories 4 levels down the current directory that are enlisted in file 3
Find all files/directories 4 levels down the current directory that are enlisted in file 4
Find all files/directories 4 levels down the current directory that are enlisted in file 5
Find all files/directories 4 levels down the current directory that are enlisted in file 6
Find all files/directories 4 levels down the current directory that are enlisted in file 7
Find all files/directories 4 levels down the current directory that are enlisted in file 8
Find all files/directories 4 levels down the current directory that are enlisted in file 9
Find all files/directories 5 levels down the current directory that are enlisted in file 2
Find all files/directories 5 levels down the current directory that are enlisted in file 3
Find all files/directories 5 levels down the current directory that are enlisted in file 4
Find all files/directories 5 levels down the current directory that are enlisted in file 5
Find all files/directories 5 levels down the current directory that are enlisted in file 6
Find all files/directories 5 levels down the current directory that are enlisted in file 7
Find all files/directories 5 levels down the current directory that are enlisted in file 8
Find all files/directories 5 levels down the current directory that are enlisted in file 9
Find all files/directories 7 levels down the current directory that are enlisted in file 2
Find all files/directories 8 levels down the current directory that are enlisted in file 1
Find all files/directories 8 levels down the current directory that are enlisted in file 2
Find all files/directories 9 levels down the current directory that are enlisted in file 1
Find all files/directories 8 levels down the current directory that are enlisted in file 2
Find all files/directories 8 levels down the current directory that are enlisted in file 3
Find all files/directories 8 levels down the current directory that are enlisted in file 4
Find all files/directories 8 levels down the current directory that are enlisted in file 5
Find all files/directories 8 levels down the current directory that are enlisted in file 6
Find all files/directories 8 levels down the current directory that are enlisted in file 7
Find all files/directories 8 levels down the current directory that are enlisted in file 8
Find all files/directories 8 levels down the current directory that are enlisted in file 9
Find all files/directories 9 levels down the current directory that are enlisted in file 2
Find all files/directories 9 levels down the current directory that are enlisted in file 3
Find all files/directories 9 levels down the current directory that are enlisted in file 4
Find all files/directories 9 levels down the current directory that are enlisted in file 5
Find all files/directories 9 levels down the current directory that are enlisted in file 6
Find all files/directories 9 levels down the current directory that are enlisted in file 7
Find all files/directories 9 levels down the current directory that are enlisted in file 8
Find the directory with least access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Find the directory with most access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Find the file with most access time under current directory and assign it to $filename
List all files in current directory sorted by access time in reverse order
Find the directory with most access time under current directory and assign it to $filename
Find the file with most access time under current directory and assign it to $filename
Find the directory with least access time under current directory and assign it to $filename
Find the file with least access time under current directory and assign it to $filename
Finds all files with the extension .txt in the /home/user/Documents directory.
Finds all files with the extension .txt in the /home/user directory.
Finds all files with the extension .txt in the current directory and all subdirectories.
Finds all files with the extension .txt in the current directory.
Finds all files with the extension .txt in the /tmp directory.
Finds all files with the extension .txt in the /home directory.
Finds all files with the extension .txt in the /usr directory.
Finds all files with the extension .txt in the /var directory.
Finds all files with the extension .txt in the /etc directory.
Finds all files with the extension .txt in the /bin directory.
Finds all files with the extension .txt in the /sbin directory.
Finds all files with the extension .txt in the /opt directory.
Finds real time report in a 'sleep 2' command execution statistic.
Finds user time report in a 'sleep 2' command execution statistic.
Finds system time report in a 'sleep 2' command execution statistic.
Finds real time report in a 'sleep 3' command execution statistic.
Finds user time report in a 'sleep 3' command execution statistic.
Finds system time report in a 'sleep 3' command execution statistic.
Finds real time report in a 'sleep 5' command execution statistic.
Finds real time report in a 'sleep 6' command execution statistic.
Finds real time report in a 'sleep 7' command execution statistic.
Finds real time report in a 'sleep 8' command execution statistic.
Finds real time report in a 'sleep 9' command execution statistic.
For each line in 'file', print result =  followed by the line backwards.
For each line in 'file', print result =  followed by the line in reverse order.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 7.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 30.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled day of the month to 1.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled month to 1.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled minute to 30.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled hour to 3.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled day of the month to the 7th.
For every cron job with a comment change-enabled at the end of its crontab entry, change the scheduled month to June.
Print the working directory
List the contents of the current directory
Create a new directory named dir
Remove the directory named dir
Copy file1 to file2
Move or rename file1 to file2
Forcibly create symbolic links in target directory ~/staging for all files located in directory ~/mirror
Create a symbolic link named "file" in the current working directory that points to "/path/to/file"
Create a symbolic link named "file" in the directory "dir" that points to "/path/to/file"
Create a symbolic link named "file" in the current working directory that points to "/path/to/file", creating any intermediate directories if they don't already exist
Create a symbolic link named "file" in the directory "dir" that points to "/path/to/file"
Create a symbolic link named "file1" in the directory "dir" that points to "/path/to/file2"
Print the third column of a file
Print the fourth column of a file
Print the fifth column of a file
Print the sixth column of a file
Print the seventh column of a file
Print the eighth column of a file
Print the ninth column of a file
Print the first column of a file
Print the second column of a file
Print the fourth column of a file
Print the fifth column of a file
Print the sixth column of a file
Print the seventh column of a file
Print the eighth column of a file
Print the ninth column of a file
Get the actual grep exectuable path
Get the actual awk exectuable path
Get the actual tr exectuable path
Get the actual cut exectuable path
Get the actual wc exectuable path
Get the actual find exectuable path
Get the date
Get the current working directory
Get the user's home directory
Gets MAC address of en1 network interface.
Gets MAC address of en2 network interface.
Gets MAC address of en3 network interface.
Gets MAC address of en4 network interface.
Gets MAC address of wlan0 network interface.
Gets MAC address of fw1 network interface.
Gets MAC address of fw2 network interface.
Gets MAC address of fw3 network interface.
Gets MAC address of fw4 network interface.
Gets MAC address of fw5 network interface.
Gets MAC address of fw6 network interface.
Gets MAC address of fw7 network interface.
Gets MAC address of fw8 network interface.
Gets MAC address of fw9 network interface.
Gets MAC address of fw10 network interface.
Gets MAC address of fw11 network interface.
Gets MAC address of fw12 network interface.
Gets MAC address of fw2 network interface.
Gets MAC address of fw3 network interface.
Gets MAC address of fw4 network interface.
Gets MAC address of fw5 network interface.
Gets MAC address of fw6 network interface.
Gets MAC address of fw7 network interface.
Gets MAC address of fw8 network interface.
Gets MAC address of fw9 network interface.
Gets MAC address of fw2 network interface.
Gets IP address of fw2 network interface.
Gets MAC address of mfib1 network interface.
Gets MAC address of mfib2 network interface.
Gets MAC address of mfib3 network interface.
Gets MAC address of mfib4 network interface.
Gets MAC address of mfib5 network interface.
Gets MAC address of mfib6 network interface.
Gets MAC address of mfib7 network interface.
Gets MAC address of mfib8 network interface.
Gets MAC address of mfib9 network interface.
Gets MAC address of mfib10 network interface.
Gets MAC address of mfib11 network interface.
Gets MAC address of mfib12 network interface.
Gets MAC address of mfib2 network interface.
Gets MAC address of mfib3 network interface.
Gets MAC address of mfib4 network interface.
Gets MAC address of mfib5 network interface.
Gets MAC address of mfib6 network interface.
Gets MAC address of mfib7 network interface.
Gets MAC address of mfib8 network interface.
Gets MAC address of mfib9 network interface.
Gets MAC address of mfib10 network interface.
Gets MAC address of mfib11 network interface.
Gets MAC address of mfib12 network interface.
Gets MAC address of mfib13 network interface.
Gets MAC address of mfib3 network interface.
Gets MAC address of mfib4 network interface.
Gets MAC address of mfib5 network interface.
Gets MAC address of mfib6 network interface.
Gets MAC address of mfib7 network interface.
Gets MAC address of mfib8 network interface.
Gets MAC address of mfib9 network interface.
Gets MAC address of mfib10 network interface.
Gets MAC address of mfib11 network interface.
Gets MAC address of mfib12 network interface.
Gets MAC address of mfib13 network interface.
Gets MAC address of mfib14 network interface.
Immediately kill all processes listening on TCP port 3007.
Immediately kill all processes listening on TCP port 3008.
Immediately kill all processes listening on TCP port 3009.
Print lines 11-20 of a file
Print lines 21-30 of a file
Print lines 31-40 of a file
Print lines 41-50 of a file
Print lines 51-60 of a file
Print lines 61-70 of a file
Print lines 71-80 of a file
Print lines 81-90 of a file
Insert | every 30 characters in file longline
Insert _ every 30 characters in file longline
Insert * every 30 characters in file longline
Insert + every 30 characters in file longline
Insert = every 30 characters in file longline
Insert - every 30 characters in file longline
Insert _ every 30 characters in file longline
Insert a tab every 30 characters in file longline
Replace all instances of oldstring with newstring in file filename
Replace all instances of oldstring with newstring in every file in the current directory
Copy file1 to file2
Move file1 to file2
Insert * every 30 characters in file longline
Insert * every 40 characters in file longline
Insert * every 50 characters in file longline
Insert + every 30 characters in file longline
Insert a space every 30 characters in file longline
Insert a comma every 30 characters in file longline
Replace all newlines in file with spaces
Insert = every 30 characters in file longline
Insert - every 30 characters in file longline
Insert * every 30 characters in file longline
Insert @ every 30 characters in file longline
Insert - every 30 characters in file longline
Every 30 characters in file longline insert -
Insert the current date on line 15 of test.html
Insert the current time on line 15 of test.html
Append the current date to the end of test.html
Append the current time to the end of test.html
Prepend the current date to the beginning of test.html
Insert the current time on line 1 of test.html
Insert the current time on line 5 of test.html
Append the current time to the end of test.html
Insert the date on line 15 of test.html
Insert the time on line 15 of test.html
Append the contents of test2.html to the end of test.html
Prepend the contents of test2.html to the beginning of test.html
Display line 15 of test.html
Insert the current working directory on line 15 of test.html
Insert the date on line 15 of test.html
Append the contents of test2.html to test.html
Prepend the contents of test2.html to test.html
Display lines 10-20 of test.html
Create an empty file named file2
Create an empty file named file3
Create an empty file named file4
Create an empty file named file5
Create an empty file named file6
Create an empty file named file7
Create an empty file named file8
Create an empty file named file9
Delete file2
Delete file3
Delete file4
Delete file5
Delete file6
Delete file7
Delete file8
Delete file9
Delete file10
Delete file11
Delete file12
Delete file13
Delete file14
List each subdirectory name composing the current working directory
Get the second column of data from infile
Get the third column of data from infile
Get the fourth column of data from infile
Get the fifth column of data from infile
Get the sixth column of data from infile
Get the seventh column of data from infile
Get the eighth column of data from infile
Get the ninth column of data from infile
Get the third column of data from infile
Get the fourth column of data from infile
Get the fifth column of data from infile
Get the sixth column of data from infile
Get the seventh column of data from infile
Get the eighth column of data from infile
Get the ninth column of data from infile
Get the fourth column of data from infile
Get the fifth column of data from infile
Get the sixth column of data from infile
Get the seventh column of data from infile
Get the eighth column of data from infile
Get the ninth column of data from infile
Modify and rewrite 'file' replacing the third instance of foo on each line with bar
Modify and rewrite 'file' replacing the fourth instance of foo on each line with bar
Modify and rewrite 'file' replacing the fifth instance of foo on each line with bar
Modify and rewrite 'file' replacing the sixth instance of foo on each line with bar
Modify and rewrite 'file' replacing the seventh instance of foo on each line with bar
Modify and rewrite 'file' replacing the eighth instance of foo on each line with bar
Modify and rewrite 'file' replacing the first instance of foo on each line with bar
Modify and rewrite 'file' replacing the second instance of foo on each line with bar
Modify and rewrite 'file' replacing the fourth instance of foo on each line with bar
Modify and rewrite 'file' replacing the fifth instance of foo on each line with bar
Modify and rewrite 'file' replacing the sixth instance of foo on each line with bar
Modify and rewrite 'file' replacing the seventh instance of foo on each line with bar
Modify and rewrite 'file' replacing the eighth instance of foo on each line with bar
Modify and rewrite 'file' replacing the first instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the second instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fourth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fifth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the sixth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the seventh instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the eighth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fourth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fifth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the sixth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the seventh instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the eighth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the ninth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the tenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the eleventh instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the twelfth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the thirteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fourteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the fifteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the sixteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the seventeenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the eighteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the nineteenth instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Modify and rewrite 'file' replacing the third instance of foo on each line with bar, except for lines that contain baz
Number each line in foobar as right-justified zero padded to a width of 9
Number each line in foobar as left-justified zero padded to a width of 9
Number each line in foobar as right-justified space padded to a width of 9
Number each line in foobar as left-justified space padded to a width of 9
Number each line in foobar as right-justified space padded to a width of 12
Number each line in foobar as right-justified space padded to a width of 9
Number each line in foobar as left-justified space padded to a width of 9
Number each line in foobar as space padded to a width of 9 with no leading zeros
Number each line in foobar as zero padded to a width of 9 with no leading spaces
Number each line in foobar as right-justified space padded to a width of 12
Number each line in foobar as left-justified space padded to a width of 12
Number each line in foobar as space padded to a width of 12 with no leading zeros
Output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed.
Output all lines starting at line 16224 until the end of the file.
Output all lines from the beginning of the file until line 16482.
Output all lines from the beginning of the file until line 16482.
Output all lines from the beginning of the file until line 16483.
Output all lines from the beginning of the file until line 16484.
Output all lines from the beginning of the file until line 16485.
Output all lines from the beginning of the file until line 16486.
Output all lines from the beginning of the file until line 16487.
Output all lines from the beginning of the file until line 16488.
Prepend date and time to ping output to www.google.com
Prepend date and time to ping output to google.com
Prepend date and time to ping output to mail.google.com
Prepend date and time to ping output to maps.google.com
Prepend date and time to ping output to drive.google.com
Prepend date and time to ping output to sites.google.com
Prepend date and time to ping output to plus.google.com
Prepend date and time to ping output to play.google.com
Prepend date and time to ping output to news.google.com
Prepend date and time to ping output to finance.google.com
Prepend date and time to ping output to search.google.com
Prepend date and time to ping output to images.google.com
Prepend date and time to ping output to video.google.com
Prepend date and time to ping output to books.google.com
Prepend date and time to ping output to scholar.google.com
Prepend date and time to ping output to translate.google.com
Prepend date and time to ping output to photos.google.com
Prepends date to ping output
Prepends time to ping output
Appends date to ping output
Appends time to ping output
Outputs only date for each line of ping output
Prints working directory
Changes directory to user's home directory
Changes directory to the previous directory
Creates a new directory
Removes an empty directory
Copies a file from one location to another
Moves a file from one location to another
Prints the contents of a file to the terminal window
Prints the contents of a file to the terminal window, one page at a time
Prints the contents of a file to the terminal window, one line at a time
Print the first line of a.txt
Print the first line of b.txt
Print the first line of c.txt
Print the first line of d.txt
Print the first line of e.txt
Print the first line of f.txt
Print the first line of g.txt
Print the first line of h.txt
Print the first line of i.txt
Print the first line of j.txt
Print the first line of k.txt
Print the first line of l.txt
Print the first line of m.txt
Print the first line of n.txt
Print the first line of o.txt
Print the first line of p.txt
Print the first line of q.txt
Print the first line of r.txt
Print the first line of s.txt
Print the first line of t.txt
Print the last line of a.txt
Print the last line of b.txt
Print the last line of c.txt
Print the last line of d.txt
Print the last line of e.txt
Print the last line of f.txt
Print the last line of g.txt
Print the last line of h.txt
Print the last line of i.txt
Print the last line of j.txt
Print the last line of k.txt
Print the last line of l.txt
Print the last line of m.txt
Print the last line of n.txt
Print the last line of o.txt
Print the last line of p.txt
Print the last line of q.txt
Print the last line of r.txt
Print the last line of s.txt
Print the last line of t.txt
Print the first 3 lines of 123456789
Print the first 4 lines of 123456789
Print the first 5 lines of 123456789
Print the first 6 lines of 123456789
Print the first 7 lines of 123456789
Print the first 8 lines of 123456789
Print the first 9 lines of 123456789
Print the last 2 lines of a.txt
Print the last 2 lines of b.txt
Print the last 2 lines of c.txt
Print the last 2 lines of d.txt
Print the last 2 lines of e.txt
Print the last 2 lines of f.txt
Print the last 2 lines of g.txt
Print the last 2 lines of h.txt
Print the last 2 lines of i.txt
Print the last 2 lines of j.txt
Print the last 2 lines of k.txt
Print the last 2 lines of l.txt
Print the last 2 lines of m.txt
Print the last 2 lines of n.txt
Print the last 2 lines of o.txt
Print the last 2 lines of p.txt
Print the last 2 lines of q.txt
Print the last 2 lines of r.txt
Print the first 3 lines of a.txt
Print the first 3 lines of b.txt
Print the first 3 lines of c.txt
Print the first 3 lines of d.txt
Print the first 3 lines of e.txt
Print the first 3 lines of f.txt
Print the first 3 lines of g.txt
Print the first 3 lines of h.txt
Print the first 3 lines of i.txt
Print the first 3 lines of j.txt
Print the first 3 lines of k.txt
Print the first 3 lines of l.txt
Print the first 3 lines of m.txt
Print the first 3 lines of n.txt
Print the first 3 lines of o.txt
Print the first 3 lines of p.txt
Print the first 3 lines of q.txt
Print the first 3 lines of r.txt
Print the first 3 lines of s.txt
Print the first 3 lines of t.txt
Print the first 3 lines of u.txt
Print the first 3 lines of v.txt
Print the last 3 lines of a.txt
Print the last 3 lines of b.txt
Print the last 3 lines of c.txt
Print the last 3 lines of d.txt
Print the last 3 lines of e.txt
Print the last 3 lines of f.txt
Print the last 3 lines of g.txt
Print the last 3 lines of h.txt
Print the last 3 lines of i.txt
Print the last 3 lines of j.txt
Print the last 3 lines of k.txt
Print the last 3 lines of l.txt
Print the last 3 lines of m.txt
Print the last 3 lines of n.txt
Print the last 3 lines of o.txt
Print the last 3 lines of p.txt
Print the last 3 lines of q.txt
Print the last 3 lines of r.txt
Print the first 4 lines of a.txt
Print the first 4 lines of b.txt
Print the first 4 lines of c.txt
Print the first 4 lines of d.txt
Print the first 4 lines of e.txt
Print the first 4 lines of f.txt
Print the first 4 lines of g.txt
Print the first 4 lines of h.txt
Print the first 4 lines of i.txt
Print the first 4 lines of j.txt
Print the first 4 lines of k.txt
Print the first 4 lines of l.txt
Print the first 4 lines of m.txt
Print the first 4 lines of n.txt
Print the first 4 lines of o.txt
Print the first 4 lines of p.txt
Print the first 4 lines of q.txt
Print the first 4 lines of r.txt
Print the first 4 lines of s.txt
Print the last 4 lines of a.txt
Print the last 4 lines of b.txt
Print the last 4 lines of c.txt
Print the last 4 lines of d.txt
Print the last 4 lines of e.txt
Print the last 4 lines of f.txt
Print the last 4 lines of g.txt
Print the last 4 lines of h.txt
Print the last 4 lines of i.txt
Print the last 4 lines of j.txt
Print the last 4 lines of k.txt
Print the last 4 lines of l.txt
Print the last 4 lines of m.txt
Print the last 4 lines of n.txt
Print the last 4 lines of o.txt
Print the last 4 lines of p.txt
Print the last 4 lines of q.txt
Print the last 4 lines of r.txt
Print the first 5 lines of a.txt
Print the first 5 lines of b.txt
Print the first 5 lines of c.txt
Print the first 5 lines of d.txt
Print the first 5 lines of e.txt
Print the first 5 lines of f.txt
Print the first 5 lines of g.txt
Print the first 5 lines of h.txt
Print the first 5 lines of i.txt
Print the first 5 lines of j.txt
Print the first 5 lines of k.txt
Print the first 5 lines of l.txt
Print the first 5 lines of m.txt
Print the first 5 lines of n.txt
Print the first 5 lines of o.txt
Print the first 5 lines of p.txt
Print the first 5 lines of q.txt
Print the first 5 lines of r.txt
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print IP addresses of the host name
Print a line of $variable '-' characters
Print a line of $variable '=' characters
Print a line of $variable '*' characters
Print a line of $variable '+' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable ',' characters
Print a line of $variable '.' characters
Print a line of $variable '=' characters
Print a line of $variable '-' characters
Print a line of $variable '*' characters
Print a line of $variable '.' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable '^' characters
Print a line of $variable '_' characters
Print a line of $variable '`' characters
Print a line of $variable '\' characters
Print a line of $variable '/' characters
Print a line of $variable '-' characters
Print a line of $variable '_' characters
Print a line of $variable '|' characters
Print a line of $variable '-' characters
Print a line of $variable '*' characters
Print a line of $variable '.' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable '^' characters
Print a line of $variable '_' characters
Print a line of $variable '`' characters
Print a line of $variable '|' characters
Print a line of $variable '-' characters
Print a line of $variable '*' characters
Print a line of $variable '+' characters
Print a line of $variable '/' characters
Print a line of $variable '\' characters
Print a line of $variable '|' characters
Print a randomly sorted list of numbers from 1 to 10 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 100 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 1000 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 100 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 200 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 300 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 400 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 500 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 600 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 700 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 800 to file /tmp/lst and the screen followed by  -------
Print a randomly sorted list of numbers from 1 to 900 to file /tmp/lst and the screen followed by  -------
Print a comma separated table in table.txt with cell borders
Print a tab separated table in table.txt with cell borders
Print amount of space available on the file system containg path to the current working directory.
Print amount of space available on the file system containg path to the home directory.
Print amount of space available on the file system containg path to the root directory.
Print amount of space available on the file system containg path to the usr directory.
Print amount of space available on the file system containg path to the var directory.
Print amount of space available on the file system containg path to the home directory.
Print amount of space available on the file system containg path to the working directory.
Print and save the ping results of 1 request to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 2 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 3 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 4 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 5 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 6 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 7 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 8 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 9 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 10 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 11 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 12 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 13 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 14 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 1 request to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 2 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 3 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 4 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 5 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 6 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 7 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 8 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 9 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 10 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 11 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 12 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 13 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print and save the ping results of 14 requests to google.com in /home/user/myLogFile.log containing at most 100000 bytes
Print content of '3' file
Print content of '4' file
Print content of '5' file
Print content of '6' file
Print content of '7' file
Print content of '8' file
Print content of '9' file
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated decimal bytes on a single line
Print contents of file as space separated unsigned decimal bytes on a single line
Print contents of file as space separated signed decimal bytes on a single line
Print contents of file as space separated ASCII characters on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated unsigned decimal words on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated decimal bytes on a single line
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as newline separated octal bytes
Print contents of file as newline separated decimal bytes
Print contents of file as space separated decimal bytes on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as comma separated decimal bytes on a single line
Print contents of file as comma separated octal bytes on a single line
Print contents of file as comma separated hexadecimal bytes on a single line
Print contents of file as colon separated decimal bytes on a single line
Print contents of file as colon separated octal bytes on a single line
Print contents of file as space separated unsigned decimal bytes on a single line
Print contents of file as space separated signed decimal bytes on a single line
Print contents of file as space separated octal bytes on a single line
Print contents of file as space separated hexadecimal bytes on a single line
Print contents of file as space separated unsigned decimal words on a single line
Print contents of file as space separated signed decimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated signed decimal bytes on a single line
Print contents of file as space separated signed decimal words on a single line
Print contents of file as space separated signed decimal double words on a single line
Print contents of file as space separated ASCII characters on a single line
Print contents of file as comma separated ASCII characters on a single line
Print contents of file as tab separated ASCII characters on a single line
Print contents of file as pipe separated ASCII characters on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated decimal words on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as comma separated decimal words on a single line
Print contents of file as comma separated hexadecimal words on a single line
Print contents of file as space separated unsigned decimal words on a single line
Print contents of file as space separated signed decimal words on a single line
Print contents of file as space separated octal words on a single line
Print contents of file as space separated hexadecimal words on a single line
Print contents of file as space separated unsigned decimal words, one word per line
Print contents of file as space separated signed decimal words, one word per line
Print contents of file as space separated octal words, one word per line
Print the first column of a CSV file
Print the second column of a CSV file
Print the third column of a CSV file
Print the fourth column of a CSV file
Print the fifth column of a CSV file
Print the sixth column of a CSV file
Print the seventh column of a CSV file
Print the eighth column of a CSV file
Print the ninth column of a CSV file
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with % character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with % character removed
Print each column in file with - character removed
Print each column in file with _ character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with _ character removed
Print each column in file with __ character removed
Print each column in file with ___ character removed
Print each column in file with ____ character removed
Print each column in file with _____ character removed
Print each column in file with ______ character removed
Print each column in file with * character removed
Print each column in file with * character removed
Print each column in file with * character removed
Print each column in file with * character removed
Print each column in file with * character removed
Print each column in file with * character removed
Print each column in file with + character removed
Print each column in file with + character removed
Print each column in file with + character removed
Print each column in file with + character removed
Print each column in file with + character removed
Print each column in file with + character removed
Print each column in file with = character removed
Print each column in file with = character removed
Print every 16 bytes of standard input in groups of two followed by a space
Print every 8 bytes of standard input in groups of two followed by a space
Print every 4 bytes of standard input in groups of two followed by a space
Print every 8 bytes of standard input in groups of two followed by a space
Print every 16 bytes of standard input in groups of four followed by a space
Print every 32 bytes of standard input in groups of eight followed by a space
Print every 64 bytes of standard input in groups of sixteen followed by a space
Print every 4 bytes of standard input in groups of two followed by a space
Print every 8 bytes of standard input in groups of four followed by a space
Print every 16 bytes of standard input in groups of eight followed by a space
Print last 50 commands in history
Print the current user's UID
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 50 using up to 4 processes
Print numbers from 1 to 60 using up to 4 processes
Print numbers from 1 to 70 using up to 4 processes
Print numbers from 1 to 80 using up to 4 processes
Print numbers from 1 to 90 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 20 using up to 8 processes
Print numbers from 1 to 20 using up to 12 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 30 using up to 8 processes
Print numbers from 1 to 30 using up to 16 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 100 using up to 8 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 30 using up to 3 processes
Print numbers from 1 to 20 using up to 2 processes
Print numbers from 1 to 50 using up to 4 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 150 using up to 4 processes
Print numbers from 1 to 200 using up to 4 processes
Print numbers from 1 to 60 using up to 4 processes
Print numbers from 1 to 100 using up to 10 processes
Print numbers from 1 to 500 using up to 20 processes
Print numbers from 1 to 70 using up to 4 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 500 using up to 4 processes
Print numbers from 1 to 80 using up to 4 processes
Print numbers from 1 to 100 using up to 5 processes
Print numbers from 1 to 120 using up to 6 processes
Print numbers from 1 to 140 using up to 7 processes
Print numbers from 1 to 160 using up to 8 processes
Print numbers from 1 to 180 using up to 9 processes
Print numbers from 1 to 90 using up to 4 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 110 using up to 4 processes
Print numbers from 1 to 120 using up to 4 processes
Print numbers from 1 to 130 using up to 4 processes
Print numbers from 1 to 140 using up to 4 processes
Print numbers from 1 to 10 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 20 using up to 4 processes
Print numbers from 1 to 20 using up to 8 processes
Print numbers from 1 to 20 using up to 16 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 100 using up to 8 processes
Print numbers from 1 to 30 using up to 4 processes
Print numbers from 1 to 30 using up to 8 processes
Print numbers from 1 to 30 using up to 16 processes
Print numbers from 1 to 100 using up to 4 processes
Print numbers from 1 to 100 using up to 8 processes
Print numbers from 1 to 40 using up to 4 processes
Print numbers from 1 to 100 using up to 10 processes
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 10 values per line
Print numbers from 1 to 100 with 10 values per line
Print numbers from 1 to 10 with 2 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 5 values per line
Print numbers from 1 to 20 with 4 values per line
Print numbers from 1 to 20 with 3 values per line
Print numbers from 1 to 20 with 2 values per line
Print numbers from 1 to 100
Print numbers from 1 to 1000
Print numbers from 1 to 10000
Print numbers from 100 to 200
Print numbers from 1000 to 2000
Print the A record for domain example.com
Print the NS record for domain example.com
Print the MX record for domain example.com
Print the TXT record for domain example.com
Print the CNAME record for domain example.com
Print the PTR record for domain example.com
Print the SRV record for domain example.com
Print the AAAA record for domain example.com
Print the MX record for domain example.com
Print the NS record for domain example.com
Print the SOA record for domain example.com
Print the TXT record for domain example.com
Print space separated list of numbers from $start to $end
Print comma separated list of numbers from $start to $end
Print newline separated list of numbers from $start to $end
Print comma separated list of numbers from $start to $end
Print space separated list of numbers from $start to $end
Print space separated numbers from 1 to 10
Print space separated numbers from 11 to 20
Print space separated numbers from 21 to 30
Print space separated numbers from 31 to 40
Print space separated numbers from 41 to 50
Print space separated numbers from 51 to 60
Print space separated numbers from 61 to 70
Print space separated numbers from 71 to 80
Print space separated numbers from 81 to 90
Print space separated numbers from 1 to 100
Print space separated numbers from 1 to 200
Print space separated numbers from 1 to 300
Print space separated numbers from 1 to 400
Print space separated numbers from 1 to 1000
Print space separated numbers from 1 to 2000
Print space separated numbers from 1 to 3000
Print space separated numbers from 1 to 4000
Print space separated numbers from 1 to 10000
Print space separated numbers from 1 to 100
Print numbers from 1 to 5 in a column
Print the A record for mydomain.com
Print the AAAA record for mydomain.com
Print the CNAME record for mydomain.com
Print the MX record for mydomain.com
Print the NS record for mydomain.com
Print the PTR record for mydomain.com
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Print the IP addresses for the current host name
Get the canonical hostname
Get the IP address for a given hostname
Resolve an IP address to a hostname
Resolve an IP address to a hostname
Resolve an IP address to a hostname
Resolve an IP address to a hostname
Resolve an IP address to a hostname
Resolve an IP address to a hostname
Print the common first whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common sixth whitespace separated fields in file1 and file2
Print the common seventh whitespace separated fields in file1 and file2
Print the common eighth whitespace separated fields in file1 and file2
Print the common ninth whitespace separated fields in file1 and file2
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common sixth whitespace separated fields in file1 and file2
Print the common seventh whitespace separated fields in file1 and file2
Print the common eighth whitespace separated fields in file1 and file2
Print the common ninth whitespace separated fields in file1 and file2
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common sixth whitespace separated fields in file1 and file2
Print the common first whitespace separated fields in file1 and file2
Print the common second whitespace separated fields in file1 and file2
Print the common third whitespace separated fields in file1 and file2
Print the common fourth whitespace separated fields in file1 and file2
Print the common fifth whitespace separated fields in file1 and file2
Print the common sixth whitespace separated fields in file1 and file2
Print the common seventh whitespace separated fields in file1 and file2
Print the day 3 days ago
Print the day 4 days ago
Print the day 5 days ago
Print the day 6 days ago
Print the day 7 days ago
Print the day 8 days ago
Print the day 9 days ago
Print the day 10 days ago
Print the day 11 days ago
Print the day 12 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 1 day ago
Print the day 4 weeks ago
Print the day 3 weeks ago
Print the day 2 weeks ago
Print the day 1 week ago
Print the day 4 months ago
Print the day 3 months ago
Print the day 2 months ago
Print the day 1 month ago
Print the day 4 years ago
Print the day 3 years ago
Print the day 2 years ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 6 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 8 days ago
Print the day 7 days ago
Print the day 6 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 9 days ago
Print the day 8 days ago
Print the day 7 days ago
Print the day 6 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 10 days ago
Print the day 9 days ago
Print the day 8 days ago
Print the day 7 days ago
Print the day 6 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the day 11 days ago
Print the day 10 days ago
Print the day 9 days ago
Print the day 8 days ago
Print the day 7 days ago
Print the day 6 days ago
Print the day 5 days ago
Print the day 4 days ago
Print the day 3 days ago
Print the day 2 days ago
Print the git log in a tabular form
Print the git log for the last 10 commits
Print the git log for a specific author
Print the git log for a specific committer
Print the git log for a specific date range
Print the git log for a specific file
Print the git log for the last commit
Print the git log for the last 5 commits
Print the git log for a specific user
Print the git log for a specific file
Print the git log for a specific commit
Print the git log for a specific repository
Print the git log for a specific branch
Print the git log for a specific user
Print the git log for a specific date
Print the git log for a specific commit
Print the git log for a specific repository
Print the first 10 lines of file $OPTARG
Print the last 10 lines of file $OPTARG
Print the lines of file $OPTARG that contain string $OPTARG2
Print the lines of file $OPTARG that do not contain string $OPTARG2
Print the lines of file $OPTARG that contain string $OPTARG2, case-insensitive
Print the number of lines in file $OPTARG that contain string $OPTARG2
Print the line number of each line that contains string $OPTARG2 in file $OPTARG
Print what year it was 2 days ago
Print what year it was 3 days ago
Print what year it was 4 days ago
Print what year it was 5 days ago
Print what year it was 6 days ago
Print what year it was 7 days ago
Print what year it was 8 days ago
Print what year it was 9 days ago
Print what year it was 10 days ago
Print what year it was 11 days ago
Print what year it was 12 days ago
Print what year it was 200 days ago
Print what year it was 300 days ago
Print what year it was 400 days ago
Print what year it was 500 days ago
Print what year it was 600 days ago
Print what year it was 700 days ago
Print what year it was 800 days ago
Print what year it was 900 days ago
Prints all child processes of a process with id 20238, separated with comma.
Prints all processes running on the system, in a tree-like format.
Prints the calendar of August, 2009.
Prints the calendar of September, 2009.
Prints the calendar of October, 2009.
Prints the calendar of November, 2009.
Pushes the current working directory to the top of the directory stack.
Pushes the given directory to the top of the directory stack.
Swaps the top two directories on the directory stack.
Read hexadecimal bytes from device /dev/midi10
Read hexadecimal bytes from device /dev/midi11
Read hexadecimal bytes from device /dev/midi12
Read hexadecimal bytes from device /dev/midi13
Read hexadecimal bytes from device /dev/midi14
Read hexadecimal bytes from device /dev/midi15
Read hexadecimal bytes from device /dev/midi16
Read hexadecimal bytes from device /dev/midi17
Read hexadecimal bytes from device /dev/midi18
Read hexadecimal bytes from device /dev/midi19
Read hexadecimal bytes from device /dev/midi20
Read hexadecimal bytes from device /dev/midi21
Read hexadecimal bytes from device /dev/midi22
Read hexadecimal bytes from device /dev/midi23
Read hexadecimal bytes from device /dev/midi24
Read hexadecimal bytes from device /dev/midi25
Read hexadecimal bytes from device /dev/midi26